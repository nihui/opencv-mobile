name: release
on: [push, pull_request]
# on:
#   push:
#     tags:
#       - '*'

env:
  DEVELOPER_DIR: /Applications/Xcode_13.4.1.app/Contents/Developer
  IOS_DEPLOYMENT_TARGET: '9.0'
  MAC_DEPLOYMENT_TARGET: '10.9'
  MAC_ARM64_DEPLOYMENT_TARGET: '11.0'
  MAC_CATALYST_DEPLOYMENT_TARGET: '13.1'
  ENABLE_ARC: OFF
  ENABLE_VISIBILITY: OFF
  EMSCRIPTEN_VERSION: 3.1.28

permissions:
  contents: read

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.get_version.outputs.VERSION }}
    steps:
    - uses: actions/checkout@v3
    - name: get-version
      id: get_version
      run: echo "VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_OUTPUT
    - name: opencv2-source
      env:
        opencv-version: 2.4.13.7
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.opencv-version }}.zip -O opencv-${{ env.opencv-version }}.zip
        unzip -q opencv-${{ env.opencv-version }}.zip
        rm opencv-${{ env.opencv-version }}.zip
        cd opencv-${{ env.opencv-version }}
        truncate -s 0 cmake/OpenCVFindLibsGrfmt.cmake
        patch -p1 -i ../patches/opencv-${{ env.opencv-version }}-no-rtti.patch
        patch -p1 -i ../patches/opencv-${{ env.opencv-version }}-no-zlib.patch
        patch -p1 -i ../patches/opencv-${{ env.opencv-version }}-fix-highgui-include.patch
        patch -p1 -i ../patches/opencv-${{ env.opencv-version }}-no-link-stdc++.patch
        patch -p1 -i ../patches/opencv-${{ env.opencv-version }}-enable-cxx11.patch
        patch -p1 -i ../patches/opencv-${{ env.opencv-version }}-link-openmp.patch
        patch -p1 -i ../patches/opencv-${{ env.opencv-version }}-newer-msvc.patch
        patch -p1 -i ../patches/opencv-${{ env.opencv-version }}-minimal-install.patch
        cp ../patches/draw_text.h ../patches/mono_font_data.h modules/core/src/
        patch -p1 -i ../patches/opencv-${{ env.opencv-version }}-drawing-mono-font.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/
        rm -rf 3rdparty apps data doc samples platforms
        rm -rf modules/java
        rm -rf modules/python
        rm -rf modules/ts
        sed -e 's/__VERSION__/${{ env.opencv-version }}/g' ../patches/Info.plist > ./Info.plist
        cp ../opencv2_cmake_options.txt ./options.txt
        cd ..
        mv opencv-${{ env.opencv-version }} opencv-mobile-${{ env.opencv-version }}
        zip -9 -r opencv-mobile-${{ env.opencv-version }}.zip opencv-mobile-${{ env.opencv-version }}
    - name: opencv3-source
      env:
        opencv-version: 3.4.20
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.opencv-version }}.zip -O opencv-${{ env.opencv-version }}.zip
        unzip -q opencv-${{ env.opencv-version }}.zip
        rm opencv-${{ env.opencv-version }}.zip
        cd opencv-${{ env.opencv-version }}
        truncate -s 0 cmake/OpenCVFindLibsGrfmt.cmake
        patch -p1 -i ../patches/opencv-${{ env.opencv-version }}-no-rtti.patch
        patch -p1 -i ../patches/opencv-${{ env.opencv-version }}-no-zlib.patch
        patch -p1 -i ../patches/opencv-${{ env.opencv-version }}-link-openmp.patch
        patch -p1 -i ../patches/opencv-${{ env.opencv-version }}-minimal-install.patch
        cp ../patches/draw_text.h ../patches/mono_font_data.h modules/imgproc/src/
        patch -p1 -i ../patches/opencv-${{ env.opencv-version }}-drawing-mono-font.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/
        rm -rf 3rdparty apps data doc samples platforms
        rm -rf modules/java
        rm -rf modules/js
        rm -rf modules/python
        rm -rf modules/ts
        sed -e 's/__VERSION__/${{ env.opencv-version }}/g' ../patches/Info.plist > ./Info.plist
        cp ../opencv3_cmake_options.txt ./options.txt
        cd ..
        mv opencv-${{ env.opencv-version }} opencv-mobile-${{ env.opencv-version }}
        zip -9 -r opencv-mobile-${{ env.opencv-version }}.zip opencv-mobile-${{ env.opencv-version }}
    - name: opencv4-source
      env:
        opencv-version: 4.8.1
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.opencv-version }}.zip -O opencv-${{ env.opencv-version }}.zip
        unzip -q opencv-${{ env.opencv-version }}.zip
        rm opencv-${{ env.opencv-version }}.zip
        cd opencv-${{ env.opencv-version }}
        truncate -s 0 cmake/OpenCVFindLibsGrfmt.cmake
        rm -rf modules/gapi
        patch -p1 -i ../patches/opencv-${{ env.opencv-version }}-no-rtti.patch
        patch -p1 -i ../patches/opencv-${{ env.opencv-version }}-no-zlib.patch
        patch -p1 -i ../patches/opencv-${{ env.opencv-version }}-link-openmp.patch
        patch -p1 -i ../patches/opencv-${{ env.opencv-version }}-minimal-install.patch
        cp ../patches/draw_text.h ../patches/mono_font_data.h modules/imgproc/src/
        patch -p1 -i ../patches/opencv-${{ env.opencv-version }}-drawing-mono-font.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/
        rm -rf 3rdparty apps data doc samples platforms
        rm -rf modules/java
        rm -rf modules/js
        rm -rf modules/python
        rm -rf modules/ts
        sed -e 's/__VERSION__/${{ env.opencv-version }}/g' ../patches/Info.plist > ./Info.plist
        cp ../opencv4_cmake_options.txt ./options.txt
        cd ..
        mv opencv-${{ env.opencv-version }} opencv-mobile-${{ env.opencv-version }}
        zip -9 -r opencv-mobile-${{ env.opencv-version }}.zip opencv-mobile-${{ env.opencv-version }}
    - name: upload-opencv2-source
      uses: actions/upload-artifact@v3
      with:
        name: opencv-mobile-2.4.13.7-source
        path: opencv-mobile-2.4.13.7.zip
    - name: upload-opencv3-source
      uses: actions/upload-artifact@v3
      with:
        name: opencv-mobile-3.4.20-source
        path: opencv-mobile-3.4.20.zip
    - name: upload-opencv4-source
      uses: actions/upload-artifact@v3
      with:
        name: opencv-mobile-4.8.1-source
        path: opencv-mobile-4.8.1.zip

  # android:
  #   needs: [setup]
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       opencv-version: [2.4.13.7, 3.4.20, 4.8.1]
  #   env:
  #     COMMON_CMAKE_OPTIONS: |
  #       -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_LATEST_HOME/build/cmake/android.toolchain.cmake \
  #       -DANDROID_USE_LEGACY_TOOLCHAIN_FILE=False \
  #       -DANDROID_PLATFORM=android-21 \
  #       -DANDROID_CPP_FEATURES="no-rtti no-exceptions" \
  #       -DCMAKE_INSTALL_PREFIX=install \
  #       -DCMAKE_BUILD_TYPE=Release \
  #   steps:
  #   - uses: actions/checkout@v3
  #   - name: ndk-fix-debug
  #     run: sed -i -e '/^  -g$/d' $ANDROID_NDK_LATEST_HOME/build/cmake/android-legacy.toolchain.cmake
  #   - uses: actions/download-artifact@v3
  #     with:
  #       name: opencv-mobile-${{ matrix.opencv-version }}-source
  #   - name: setup-opencv-source
  #     run: |
  #       unzip -q opencv-mobile-${{ matrix.opencv-version }}.zip
  #       echo "SOURCE_DIR=opencv-mobile-${{ matrix.opencv-version }}" >> $GITHUB_ENV
  #       echo "PACKAGE_NAME=opencv-mobile-${{ matrix.opencv-version }}-android" >> $GITHUB_ENV
  #   - name: build-armeabi-v7a
  #     run: |
  #       cd ${{ env.SOURCE_DIR }}
  #       mkdir build-armeabi-v7a && cd build-armeabi-v7a
  #       cmake ${{ env.COMMON_CMAKE_OPTIONS }} -DANDROID_ABI="armeabi-v7a" -DANDROID_ARM_NEON=ON \
  #           `cat ../options.txt` -DBUILD_opencv_world=OFF -DOPENCV_DISABLE_FILESYSTEM_SUPPORT=ON ..
  #       cmake --build . -j 2
  #       cmake --build . --target install
  #   - name: build-arm64-v8a
  #     run: |
  #       cd ${{ env.SOURCE_DIR }}
  #       mkdir build-arm64-v8a && cd build-arm64-v8a
  #       cmake ${{ env.COMMON_CMAKE_OPTIONS }} -DANDROID_ABI="arm64-v8a" \
  #           `cat ../options.txt` -DBUILD_opencv_world=OFF -DOPENCV_DISABLE_FILESYSTEM_SUPPORT=ON -DOPENCV_EXTRA_FLAGS="-mno-outline-atomics" ..
  #       cmake --build . -j 2
  #       cmake --build . --target install
  #   - name: build-x86
  #     run: |
  #       cd ${{ env.SOURCE_DIR }}
  #       mkdir build-x86 && cd build-x86
  #       cmake ${{ env.COMMON_CMAKE_OPTIONS }} -DANDROID_ABI="x86" \
  #           `cat ../options.txt` -DBUILD_opencv_world=OFF -DOPENCV_DISABLE_FILESYSTEM_SUPPORT=ON ..
  #       cmake --build . -j 2
  #       cmake --build . --target install
  #   - name: build-x86_64
  #     run: |
  #       cd ${{ env.SOURCE_DIR }}
  #       mkdir build-x86_64 && cd build-x86_64
  #       cmake ${{ env.COMMON_CMAKE_OPTIONS }} -DANDROID_ABI="x86_64" \
  #           `cat ../options.txt` -DBUILD_opencv_world=OFF -DOPENCV_DISABLE_FILESYSTEM_SUPPORT=ON ..
  #       cmake --build . -j 2
  #       cmake --build . --target install
  #   - name: package
  #     run: |
  #       mkdir ${{ env.PACKAGE_NAME }}
  #       cp -rf ${{ env.SOURCE_DIR }}/build-x86/install/* ${{ env.PACKAGE_NAME }}/
  #       cp -rf ${{ env.SOURCE_DIR }}/build-x86_64/install/* ${{ env.PACKAGE_NAME }}/
  #       cp -rf ${{ env.SOURCE_DIR }}/build-armeabi-v7a/install/* ${{ env.PACKAGE_NAME }}/
  #       cp -rf ${{ env.SOURCE_DIR }}/build-arm64-v8a/install/* ${{ env.PACKAGE_NAME }}/
  #       zip -9 -r ${{ env.PACKAGE_NAME }}.zip ${{ env.PACKAGE_NAME }}
  #   - name: test-armeabi-v7a
  #     run: |
  #       cd test
  #       mkdir build-armeabi-v7a && cd build-armeabi-v7a
  #       cmake ${{ env.COMMON_CMAKE_OPTIONS }} -DANDROID_ABI="armeabi-v7a" -DANDROID_ARM_NEON=ON \
  #           -DOpenCV_DIR=$GITHUB_WORKSPACE/${{ env.PACKAGE_NAME }}/sdk/native/jni ..
  #       cmake --build . -j 2
  #   - name: test-arm64-v8a
  #     run: |
  #       cd test
  #       mkdir build-arm64-v8a && cd build-arm64-v8a
  #       cmake ${{ env.COMMON_CMAKE_OPTIONS }} -DANDROID_ABI="arm64-v8a" \
  #           -DOpenCV_DIR=$GITHUB_WORKSPACE/${{ env.PACKAGE_NAME }}/sdk/native/jni ..
  #       cmake --build . -j 2
  #   - name: test-x86
  #     run: |
  #       cd test
  #       mkdir build-x86 && cd build-x86
  #       cmake ${{ env.COMMON_CMAKE_OPTIONS }} -DANDROID_ABI="x86" \
  #           -DOpenCV_DIR=$GITHUB_WORKSPACE/${{ env.PACKAGE_NAME }}/sdk/native/jni ..
  #       cmake --build . -j 2
  #   - name: test-x86_64
  #     run: |
  #       cd test
  #       mkdir build-x86_64 && cd build-x86_64
  #       cmake ${{ env.COMMON_CMAKE_OPTIONS }} -DANDROID_ABI="x86_64" \
  #           -DOpenCV_DIR=$GITHUB_WORKSPACE/${{ env.PACKAGE_NAME }}/sdk/native/jni ..
  #       cmake --build . -j 2
  #   - name: upload
  #     uses: actions/upload-artifact@v3
  #     with:
  #       name: ${{ env.PACKAGE_NAME }}
  #       path: ${{ env.PACKAGE_NAME }}.zip

  ios:
    needs: [setup]
    runs-on: macos-12
    strategy:
      matrix:
        bitcode: [OFF, ON]
        include:
          - { opencv-version: 2.4.13.7, opencv-header-dir: include/opencv2         }
          - { opencv-version: 3.4.20,   opencv-header-dir: include/opencv2         }
          - { opencv-version: 4.8.1,    opencv-header-dir: include/opencv4/opencv2 }
    env:
      COMMON_CMAKE_OPTIONS: |
        -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake \
        -DPLATFORM=OS \
        -DDEPLOYMENT_TARGET=$IOS_DEPLOYMENT_TARGET \
        -DENABLE_BITCODE=${{ matrix.bitcode }} \
        -DENABLE_ARC=$ENABLE_ARC \
        -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
        -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" \
        -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
        -DCMAKE_INSTALL_PREFIX=install \
        -DCMAKE_BUILD_TYPE=Release \
    steps:
    - uses: actions/checkout@v3
    - uses: actions/download-artifact@v3
      with:
        name: opencv-mobile-${{ matrix.opencv-version }}-source
    - name: setup-opencv-source
      if: matrix.bitcode == 'OFF'
      run: |
        unzip -q opencv-mobile-${{ matrix.opencv-version }}.zip
        echo "SOURCE_DIR=opencv-mobile-${{ matrix.opencv-version }}" >> $GITHUB_ENV
        echo "PACKAGE_NAME=opencv-mobile-${{ matrix.opencv-version }}-ios" >> $GITHUB_ENV
    - name: setup-opencv-source-bitcode
      if: matrix.bitcode == 'ON'
      run: |
        unzip -q opencv-mobile-${{ matrix.opencv-version }}.zip
        echo "SOURCE_DIR=opencv-mobile-${{ matrix.opencv-version }}" >> $GITHUB_ENV
        echo "PACKAGE_NAME=opencv-mobile-${{ matrix.opencv-version }}-ios-bitcode" >> $GITHUB_ENV
    - name: workaround-opencv2-list
      if: matrix.opencv-version == '2.4.13.7'
      run: |
        # workaround ar @list issue on macos
        sed -i -e 's!\\"${objpath4}\\"!${objpath4}!g' ${{ env.SOURCE_DIR }}/modules/world/CMakeLists.txt
    - name: build-armv7
      run: |
        cd ${{ env.SOURCE_DIR }}
        mkdir build-armv7 && cd build-armv7
        cmake ${{ env.COMMON_CMAKE_OPTIONS }} -DARCHS="armv7" \
            `cat ../options.txt` -DBUILD_opencv_world=ON -DOPENCV_DISABLE_FILESYSTEM_SUPPORT=ON ..
        # workaround ar @list issue on macos
        cmake --build . -j 3 || { cd modules/world; $DEVELOPER_DIR/Toolchains/XcodeDefault.xctoolchain/usr/bin/ar qc ../../lib/libopencv_world.a `cat world_objects.rsp` CMakeFiles/opencv_world.dir/src/world_init.cpp.o; cd ../..; }
        cmake --build . --target install
    - name: build-arm64
      run: |
        cd ${{ env.SOURCE_DIR }}
        mkdir build-arm64 && cd build-arm64
        cmake ${{ env.COMMON_CMAKE_OPTIONS }} -DARCHS="arm64" \
            `cat ../options.txt` -DBUILD_opencv_world=ON -DOPENCV_DISABLE_FILESYSTEM_SUPPORT=ON ..
        # workaround ar @list issue on macos
        cmake --build . -j 3 || { cd modules/world; $DEVELOPER_DIR/Toolchains/XcodeDefault.xctoolchain/usr/bin/ar qc ../../lib/libopencv_world.a `cat world_objects.rsp` CMakeFiles/opencv_world.dir/src/world_init.cpp.o; cd ../..; }
        cmake --build . --target install
    - name: build-arm64e
      run: |
        cd ${{ env.SOURCE_DIR }}
        mkdir build-arm64e && cd build-arm64e
        cmake ${{ env.COMMON_CMAKE_OPTIONS }} -DARCHS="arm64e" \
            `cat ../options.txt` -DBUILD_opencv_world=ON -DOPENCV_DISABLE_FILESYSTEM_SUPPORT=ON ..
        # workaround ar @list issue on macos
        cmake --build . -j 3 || { cd modules/world; $DEVELOPER_DIR/Toolchains/XcodeDefault.xctoolchain/usr/bin/ar qc ../../lib/libopencv_world.a `cat world_objects.rsp` CMakeFiles/opencv_world.dir/src/world_init.cpp.o; cd ../..; }
        cmake --build . --target install
    - name: package
      run: |
        rm -rf opencv2.framework
        mkdir -p opencv2.framework/Versions/A/Headers
        mkdir -p opencv2.framework/Versions/A/Resources
        ln -s A opencv2.framework/Versions/Current
        ln -s Versions/Current/Headers opencv2.framework/Headers
        ln -s Versions/Current/Resources opencv2.framework/Resources
        ln -s Versions/Current/opencv2 opencv2.framework/opencv2
        lipo -create \
            ${{ env.SOURCE_DIR }}/build-armv7/install/lib/libopencv_world.a \
            ${{ env.SOURCE_DIR }}/build-arm64/install/lib/libopencv_world.a \
            ${{ env.SOURCE_DIR }}/build-arm64e/install/lib/libopencv_world.a \
            -o opencv2.framework/Versions/A/opencv2
        cp -r ${{ env.SOURCE_DIR }}/build-x86_64/install/${{ matrix.opencv-header-dir }}/* opencv2.framework/Versions/A/Headers/
        cp ${{ env.SOURCE_DIR }}/Info.plist opencv2.framework/Versions/A/Resources/
        rm -f ${{ env.PACKAGE_NAME }}.zip
        zip -9 -y -r ${{ env.PACKAGE_NAME }}.zip opencv2.framework
    - name: test
      run: |
        cd test
        mkdir build && cd build
        cmake ${{ env.COMMON_CMAKE_OPTIONS }} -DARCHS="armv7;arm64;arm64e" \
            -DOpenCV_DIR=$GITHUB_WORKSPACE ..
        cmake --build . -j 3
    - name: upload-zip
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGE_NAME }}
        path: ${{ env.PACKAGE_NAME }}.zip

  ios-simulator:
    needs: [setup]
    runs-on: macos-12
    strategy:
      matrix:
        bitcode: [OFF, ON]
        include:
          - { opencv-version: 2.4.13.7, opencv-header-dir: include/opencv2         }
          - { opencv-version: 3.4.20,   opencv-header-dir: include/opencv2         }
          - { opencv-version: 4.8.1,    opencv-header-dir: include/opencv4/opencv2 }
    env:
      COMMON_CMAKE_OPTIONS: |
        -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake \
        -DPLATFORM=SIMULATOR \
        -DDEPLOYMENT_TARGET=$IOS_DEPLOYMENT_TARGET \
        -DENABLE_BITCODE=${{ matrix.bitcode }} \
        -DENABLE_ARC=$ENABLE_ARC \
        -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
        -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" \
        -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
        -DCMAKE_INSTALL_PREFIX=install \
        -DCMAKE_BUILD_TYPE=Release \
    steps:
    - uses: actions/checkout@v3
    - uses: actions/download-artifact@v3
      with:
        name: opencv-mobile-${{ matrix.opencv-version }}-source
    - name: setup-opencv-source
      if: matrix.bitcode == 'OFF'
      run: |
        unzip -q opencv-mobile-${{ matrix.opencv-version }}.zip
        echo "SOURCE_DIR=opencv-mobile-${{ matrix.opencv-version }}" >> $GITHUB_ENV
        echo "PACKAGE_NAME=opencv-mobile-${{ matrix.opencv-version }}-ios-simulator" >> $GITHUB_ENV
    - name: setup-opencv-source-bitcode
      if: matrix.bitcode == 'ON'
      run: |
        unzip -q opencv-mobile-${{ matrix.opencv-version }}.zip
        echo "SOURCE_DIR=opencv-mobile-${{ matrix.opencv-version }}" >> $GITHUB_ENV
        echo "PACKAGE_NAME=opencv-mobile-${{ matrix.opencv-version }}-ios-simulator-bitcode" >> $GITHUB_ENV
    - name: workaround-opencv2-list
      if: matrix.opencv-version == '2.4.13.7'
      run: |
        # workaround ar @list issue on macos
        sed -i -e 's!\\"${objpath4}\\"!${objpath4}!g' ${{ env.SOURCE_DIR }}/modules/world/CMakeLists.txt
    - name: build-i386
      run: |
        cd ${{ env.SOURCE_DIR }}
        mkdir build-i386 && cd build-i386
        cmake ${{ env.COMMON_CMAKE_OPTIONS }} -DARCHS="i386" \
            `cat ../options.txt` -DBUILD_opencv_world=ON -DOPENCV_DISABLE_FILESYSTEM_SUPPORT=ON ..
        # workaround ar @list issue on macos
        cmake --build . -j 3 || { cd modules/world; $DEVELOPER_DIR/Toolchains/XcodeDefault.xctoolchain/usr/bin/ar qc ../../lib/libopencv_world.a `cat world_objects.rsp` CMakeFiles/opencv_world.dir/src/world_init.cpp.o; cd ../..; }
        cmake --build . --target install
    - name: build-x86_64
      run: |
        cd ${{ env.SOURCE_DIR }}
        mkdir build-x86_64 && cd build-x86_64
        cmake ${{ env.COMMON_CMAKE_OPTIONS }} -DARCHS="x86_64" \
            `cat ../options.txt` -DBUILD_opencv_world=ON -DOPENCV_DISABLE_FILESYSTEM_SUPPORT=ON ..
        # workaround ar @list issue on macos
        cmake --build . -j 3 || { cd modules/world; $DEVELOPER_DIR/Toolchains/XcodeDefault.xctoolchain/usr/bin/ar qc ../../lib/libopencv_world.a `cat world_objects.rsp` CMakeFiles/opencv_world.dir/src/world_init.cpp.o; cd ../..; }
        cmake --build . --target install
    - name: build-arm64
      run: |
        cd ${{ env.SOURCE_DIR }}
        mkdir build-arm64 && cd build-arm64
        cmake ${{ env.COMMON_CMAKE_OPTIONS }} -DARCHS="arm64" \
            `cat ../options.txt` -DBUILD_opencv_world=ON -DOPENCV_DISABLE_FILESYSTEM_SUPPORT=ON ..
        # workaround ar @list issue on macos
        cmake --build . -j 3 || { cd modules/world; $DEVELOPER_DIR/Toolchains/XcodeDefault.xctoolchain/usr/bin/ar qc ../../lib/libopencv_world.a `cat world_objects.rsp` CMakeFiles/opencv_world.dir/src/world_init.cpp.o; cd ../..; }
        cmake --build . --target install
    - name: package
      run: |
        rm -rf opencv2.framework
        mkdir -p opencv2.framework/Versions/A/Headers
        mkdir -p opencv2.framework/Versions/A/Resources
        ln -s A opencv2.framework/Versions/Current
        ln -s Versions/Current/Headers opencv2.framework/Headers
        ln -s Versions/Current/Resources opencv2.framework/Resources
        ln -s Versions/Current/opencv2 opencv2.framework/opencv2
        lipo -create \
            ${{ env.SOURCE_DIR }}/build-i386/install/lib/libopencv_world.a \
            ${{ env.SOURCE_DIR }}/build-x86_64/install/lib/libopencv_world.a \
            ${{ env.SOURCE_DIR }}/build-arm64/install/lib/libopencv_world.a \
            -o opencv2.framework/Versions/A/opencv2
        cp -r ${{ env.SOURCE_DIR }}/build-x86_64/install/${{ matrix.opencv-header-dir }}/* opencv2.framework/Versions/A/Headers/
        cp ${{ env.SOURCE_DIR }}/Info.plist opencv2.framework/Versions/A/Resources/
        rm -f ${{ env.PACKAGE_NAME }}.zip
        zip -9 -y -r ${{ env.PACKAGE_NAME }}.zip opencv2.framework
    - name: test
      run: |
        cd test
        mkdir build && cd build
        cmake ${{ env.COMMON_CMAKE_OPTIONS }} -DARCHS="i386;x86_64;arm64" \
            -DOpenCV_DIR=$GITHUB_WORKSPACE ..
        cmake --build . -j 3
    - name: upload-zip
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGE_NAME }}
        path: ${{ env.PACKAGE_NAME }}.zip

  armlinux:
    needs: [setup]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - { opencv-version: 2.4.13.7, opencv-dir: share/OpenCV      }
          - { opencv-version: 3.4.20,   opencv-dir: share/OpenCV      }
          - { opencv-version: 4.8.1,    opencv-dir: lib/cmake/opencv4 }
    env:
      COMMON_CMAKE_OPTIONS: |
        -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" \
        -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
        -DCMAKE_INSTALL_PREFIX=install \
        -DCMAKE_BUILD_TYPE=Release \
    steps:
    - name: arm-gnu-toolchain
      run: |
        sudo apt-get update
        sudo apt-get install g++-arm-linux-gnueabi g++-arm-linux-gnueabihf g++-aarch64-linux-gnu

    - uses: actions/checkout@v3
    - uses: actions/download-artifact@v3
      with:
        name: opencv-mobile-${{ matrix.opencv-version }}-source
    - name: setup-opencv-source
      run: |
        unzip -q opencv-mobile-${{ matrix.opencv-version }}.zip
        echo "SOURCE_DIR=opencv-mobile-${{ matrix.opencv-version }}" >> $GITHUB_ENV
        echo "PACKAGE_NAME=opencv-mobile-${{ matrix.opencv-version }}-armlinux" >> $GITHUB_ENV
    - name: build-arm-linux-gnueabi
      run: |
        cd ${{ env.SOURCE_DIR }}
        mkdir build-arm-linux-gnueabi && cd build-arm-linux-gnueabi
        cmake ${{ env.COMMON_CMAKE_OPTIONS }} -DCMAKE_TOOLCHAIN_FILE=../../toolchains/arm-linux-gnueabi.toolchain.cmake \
            `cat ../options.txt` -DBUILD_opencv_world=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-arm-linux-gnueabihf
      run: |
        cd ${{ env.SOURCE_DIR }}
        mkdir build-arm-linux-gnueabihf && cd build-arm-linux-gnueabihf
        cmake ${{ env.COMMON_CMAKE_OPTIONS }} -DCMAKE_TOOLCHAIN_FILE=../../toolchains/arm-linux-gnueabihf.toolchain.cmake \
            `cat ../options.txt` -DBUILD_opencv_world=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-aarch64-linux-gnu
      run: |
        cd ${{ env.SOURCE_DIR }}
        mkdir build-aarch64-linux-gnu && cd build-aarch64-linux-gnu
        cmake ${{ env.COMMON_CMAKE_OPTIONS }} -DCMAKE_TOOLCHAIN_FILE=../../toolchains/aarch64-linux-gnu.toolchain.cmake \
            `cat ../options.txt` -DBUILD_opencv_world=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package
      run: |
        mkdir ${{ env.PACKAGE_NAME }}
        mkdir ${{ env.PACKAGE_NAME }}/arm-linux-gnueabi
        mkdir ${{ env.PACKAGE_NAME }}/arm-linux-gnueabihf
        mkdir ${{ env.PACKAGE_NAME }}/aarch64-linux-gnu
        cp -rf ${{ env.SOURCE_DIR }}/build-arm-linux-gnueabi/install/* ${{ env.PACKAGE_NAME }}/arm-linux-gnueabi/
        cp -rf ${{ env.SOURCE_DIR }}/build-arm-linux-gnueabihf/install/* ${{ env.PACKAGE_NAME }}/arm-linux-gnueabihf/
        cp -rf ${{ env.SOURCE_DIR }}/build-aarch64-linux-gnu/install/* ${{ env.PACKAGE_NAME }}/aarch64-linux-gnu/
        zip -9 -r ${{ env.PACKAGE_NAME }}.zip ${{ env.PACKAGE_NAME }}
    - name: test-arm-linux-gnueabi
      run: |
        cd test
        mkdir build-arm-linux-gnueabi && cd build-arm-linux-gnueabi
        cmake ${{ env.COMMON_CMAKE_OPTIONS }} -DCMAKE_TOOLCHAIN_FILE=../../toolchains/arm-linux-gnueabi.toolchain.cmake \
            -DOpenCV_DIR=$GITHUB_WORKSPACE/${{ env.PACKAGE_NAME }}/arm-linux-gnueabi/${{ matrix.opencv-dir }} ..
        cmake --build . -j 2
    - name: test-arm-linux-gnueabihf
      run: |
        cd test
        mkdir build-arm-linux-gnueabihf && cd build-arm-linux-gnueabihf
        cmake ${{ env.COMMON_CMAKE_OPTIONS }} -DCMAKE_TOOLCHAIN_FILE=../../toolchains/arm-linux-gnueabihf.toolchain.cmake \
            -DOpenCV_DIR=$GITHUB_WORKSPACE/${{ env.PACKAGE_NAME }}/arm-linux-gnueabihf/${{ matrix.opencv-dir }} ..
        cmake --build . -j 2
    - name: test-aarch64-linux-gnu
      run: |
        cd test
        mkdir build-aarch64-linux-gnu && cd build-aarch64-linux-gnu
        cmake ${{ env.COMMON_CMAKE_OPTIONS }} -DCMAKE_TOOLCHAIN_FILE=../../toolchains/aarch64-linux-gnu.toolchain.cmake \
            -DOpenCV_DIR=$GITHUB_WORKSPACE/${{ env.PACKAGE_NAME }}/aarch64-linux-gnu/${{ matrix.opencv-dir }} ..
        cmake --build . -j 2
    - name: upload-zip
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGE_NAME }}
        path: ${{ env.PACKAGE_NAME }}.zip
