name: release
#on: [push, pull_request]
on:
  push:
    tags:
      - '*'

env:
  DEVELOPER_DIR: /Applications/Xcode_12.2.app/Contents/Developer

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.get_version.outputs.VERSION }}
    steps:
    - name: get-version
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

  android-opencv4:
    runs-on: ubuntu-latest
    env:
      OPENCV_VERSION: 4.5.1
      PACKAGENAME: opencv-mobile-4.5.1-android
    steps:
    - uses: actions/checkout@v2
    - name: ndk-fix-debug
      run: sed -i -e '/^  -g$/d' $ANDROID_HOME/ndk-bundle/build/cmake/android.toolchain.cmake
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        truncate -s 0 cmake/OpenCVFindLibsGrfmt.cmake
        rm -rf modules/gapi
        patch -p1 -i ../opencv-4.5.1-no-rtti.patch
        patch -p1 -i ../opencv-4.5.1-no-zlib.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/
    - name: build-armeabi-v7a
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-armeabi-v7a && cd build-armeabi-v7a
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_HOME/ndk-bundle/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI="armeabi-v7a" -DANDROID_ARM_NEON=ON -DANDROID_PLATFORM=android-24 -DANDROID_CPP_FEATURES="no-rtti no-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv4_cmake_options.txt` -DBUILD_opencv_world=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-arm64-v8a
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-arm64-v8a && cd build-arm64-v8a
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_HOME/ndk-bundle/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI="arm64-v8a" -DANDROID_PLATFORM=android-24 -DANDROID_CPP_FEATURES="no-rtti no-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv4_cmake_options.txt` -DBUILD_opencv_world=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-x86
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x86 && cd build-x86
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_HOME/ndk-bundle/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI="x86" -DANDROID_PLATFORM=android-24 -DANDROID_CPP_FEATURES="no-rtti no-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv4_cmake_options.txt` -DBUILD_opencv_world=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-x86_64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x86_64 && cd build-x86_64
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_HOME/ndk-bundle/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI="x86_64" -DANDROID_PLATFORM=android-24 -DANDROID_CPP_FEATURES="no-rtti no-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv4_cmake_options.txt` -DBUILD_opencv_world=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package
      run: |
        mkdir ${{ env.PACKAGENAME }}
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-x86/install/* ${{ env.PACKAGENAME }}/
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-x86_64/install/* ${{ env.PACKAGENAME }}/
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-armeabi-v7a/install/* ${{ env.PACKAGENAME }}/
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-arm64-v8a/install/* ${{ env.PACKAGENAME }}/
        rm -rf ${{ env.PACKAGENAME }}/sdk/etc
        rm -f ${{ env.PACKAGENAME }}/sdk/native/jni/*.mk
        rm -f ${{ env.PACKAGENAME }}/sdk/native/jni/android.toolchain.cmake
        zip -9 -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  android-opencv3:
    runs-on: ubuntu-latest
    env:
      OPENCV_VERSION: 3.4.13
      PACKAGENAME: opencv-mobile-3.4.13-android
    steps:
    - uses: actions/checkout@v2
    - name: ndk-fix-debug
      run: sed -i -e '/^  -g$/d' $ANDROID_HOME/ndk-bundle/build/cmake/android.toolchain.cmake
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        truncate -s 0 cmake/OpenCVFindLibsGrfmt.cmake
        patch -p1 -i ../opencv-3.4.13-no-rtti.patch
        patch -p1 -i ../opencv-3.4.13-no-zlib.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/
    - name: build-armeabi-v7a
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-armeabi-v7a && cd build-armeabi-v7a
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_HOME/ndk-bundle/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI="armeabi-v7a" -DANDROID_ARM_NEON=ON -DANDROID_PLATFORM=android-24 -DANDROID_CPP_FEATURES="no-rtti no-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-arm64-v8a
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-arm64-v8a && cd build-arm64-v8a
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_HOME/ndk-bundle/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI="arm64-v8a" -DANDROID_PLATFORM=android-24 -DANDROID_CPP_FEATURES="no-rtti no-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-x86
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x86 && cd build-x86
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_HOME/ndk-bundle/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI="x86" -DANDROID_PLATFORM=android-24 -DANDROID_CPP_FEATURES="no-rtti no-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-x86_64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x86_64 && cd build-x86_64
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_HOME/ndk-bundle/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI="x86_64" -DANDROID_PLATFORM=android-24 -DANDROID_CPP_FEATURES="no-rtti no-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package
      run: |
        mkdir ${{ env.PACKAGENAME }}
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-x86/install/* ${{ env.PACKAGENAME }}/
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-x86_64/install/* ${{ env.PACKAGENAME }}/
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-armeabi-v7a/install/* ${{ env.PACKAGENAME }}/
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-arm64-v8a/install/* ${{ env.PACKAGENAME }}/
        rm -rf ${{ env.PACKAGENAME }}/apk
        rm -rf ${{ env.PACKAGENAME }}/sdk/etc
        rm -f ${{ env.PACKAGENAME }}/sdk/native/jni/*.mk
        rm -f ${{ env.PACKAGENAME }}/sdk/native/jni/android.toolchain.cmake
        zip -9 -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  android-opencv2:
    runs-on: ubuntu-latest
    env:
      OPENCV_VERSION: 2.4.13.7
      PACKAGENAME: opencv-mobile-2.4.13.7-android
    steps:
    - uses: actions/checkout@v2
    - name: ndk-fix-debug
      run: sed -i -e '/^  -g$/d' $ANDROID_HOME/ndk-bundle/build/cmake/android.toolchain.cmake
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        truncate -s 0 cmake/OpenCVFindLibsGrfmt.cmake
        patch -p1 -i ../opencv-2.4.13.7-no-rtti.patch
        patch -p1 -i ../opencv-2.4.13.7-no-zlib.patch
        patch -p1 -i ../opencv-2.4.13.7-fix-highgui-include.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/
    - name: build-armeabi-v7a
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-armeabi-v7a && cd build-armeabi-v7a
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_HOME/ndk-bundle/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI="armeabi-v7a" -DANDROID_ARM_NEON=ON -DANDROID_PLATFORM=android-24 -DANDROID_CPP_FEATURES="no-rtti no-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv2_cmake_options.txt` -DBUILD_opencv_world=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-arm64-v8a
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-arm64-v8a && cd build-arm64-v8a
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_HOME/ndk-bundle/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI="arm64-v8a" -DANDROID_PLATFORM=android-24 -DANDROID_CPP_FEATURES="no-rtti no-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv2_cmake_options.txt` -DBUILD_opencv_world=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-x86
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x86 && cd build-x86
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_HOME/ndk-bundle/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI="x86" -DANDROID_PLATFORM=android-24 -DANDROID_CPP_FEATURES="no-rtti no-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv2_cmake_options.txt` -DBUILD_opencv_world=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-x86_64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x86_64 && cd build-x86_64
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_HOME/ndk-bundle/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI="x86_64" -DANDROID_PLATFORM=android-24 -DANDROID_CPP_FEATURES="no-rtti no-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv2_cmake_options.txt` -DBUILD_opencv_world=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package
      run: |
        mkdir ${{ env.PACKAGENAME }}
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-x86/install/* ${{ env.PACKAGENAME }}/
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-x86_64/install/* ${{ env.PACKAGENAME }}/
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-armeabi-v7a/install/* ${{ env.PACKAGENAME }}/
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-arm64-v8a/install/* ${{ env.PACKAGENAME }}/
        rm -f ${{ env.PACKAGENAME }}/sdk/native/libs/armeabi-v7a/libopencv_info.so
        rm -f ${{ env.PACKAGENAME }}/sdk/native/libs/arm64-v8a/libopencv_info.so
        rm -f ${{ env.PACKAGENAME }}/sdk/native/libs/x86/libopencv_info.so
        rm -f ${{ env.PACKAGENAME }}/sdk/native/libs/x86_64/libopencv_info.so
        rm -rf ${{ env.PACKAGENAME }}/sdk/etc
        rm -f ${{ env.PACKAGENAME }}/sdk/native/jni/*.mk
        rm -f ${{ env.PACKAGENAME }}/sdk/native/jni/android.toolchain.cmake
        zip -9 -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  ios-opencv4:
    runs-on: macos-latest
    env:
      OPENCV_VERSION: 4.5.1
      PACKAGENAME: opencv-mobile-4.5.1-ios
    steps:
    - uses: actions/checkout@v2
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        echo -n > cmake/OpenCVFindLibsGrfmt.cmake
        rm -rf modules/gapi
        patch -p1 -i ../opencv-4.5.1-no-rtti.patch
        patch -p1 -i ../opencv-4.5.1-no-zlib.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/
    - name: build-ios
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-ios && cd build-ios
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DIOS_PLATFORM=OS -DENABLE_BITCODE=0 -DENABLE_ARC=0 -DENABLE_VISIBILITY=0 -DIOS_ARCH="armv7;arm64;arm64e" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv4_cmake_options.txt` -DBUILD_opencv_world=ON ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-simulator
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-simulator && cd build-simulator
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DIOS_PLATFORM=SIMULATOR -DENABLE_BITCODE=0 -DENABLE_ARC=0 -DENABLE_VISIBILITY=0 -DIOS_ARCH="i386;x86_64" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv4_cmake_options.txt` -DBUILD_opencv_world=ON ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package
      run: |
        rm -rf opencv2.framework
        mkdir -p opencv2.framework/Versions/A/Headers
        mkdir -p opencv2.framework/Versions/A/Resources
        ln -s A opencv2.framework/Versions/Current
        ln -s Versions/Current/Headers opencv2.framework/Headers
        ln -s Versions/Current/Resources opencv2.framework/Resources
        ln -s Versions/Current/opencv2 opencv2.framework/opencv2
        lipo -create opencv-${{ env.OPENCV_VERSION }}/build-ios/install/lib/libopencv_world.a opencv-${{ env.OPENCV_VERSION }}/build-simulator/install/lib/libopencv_world.a -o opencv2.framework/Versions/A/opencv2
        cp -r opencv-${{ env.OPENCV_VERSION }}/build-ios/install/include/opencv4/opencv2/* opencv2.framework/Versions/A/Headers/
        sed -e 's/__NAME__/OpenCV/g' -e 's/__IDENTIFIER__/org.opencv/g' -e 's/__VERSION__/${{ env.OPENCV_VERSION }}/g' Info.plist > opencv2.framework/Versions/A/Resources/Info.plist
        rm -f ${{ env.PACKAGENAME }}.zip
        zip -9 -y -r ${{ env.PACKAGENAME }}.zip opencv2.framework
    - name: upload-zip
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  ios-opencv3:
    runs-on: macos-latest
    env:
      OPENCV_VERSION: 3.4.13
      PACKAGENAME: opencv-mobile-3.4.13-ios
    steps:
    - uses: actions/checkout@v2
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        echo -n > cmake/OpenCVFindLibsGrfmt.cmake
        patch -p1 -i ../opencv-3.4.13-no-rtti.patch
        patch -p1 -i ../opencv-3.4.13-no-zlib.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/
    - name: build-ios
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-ios && cd build-ios
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DIOS_PLATFORM=OS -DENABLE_BITCODE=0 -DENABLE_ARC=0 -DENABLE_VISIBILITY=0 -DIOS_ARCH="armv7;arm64;arm64e" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=ON ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-simulator
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-simulator && cd build-simulator
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DIOS_PLATFORM=SIMULATOR -DENABLE_BITCODE=0 -DENABLE_ARC=0 -DENABLE_VISIBILITY=0 -DIOS_ARCH="i386;x86_64" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=ON ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package
      run: |
        rm -rf opencv2.framework
        mkdir -p opencv2.framework/Versions/A/Headers
        mkdir -p opencv2.framework/Versions/A/Resources
        ln -s A opencv2.framework/Versions/Current
        ln -s Versions/Current/Headers opencv2.framework/Headers
        ln -s Versions/Current/Resources opencv2.framework/Resources
        ln -s Versions/Current/opencv2 opencv2.framework/opencv2
        lipo -create opencv-${{ env.OPENCV_VERSION }}/build-ios/install/lib/libopencv_world.a opencv-${{ env.OPENCV_VERSION }}/build-simulator/install/lib/libopencv_world.a -o opencv2.framework/Versions/A/opencv2
        cp -r opencv-${{ env.OPENCV_VERSION }}/build-ios/install/include/opencv2/* opencv2.framework/Versions/A/Headers/
        sed -e 's/__NAME__/OpenCV/g' -e 's/__IDENTIFIER__/org.opencv/g' -e 's/__VERSION__/${{ env.OPENCV_VERSION }}/g' Info.plist > opencv2.framework/Versions/A/Resources/Info.plist
        rm -f ${{ env.PACKAGENAME }}.zip
        zip -9 -y -r ${{ env.PACKAGENAME }}.zip opencv2.framework
    - name: upload-zip
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  ios-opencv2:
    runs-on: macos-latest
    env:
      OPENCV_VERSION: 2.4.13.7
      PACKAGENAME: opencv-mobile-2.4.13.7-ios
    steps:
    - uses: actions/checkout@v2
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        echo -n > cmake/OpenCVFindLibsGrfmt.cmake
        patch -p1 -i ../opencv-2.4.13.7-no-rtti.patch
        patch -p1 -i ../opencv-2.4.13.7-no-zlib.patch
        patch -p1 -i ../opencv-2.4.13.7-fix-highgui-include.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/
    - name: build-ios
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-ios && cd build-ios
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DIOS_PLATFORM=OS -DENABLE_BITCODE=0 -DENABLE_ARC=0 -DENABLE_VISIBILITY=0 -DIOS_ARCH="armv7;arm64;arm64e" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv2_cmake_options.txt` -DBUILD_opencv_world=ON ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-simulator
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-simulator && cd build-simulator
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DIOS_PLATFORM=SIMULATOR -DENABLE_BITCODE=0 -DENABLE_ARC=0 -DENABLE_VISIBILITY=0 -DIOS_ARCH="i386;x86_64" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv2_cmake_options.txt` -DBUILD_opencv_world=ON ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package
      run: |
        rm -rf opencv2.framework
        mkdir -p opencv2.framework/Versions/A/Headers
        mkdir -p opencv2.framework/Versions/A/Resources
        ln -s A opencv2.framework/Versions/Current
        ln -s Versions/Current/Headers opencv2.framework/Headers
        ln -s Versions/Current/Resources opencv2.framework/Resources
        ln -s Versions/Current/opencv2 opencv2.framework/opencv2
        lipo -create opencv-${{ env.OPENCV_VERSION }}/build-ios/install/lib/libopencv_world.a opencv-${{ env.OPENCV_VERSION }}/build-simulator/install/lib/libopencv_world.a -o opencv2.framework/Versions/A/opencv2
        cp -r opencv-${{ env.OPENCV_VERSION }}/build-ios/install/include/opencv2/* opencv2.framework/Versions/A/Headers/
        sed -e 's/__NAME__/OpenCV/g' -e 's/__IDENTIFIER__/org.opencv/g' -e 's/__VERSION__/${{ env.OPENCV_VERSION }}/g' Info.plist > opencv2.framework/Versions/A/Resources/Info.plist
        rm -f ${{ env.PACKAGENAME }}.zip
        zip -9 -y -r ${{ env.PACKAGENAME }}.zip opencv2.framework
    - name: upload-zip
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  ios-opencv4-bitcode:
    runs-on: macos-latest
    env:
      OPENCV_VERSION: 4.5.1
      PACKAGENAME: opencv-mobile-4.5.1-ios-bitcode
    steps:
    - uses: actions/checkout@v2
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        echo -n > cmake/OpenCVFindLibsGrfmt.cmake
        rm -rf modules/gapi
        patch -p1 -i ../opencv-4.5.1-no-rtti.patch
        patch -p1 -i ../opencv-4.5.1-no-zlib.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/
    - name: build-ios
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-ios && cd build-ios
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DIOS_PLATFORM=OS -DENABLE_BITCODE=1 -DENABLE_ARC=0 -DENABLE_VISIBILITY=0 -DIOS_ARCH="armv7;arm64;arm64e" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv4_cmake_options.txt` -DBUILD_opencv_world=ON ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-simulator
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-simulator && cd build-simulator
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DIOS_PLATFORM=SIMULATOR -DENABLE_BITCODE=1 -DENABLE_ARC=0 -DENABLE_VISIBILITY=0 -DIOS_ARCH="i386;x86_64" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv4_cmake_options.txt` -DBUILD_opencv_world=ON ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package
      run: |
        rm -rf opencv2.framework
        mkdir -p opencv2.framework/Versions/A/Headers
        mkdir -p opencv2.framework/Versions/A/Resources
        ln -s A opencv2.framework/Versions/Current
        ln -s Versions/Current/Headers opencv2.framework/Headers
        ln -s Versions/Current/Resources opencv2.framework/Resources
        ln -s Versions/Current/opencv2 opencv2.framework/opencv2
        lipo -create opencv-${{ env.OPENCV_VERSION }}/build-ios/install/lib/libopencv_world.a opencv-${{ env.OPENCV_VERSION }}/build-simulator/install/lib/libopencv_world.a -o opencv2.framework/Versions/A/opencv2
        cp -r opencv-${{ env.OPENCV_VERSION }}/build-ios/install/include/opencv4/opencv2/* opencv2.framework/Versions/A/Headers/
        sed -e 's/__NAME__/OpenCV/g' -e 's/__IDENTIFIER__/org.opencv/g' -e 's/__VERSION__/${{ env.OPENCV_VERSION }}/g' Info.plist > opencv2.framework/Versions/A/Resources/Info.plist
        rm -f ${{ env.PACKAGENAME }}.zip
        zip -9 -y -r ${{ env.PACKAGENAME }}.zip opencv2.framework
    - name: upload-zip
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  ios-opencv3-bitcode:
    runs-on: macos-latest
    env:
      OPENCV_VERSION: 3.4.13
      PACKAGENAME: opencv-mobile-3.4.13-ios-bitcode
    steps:
    - uses: actions/checkout@v2
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        echo -n > cmake/OpenCVFindLibsGrfmt.cmake
        patch -p1 -i ../opencv-3.4.13-no-rtti.patch
        patch -p1 -i ../opencv-3.4.13-no-zlib.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/
    - name: build-ios
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-ios && cd build-ios
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DIOS_PLATFORM=OS -DENABLE_BITCODE=1 -DENABLE_ARC=0 -DENABLE_VISIBILITY=0 -DIOS_ARCH="armv7;arm64;arm64e" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=ON ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-simulator
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-simulator && cd build-simulator
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DIOS_PLATFORM=SIMULATOR -DENABLE_BITCODE=1 -DENABLE_ARC=0 -DENABLE_VISIBILITY=0 -DIOS_ARCH="i386;x86_64" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=ON ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package
      run: |
        rm -rf opencv2.framework
        mkdir -p opencv2.framework/Versions/A/Headers
        mkdir -p opencv2.framework/Versions/A/Resources
        ln -s A opencv2.framework/Versions/Current
        ln -s Versions/Current/Headers opencv2.framework/Headers
        ln -s Versions/Current/Resources opencv2.framework/Resources
        ln -s Versions/Current/opencv2 opencv2.framework/opencv2
        lipo -create opencv-${{ env.OPENCV_VERSION }}/build-ios/install/lib/libopencv_world.a opencv-${{ env.OPENCV_VERSION }}/build-simulator/install/lib/libopencv_world.a -o opencv2.framework/Versions/A/opencv2
        cp -r opencv-${{ env.OPENCV_VERSION }}/build-ios/install/include/opencv2/* opencv2.framework/Versions/A/Headers/
        sed -e 's/__NAME__/OpenCV/g' -e 's/__IDENTIFIER__/org.opencv/g' -e 's/__VERSION__/${{ env.OPENCV_VERSION }}/g' Info.plist > opencv2.framework/Versions/A/Resources/Info.plist
        rm -f ${{ env.PACKAGENAME }}.zip
        zip -9 -y -r ${{ env.PACKAGENAME }}.zip opencv2.framework
    - name: upload-zip
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  ios-opencv2-bitcode:
    runs-on: macos-latest
    env:
      OPENCV_VERSION: 2.4.13.7
      PACKAGENAME: opencv-mobile-2.4.13.7-ios-bitcode
    steps:
    - uses: actions/checkout@v2
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        echo -n > cmake/OpenCVFindLibsGrfmt.cmake
        patch -p1 -i ../opencv-2.4.13.7-no-rtti.patch
        patch -p1 -i ../opencv-2.4.13.7-no-zlib.patch
        patch -p1 -i ../opencv-2.4.13.7-fix-highgui-include.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/
    - name: build-ios
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-ios && cd build-ios
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DIOS_PLATFORM=OS -DENABLE_BITCODE=1 -DENABLE_ARC=0 -DENABLE_VISIBILITY=0 -DIOS_ARCH="armv7;arm64;arm64e" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv2_cmake_options.txt` -DBUILD_opencv_world=ON ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-simulator
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-simulator && cd build-simulator
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DIOS_PLATFORM=SIMULATOR -DENABLE_BITCODE=1 -DENABLE_ARC=0 -DENABLE_VISIBILITY=0 -DIOS_ARCH="i386;x86_64" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv2_cmake_options.txt` -DBUILD_opencv_world=ON ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package
      run: |
        rm -rf opencv2.framework
        mkdir -p opencv2.framework/Versions/A/Headers
        mkdir -p opencv2.framework/Versions/A/Resources
        ln -s A opencv2.framework/Versions/Current
        ln -s Versions/Current/Headers opencv2.framework/Headers
        ln -s Versions/Current/Resources opencv2.framework/Resources
        ln -s Versions/Current/opencv2 opencv2.framework/opencv2
        lipo -create opencv-${{ env.OPENCV_VERSION }}/build-ios/install/lib/libopencv_world.a opencv-${{ env.OPENCV_VERSION }}/build-simulator/install/lib/libopencv_world.a -o opencv2.framework/Versions/A/opencv2
        cp -r opencv-${{ env.OPENCV_VERSION }}/build-ios/install/include/opencv2/* opencv2.framework/Versions/A/Headers/
        sed -e 's/__NAME__/OpenCV/g' -e 's/__IDENTIFIER__/org.opencv/g' -e 's/__VERSION__/${{ env.OPENCV_VERSION }}/g' Info.plist > opencv2.framework/Versions/A/Resources/Info.plist
        rm -f ${{ env.PACKAGENAME }}.zip
        zip -9 -y -r ${{ env.PACKAGENAME }}.zip opencv2.framework
    - name: upload-zip
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  armlinux-opencv4:
    runs-on: ubuntu-latest
    env:
      OPENCV_VERSION: 4.5.1
      PACKAGENAME: opencv-mobile-4.5.1-armlinux
    steps:
    - name: arm-gnu-toolchain
      run: |
        sudo apt-get update
        sudo apt-get install g++-arm-linux-gnueabi g++-arm-linux-gnueabihf g++-aarch64-linux-gnu

    - uses: actions/checkout@v2
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        truncate -s 0 cmake/OpenCVFindLibsGrfmt.cmake
        rm -rf modules/gapi
        patch -p1 -i ../opencv-4.5.1-no-rtti.patch
        patch -p1 -i ../opencv-4.5.1-no-zlib.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/
    - name: build-arm-linux-gnueabi
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-arm-linux-gnueabi && cd build-arm-linux-gnueabi
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/arm-linux-gnueabi.toolchain.cmake \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv4_cmake_options.txt` -DBUILD_opencv_world=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-arm-linux-gnueabihf
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-arm-linux-gnueabihf && cd build-arm-linux-gnueabihf
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/arm-linux-gnueabihf.toolchain.cmake \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv4_cmake_options.txt` -DBUILD_opencv_world=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-aarch64-linux-gnu
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-aarch64-linux-gnu && cd build-aarch64-linux-gnu
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/aarch64-linux-gnu.toolchain.cmake \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv4_cmake_options.txt` -DBUILD_opencv_world=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package
      run: |
        mkdir ${{ env.PACKAGENAME }}
        mkdir ${{ env.PACKAGENAME }}/arm-linux-gnueabi
        mkdir ${{ env.PACKAGENAME }}/arm-linux-gnueabihf
        mkdir ${{ env.PACKAGENAME }}/aarch64-linux-gnu
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-arm-linux-gnueabi/install/* ${{ env.PACKAGENAME }}/arm-linux-gnueabi/
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-arm-linux-gnueabihf/install/* ${{ env.PACKAGENAME }}/arm-linux-gnueabihf/
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-aarch64-linux-gnu/install/* ${{ env.PACKAGENAME }}/aarch64-linux-gnu/
        rm -rf ${{ env.PACKAGENAME }}/arm-linux-gnueabi/share/opencv4
        rm -rf ${{ env.PACKAGENAME }}/arm-linux-gnueabihf/share/opencv4
        rm -rf ${{ env.PACKAGENAME }}/aarch64-linux-gnu/share/opencv4
        zip -9 -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: upload-zip
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  armlinux-opencv3:
    runs-on: ubuntu-latest
    env:
      OPENCV_VERSION: 3.4.13
      PACKAGENAME: opencv-mobile-3.4.13-armlinux
    steps:
    - name: arm-gnu-toolchain
      run: |
        sudo apt-get update
        sudo apt-get install g++-arm-linux-gnueabi g++-arm-linux-gnueabihf g++-aarch64-linux-gnu

    - uses: actions/checkout@v2
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        truncate -s 0 cmake/OpenCVFindLibsGrfmt.cmake
        patch -p1 -i ../opencv-3.4.13-no-rtti.patch
        patch -p1 -i ../opencv-3.4.13-no-zlib.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/
    - name: build-arm-linux-gnueabi
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-arm-linux-gnueabi && cd build-arm-linux-gnueabi
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/arm-linux-gnueabi.toolchain.cmake \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-arm-linux-gnueabihf
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-arm-linux-gnueabihf && cd build-arm-linux-gnueabihf
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/arm-linux-gnueabihf.toolchain.cmake \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-aarch64-linux-gnu
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-aarch64-linux-gnu && cd build-aarch64-linux-gnu
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/aarch64-linux-gnu.toolchain.cmake \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package
      run: |
        mkdir ${{ env.PACKAGENAME }}
        mkdir ${{ env.PACKAGENAME }}/arm-linux-gnueabi
        mkdir ${{ env.PACKAGENAME }}/arm-linux-gnueabihf
        mkdir ${{ env.PACKAGENAME }}/aarch64-linux-gnu
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-arm-linux-gnueabi/install/* ${{ env.PACKAGENAME }}/arm-linux-gnueabi/
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-arm-linux-gnueabihf/install/* ${{ env.PACKAGENAME }}/arm-linux-gnueabihf/
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-aarch64-linux-gnu/install/* ${{ env.PACKAGENAME }}/aarch64-linux-gnu/
        rm -rf ${{ env.PACKAGENAME }}/arm-linux-gnueabi/share/OpenCV/haarcascades
        rm -rf ${{ env.PACKAGENAME }}/arm-linux-gnueabi/share/OpenCV/lbpcascades
        rm -rf ${{ env.PACKAGENAME }}/arm-linux-gnueabi/share/OpenCV/valgrind.supp
        rm -rf ${{ env.PACKAGENAME }}/arm-linux-gnueabi/share/OpenCV/valgrind_3rdparty.supp
        rm -rf ${{ env.PACKAGENAME }}/arm-linux-gnueabihf/share/OpenCV/haarcascades
        rm -rf ${{ env.PACKAGENAME }}/arm-linux-gnueabihf/share/OpenCV/lbpcascades
        rm -rf ${{ env.PACKAGENAME }}/arm-linux-gnueabihf/share/OpenCV/valgrind.supp
        rm -rf ${{ env.PACKAGENAME }}/arm-linux-gnueabihf/share/OpenCV/valgrind_3rdparty.supp
        rm -rf ${{ env.PACKAGENAME }}/aarch64-linux-gnu/share/OpenCV/haarcascades
        rm -rf ${{ env.PACKAGENAME }}/aarch64-linux-gnu/share/OpenCV/lbpcascades
        rm -rf ${{ env.PACKAGENAME }}/aarch64-linux-gnu/share/OpenCV/valgrind.supp
        rm -rf ${{ env.PACKAGENAME }}/aarch64-linux-gnu/share/OpenCV/valgrind_3rdparty.supp
        zip -9 -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: upload-zip
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  armlinux-opencv2:
    runs-on: ubuntu-latest
    env:
      OPENCV_VERSION: 2.4.13.7
      PACKAGENAME: opencv-mobile-2.4.13.7-armlinux
    steps:
    - name: arm-gnu-toolchain
      run: |
        sudo apt-get update
        sudo apt-get install g++-arm-linux-gnueabi g++-arm-linux-gnueabihf g++-aarch64-linux-gnu

    - uses: actions/checkout@v2
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        truncate -s 0 cmake/OpenCVFindLibsGrfmt.cmake
        patch -p1 -i ../opencv-2.4.13.7-no-rtti.patch
        patch -p1 -i ../opencv-2.4.13.7-no-zlib.patch
        patch -p1 -i ../opencv-2.4.13.7-fix-highgui-include.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/
    - name: build-arm-linux-gnueabi
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-arm-linux-gnueabi && cd build-arm-linux-gnueabi
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/arm-linux-gnueabi.toolchain.cmake \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv2_cmake_options.txt` -DBUILD_opencv_world=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-arm-linux-gnueabihf
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-arm-linux-gnueabihf && cd build-arm-linux-gnueabihf
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/arm-linux-gnueabihf.toolchain.cmake \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv2_cmake_options.txt` -DBUILD_opencv_world=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-aarch64-linux-gnu
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-aarch64-linux-gnu && cd build-aarch64-linux-gnu
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/aarch64-linux-gnu.toolchain.cmake \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv2_cmake_options.txt` -DBUILD_opencv_world=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package
      run: |
        mkdir ${{ env.PACKAGENAME }}
        mkdir ${{ env.PACKAGENAME }}/arm-linux-gnueabi
        mkdir ${{ env.PACKAGENAME }}/arm-linux-gnueabihf
        mkdir ${{ env.PACKAGENAME }}/aarch64-linux-gnu
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-arm-linux-gnueabi/install/* ${{ env.PACKAGENAME }}/arm-linux-gnueabi/
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-arm-linux-gnueabihf/install/* ${{ env.PACKAGENAME }}/arm-linux-gnueabihf/
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-aarch64-linux-gnu/install/* ${{ env.PACKAGENAME }}/aarch64-linux-gnu/
        rm -rf ${{ env.PACKAGENAME }}/arm-linux-gnueabi/share/OpenCV/haarcascades
        rm -rf ${{ env.PACKAGENAME }}/arm-linux-gnueabi/share/OpenCV/lbpcascades
        rm -rf ${{ env.PACKAGENAME }}/arm-linux-gnueabihf/share/OpenCV/haarcascades
        rm -rf ${{ env.PACKAGENAME }}/arm-linux-gnueabihf/share/OpenCV/lbpcascades
        rm -rf ${{ env.PACKAGENAME }}/aarch64-linux-gnu/share/OpenCV/haarcascades
        rm -rf ${{ env.PACKAGENAME }}/aarch64-linux-gnu/share/OpenCV/lbpcascades
        zip -9 -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: upload-zip
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  macos-opencv4:
    runs-on: macos-latest
    env:
      OPENCV_VERSION: 4.5.1
      PACKAGENAME: opencv-mobile-4.5.1-macos
    steps:
    - uses: actions/checkout@v2
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        echo -n > cmake/OpenCVFindLibsGrfmt.cmake
        rm -rf modules/gapi
        patch -p1 -i ../opencv-4.5.1-no-zlib.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/
    - name: build-x86_64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x86_64 && cd build-x86_64
        cmake -DCMAKE_OSX_ARCHITECTURES="x86_64" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv4_cmake_options.txt` -DBUILD_opencv_world=ON ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-arm64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-arm64 && cd build-arm64
        cmake -DCMAKE_CROSSCOMPILING=ON -DCMAKE_SYSTEM_PROCESSOR="arm64" -DCMAKE_OSX_ARCHITECTURES="arm64" -DOPENCV_WORKAROUND_CMAKE_20989=ON \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv4_cmake_options.txt` -DBUILD_opencv_world=ON ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package
      run: |
        rm -rf opencv2.framework
        mkdir -p opencv2.framework/Versions/A/Headers
        mkdir -p opencv2.framework/Versions/A/Resources
        ln -s A opencv2.framework/Versions/Current
        ln -s Versions/Current/Headers opencv2.framework/Headers
        ln -s Versions/Current/Resources opencv2.framework/Resources
        ln -s Versions/Current/opencv2 opencv2.framework/opencv2
        lipo -create opencv-${{ env.OPENCV_VERSION }}/build-x86_64/install/lib/libopencv_world.a opencv-${{ env.OPENCV_VERSION }}/build-arm64/install/lib/libopencv_world.a -o opencv2.framework/Versions/A/opencv2
        cp -r opencv-${{ env.OPENCV_VERSION }}/build-x86_64/install/include/opencv4/opencv2/* opencv2.framework/Versions/A/Headers/
        sed -e 's/__NAME__/OpenCV/g' -e 's/__IDENTIFIER__/org.opencv/g' -e 's/__VERSION__/${{ env.OPENCV_VERSION }}/g' Info.plist > opencv2.framework/Versions/A/Resources/Info.plist
        rm -f ${{ env.PACKAGENAME }}.zip
        zip -9 -y -r ${{ env.PACKAGENAME }}.zip opencv2.framework
    - name: upload-zip
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  macos-opencv3:
    runs-on: macos-latest
    env:
      OPENCV_VERSION: 3.4.13
      PACKAGENAME: opencv-mobile-3.4.13-macos
    steps:
    - uses: actions/checkout@v2
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        echo -n > cmake/OpenCVFindLibsGrfmt.cmake
        patch -p1 -i ../opencv-3.4.13-no-zlib.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/
    - name: build-x86_64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x86_64 && cd build-x86_64
        cmake -DCMAKE_OSX_ARCHITECTURES="x86_64" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=ON ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-arm64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-arm64 && cd build-arm64
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/macos-arm64.toolchain.cmake \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=ON ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package
      run: |
        rm -rf opencv2.framework
        mkdir -p opencv2.framework/Versions/A/Headers
        mkdir -p opencv2.framework/Versions/A/Resources
        ln -s A opencv2.framework/Versions/Current
        ln -s Versions/Current/Headers opencv2.framework/Headers
        ln -s Versions/Current/Resources opencv2.framework/Resources
        ln -s Versions/Current/opencv2 opencv2.framework/opencv2
        lipo -create opencv-${{ env.OPENCV_VERSION }}/build-x86_64/install/lib/libopencv_world.a opencv-${{ env.OPENCV_VERSION }}/build-arm64/install/lib/libopencv_world.a -o opencv2.framework/Versions/A/opencv2
        cp -r opencv-${{ env.OPENCV_VERSION }}/build-x86_64/install/include/opencv2/* opencv2.framework/Versions/A/Headers/
        sed -e 's/__NAME__/OpenCV/g' -e 's/__IDENTIFIER__/org.opencv/g' -e 's/__VERSION__/${{ env.OPENCV_VERSION }}/g' Info.plist > opencv2.framework/Versions/A/Resources/Info.plist
        rm -f ${{ env.PACKAGENAME }}.zip
        zip -9 -y -r ${{ env.PACKAGENAME }}.zip opencv2.framework
    - name: upload-zip
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  macos-opencv2:
    runs-on: macos-latest
    env:
      OPENCV_VERSION: 2.4.13.7
      PACKAGENAME: opencv-mobile-2.4.13.7-macos
    steps:
    - uses: actions/checkout@v2
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        echo -n > cmake/OpenCVFindLibsGrfmt.cmake
        patch -p1 -i ../opencv-2.4.13.7-no-zlib.patch
        patch -p1 -i ../opencv-2.4.13.7-fix-highgui-include.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/

        # workaround ar @list issue on macos
        sed -i -e 's!\\"${objpath4}\\"!${objpath4}!g' modules/world/CMakeLists.txt

    - name: build-x86_64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x86_64 && cd build-x86_64
        cmake -DCMAKE_OSX_ARCHITECTURES="x86_64" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv2_cmake_options.txt` -DBUILD_opencv_world=ON ..
        cmake --build . -j 2 || echo "qaq"

        # workaround ar @list issue on macos
        cd modules/world
        /Applications/Xcode_12.2.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ar qc ../../lib/libopencv_world.a `cat world_objects.rsp` CMakeFiles/opencv_world.dir/src/world_init.cpp.o
        cd ../..

        cmake --build . --target install

    - name: build-arm64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-arm64 && cd build-arm64
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/macos-arm64.toolchain.cmake \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv2_cmake_options.txt` -DBUILD_opencv_world=ON ..
        cmake --build . -j 2 || echo "qaq"

        # workaround ar @list issue on macos
        cd modules/world
        /Applications/Xcode_12.2.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ar qc ../../lib/libopencv_world.a `cat world_objects.rsp` CMakeFiles/opencv_world.dir/src/world_init.cpp.o
        cd ../..

        cmake --build . --target install
    - name: package
      run: |
        rm -rf opencv2.framework
        mkdir -p opencv2.framework/Versions/A/Headers
        mkdir -p opencv2.framework/Versions/A/Resources
        ln -s A opencv2.framework/Versions/Current
        ln -s Versions/Current/Headers opencv2.framework/Headers
        ln -s Versions/Current/Resources opencv2.framework/Resources
        ln -s Versions/Current/opencv2 opencv2.framework/opencv2
        lipo -create opencv-${{ env.OPENCV_VERSION }}/build-x86_64/install/lib/libopencv_world.a opencv-${{ env.OPENCV_VERSION }}/build-arm64/install/lib/libopencv_world.a -o opencv2.framework/Versions/A/opencv2
        cp -r opencv-${{ env.OPENCV_VERSION }}/build-x86_64/install/include/opencv2/* opencv2.framework/Versions/A/Headers/
        sed -e 's/__NAME__/OpenCV/g' -e 's/__IDENTIFIER__/org.opencv/g' -e 's/__VERSION__/${{ env.OPENCV_VERSION }}/g' Info.plist > opencv2.framework/Versions/A/Resources/Info.plist
        rm -f ${{ env.PACKAGENAME }}.zip
        zip -9 -y -r ${{ env.PACKAGENAME }}.zip opencv2.framework
    - name: upload-zip
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  windows-vs2015-opencv4:
    runs-on: windows-2016
    env:
      OPENCV_VERSION: 4.5.1
      PACKAGENAME: opencv-mobile-4.5.1-windows-vs2015
    steps:
    - uses: actions/checkout@v2
    - name: opencv-source
      run: |
        Invoke-WebRequest -Uri https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -OutFile opencv-${{ env.OPENCV_VERSION }}.zip
        7z x ./opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        Clear-Content "cmake\OpenCVFindLibsGrfmt.cmake"
        Remove-Item "modules\gapi" -Recurse
        C:\msys64\usr\bin\patch.exe -p1 -i ..\opencv-4.5.1-no-zlib.patch
        Remove-Item "modules\highgui" -Recurse
        Copy-Item -Recurse -Path "..\highgui" -Destination "modules\"
    - name: build-x86
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x86; cd build-x86
        cmake -T v140,host=x64 -A Win32 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release $(type ../../opencv4_cmake_options.txt) -DBUILD_opencv_world=OFF ..
        cmake --build . --config Release -j 2
        cmake --build . --config Release --target install
    - name: build-x64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x64; cd build-x64
        cmake -T v140,host=x64 -A x64 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release $(type ../../opencv4_cmake_options.txt) -DBUILD_opencv_world=OFF ..
        cmake --build . --config Release -j 2
        cmake --build . --config Release --target install
    - name: package
      run: |
        mkdir ${{ env.PACKAGENAME }}
        mkdir ${{ env.PACKAGENAME }}/x86
        mkdir ${{ env.PACKAGENAME }}/x64
        Copy-Item -Verbose -Recurse -Path "opencv-${{ env.OPENCV_VERSION }}\build-x86\install\*" -Destination "${{ env.PACKAGENAME }}\x86"
        Copy-Item -Verbose -Recurse -Path "opencv-${{ env.OPENCV_VERSION }}\build-x64\install\*" -Destination "${{ env.PACKAGENAME }}\x64"
        7z a -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: upload-zip
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  windows-vs2015-opencv3:
    runs-on: windows-2016
    env:
      OPENCV_VERSION: 3.4.13
      PACKAGENAME: opencv-mobile-3.4.13-windows-vs2015
    steps:
    - uses: actions/checkout@v2
    - name: opencv-source
      run: |
        Invoke-WebRequest -Uri https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -OutFile opencv-${{ env.OPENCV_VERSION }}.zip
        7z x ./opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        Clear-Content "cmake\OpenCVFindLibsGrfmt.cmake"
        C:\msys64\usr\bin\patch.exe -p1 -i ..\opencv-3.4.13-no-zlib.patch
        Remove-Item "modules\highgui" -Recurse
        Copy-Item -Recurse -Path "..\highgui" -Destination "modules\"
    - name: build-x86
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x86; cd build-x86
        cmake -T v140,host=x64 -A Win32 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release $(type ../../opencv3_cmake_options.txt) -DBUILD_opencv_world=OFF ..
        cmake --build . --config Release -j 2
        cmake --build . --config Release --target install
    - name: build-x64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x64; cd build-x64
        cmake -T v140,host=x64 -A x64 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release $(type ../../opencv3_cmake_options.txt) -DBUILD_opencv_world=OFF ..
        cmake --build . --config Release -j 2
        cmake --build . --config Release --target install
    - name: package
      run: |
        mkdir ${{ env.PACKAGENAME }}
        mkdir ${{ env.PACKAGENAME }}/x86
        mkdir ${{ env.PACKAGENAME }}/x64
        Copy-Item -Verbose -Recurse -Path "opencv-${{ env.OPENCV_VERSION }}\build-x86\install\*" -Destination "${{ env.PACKAGENAME }}\x86"
        Copy-Item -Verbose -Recurse -Path "opencv-${{ env.OPENCV_VERSION }}\build-x64\install\*" -Destination "${{ env.PACKAGENAME }}\x64"
        7z a -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: upload-zip
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  windows-vs2015-opencv2:
    runs-on: windows-2016
    env:
      OPENCV_VERSION: 2.4.13.7
      PACKAGENAME: opencv-mobile-2.4.13.7-windows-vs2015
    steps:
    - uses: actions/checkout@v2
    - name: opencv-source
      run: |
        Invoke-WebRequest -Uri https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -OutFile opencv-${{ env.OPENCV_VERSION }}.zip
        7z x ./opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        Clear-Content "cmake\OpenCVFindLibsGrfmt.cmake"
        C:\msys64\usr\bin\patch.exe -p1 -i ..\opencv-2.4.13.7-no-zlib.patch
        C:\msys64\usr\bin\patch.exe -p1 -i ..\opencv-2.4.13.7-fix-highgui-include.patch
        Remove-Item "modules\highgui" -Recurse
        Copy-Item -Recurse -Path "..\highgui" -Destination "modules\"
    - name: build-x86
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x86; cd build-x86
        cmake -T v140,host=x64 -A Win32 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release $(type ../../opencv2_cmake_options.txt) -DBUILD_opencv_world=OFF ..
        cmake --build . --config Release -j 2
        cmake --build . --config Release --target install
    - name: build-x64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x64; cd build-x64
        cmake -T v140,host=x64 -A x64 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release $(type ../../opencv2_cmake_options.txt) -DBUILD_opencv_world=OFF ..
        cmake --build . --config Release -j 2
        cmake --build . --config Release --target install
    - name: package
      run: |
        mkdir ${{ env.PACKAGENAME }}
        mkdir ${{ env.PACKAGENAME }}/x86
        mkdir ${{ env.PACKAGENAME }}/x64
        Copy-Item -Verbose -Recurse -Path "opencv-${{ env.OPENCV_VERSION }}\build-x86\install\*" -Destination "${{ env.PACKAGENAME }}\x86"
        Copy-Item -Verbose -Recurse -Path "opencv-${{ env.OPENCV_VERSION }}\build-x64\install\*" -Destination "${{ env.PACKAGENAME }}\x64"
        7z a -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: upload-zip
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  windows-vs2017-opencv4:
    runs-on: windows-2016
    env:
      OPENCV_VERSION: 4.5.1
      PACKAGENAME: opencv-mobile-4.5.1-windows-vs2017
    steps:
    - uses: actions/checkout@v2
    - name: opencv-source
      run: |
        Invoke-WebRequest -Uri https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -OutFile opencv-${{ env.OPENCV_VERSION }}.zip
        7z x ./opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        Clear-Content "cmake\OpenCVFindLibsGrfmt.cmake"
        Remove-Item "modules\gapi" -Recurse
        C:\msys64\usr\bin\patch.exe -p1 -i ..\opencv-4.5.1-no-zlib.patch
        Remove-Item "modules\highgui" -Recurse
        Copy-Item -Recurse -Path "..\highgui" -Destination "modules\"
    - name: build-x86
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x86; cd build-x86
        cmake -T v141,host=x64 -A Win32 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release $(type ../../opencv4_cmake_options.txt) -DBUILD_opencv_world=OFF ..
        cmake --build . --config Release -j 2
        cmake --build . --config Release --target install
    - name: build-x64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x64; cd build-x64
        cmake -T v141,host=x64 -A x64 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release $(type ../../opencv4_cmake_options.txt) -DBUILD_opencv_world=OFF ..
        cmake --build . --config Release -j 2
        cmake --build . --config Release --target install
    - name: package
      run: |
        mkdir ${{ env.PACKAGENAME }}
        mkdir ${{ env.PACKAGENAME }}/x86
        mkdir ${{ env.PACKAGENAME }}/x64
        Copy-Item -Verbose -Recurse -Path "opencv-${{ env.OPENCV_VERSION }}\build-x86\install\*" -Destination "${{ env.PACKAGENAME }}\x86"
        Copy-Item -Verbose -Recurse -Path "opencv-${{ env.OPENCV_VERSION }}\build-x64\install\*" -Destination "${{ env.PACKAGENAME }}\x64"
        7z a -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: upload-zip
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  windows-vs2017-opencv3:
    runs-on: windows-2016
    env:
      OPENCV_VERSION: 3.4.13
      PACKAGENAME: opencv-mobile-3.4.13-windows-vs2017
    steps:
    - uses: actions/checkout@v2
    - name: opencv-source
      run: |
        Invoke-WebRequest -Uri https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -OutFile opencv-${{ env.OPENCV_VERSION }}.zip
        7z x ./opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        Clear-Content "cmake\OpenCVFindLibsGrfmt.cmake"
        C:\msys64\usr\bin\patch.exe -p1 -i ..\opencv-3.4.13-no-zlib.patch
        Remove-Item "modules\highgui" -Recurse
        Copy-Item -Recurse -Path "..\highgui" -Destination "modules\"
    - name: build-x86
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x86; cd build-x86
        cmake -T v141,host=x64 -A Win32 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release $(type ../../opencv3_cmake_options.txt) -DBUILD_opencv_world=OFF ..
        cmake --build . --config Release -j 2
        cmake --build . --config Release --target install
    - name: build-x64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x64; cd build-x64
        cmake -T v141,host=x64 -A x64 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release $(type ../../opencv3_cmake_options.txt) -DBUILD_opencv_world=OFF ..
        cmake --build . --config Release -j 2
        cmake --build . --config Release --target install
    - name: package
      run: |
        mkdir ${{ env.PACKAGENAME }}
        mkdir ${{ env.PACKAGENAME }}/x86
        mkdir ${{ env.PACKAGENAME }}/x64
        Copy-Item -Verbose -Recurse -Path "opencv-${{ env.OPENCV_VERSION }}\build-x86\install\*" -Destination "${{ env.PACKAGENAME }}\x86"
        Copy-Item -Verbose -Recurse -Path "opencv-${{ env.OPENCV_VERSION }}\build-x64\install\*" -Destination "${{ env.PACKAGENAME }}\x64"
        7z a -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: upload-zip
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  windows-vs2017-opencv2:
    runs-on: windows-2016
    env:
      OPENCV_VERSION: 2.4.13.7
      PACKAGENAME: opencv-mobile-2.4.13.7-windows-vs2017
    steps:
    - uses: actions/checkout@v2
    - name: opencv-source
      run: |
        Invoke-WebRequest -Uri https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -OutFile opencv-${{ env.OPENCV_VERSION }}.zip
        7z x ./opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        Clear-Content "cmake\OpenCVFindLibsGrfmt.cmake"
        C:\msys64\usr\bin\patch.exe -p1 -i ..\opencv-2.4.13.7-no-zlib.patch
        C:\msys64\usr\bin\patch.exe -p1 -i ..\opencv-2.4.13.7-fix-highgui-include.patch
        Remove-Item "modules\highgui" -Recurse
        Copy-Item -Recurse -Path "..\highgui" -Destination "modules\"
    - name: build-x86
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x86; cd build-x86
        cmake -T v141,host=x64 -A Win32 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release $(type ../../opencv2_cmake_options.txt) -DBUILD_opencv_world=OFF ..
        cmake --build . --config Release -j 2
        cmake --build . --config Release --target install
    - name: build-x64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x64; cd build-x64
        cmake -T v141,host=x64 -A x64 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release $(type ../../opencv2_cmake_options.txt) -DBUILD_opencv_world=OFF ..
        cmake --build . --config Release -j 2
        cmake --build . --config Release --target install
    - name: package
      run: |
        mkdir ${{ env.PACKAGENAME }}
        mkdir ${{ env.PACKAGENAME }}/x86
        mkdir ${{ env.PACKAGENAME }}/x64
        Copy-Item -Verbose -Recurse -Path "opencv-${{ env.OPENCV_VERSION }}\build-x86\install\*" -Destination "${{ env.PACKAGENAME }}\x86"
        Copy-Item -Verbose -Recurse -Path "opencv-${{ env.OPENCV_VERSION }}\build-x64\install\*" -Destination "${{ env.PACKAGENAME }}\x64"
        7z a -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: upload-zip
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  windows-vs2019-opencv4:
    runs-on: windows-latest
    env:
      OPENCV_VERSION: 4.5.1
      PACKAGENAME: opencv-mobile-4.5.1-windows-vs2019
    steps:
    - uses: actions/checkout@v2
    - name: opencv-source
      run: |
        Invoke-WebRequest -Uri https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -OutFile opencv-${{ env.OPENCV_VERSION }}.zip
        7z x ./opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        Clear-Content "cmake\OpenCVFindLibsGrfmt.cmake"
        Remove-Item "modules\gapi" -Recurse
        C:\msys64\usr\bin\patch.exe -p1 -i ..\opencv-4.5.1-no-zlib.patch
        Remove-Item "modules\highgui" -Recurse
        Copy-Item -Recurse -Path "..\highgui" -Destination "modules\"
    - name: build-x86
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x86; cd build-x86
        cmake -T v142,host=x64 -A Win32 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release $(type ../../opencv4_cmake_options.txt) -DBUILD_opencv_world=OFF ..
        cmake --build . --config Release -j 2
        cmake --build . --config Release --target install
    - name: build-x64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x64; cd build-x64
        cmake -T v142,host=x64 -A x64 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release $(type ../../opencv4_cmake_options.txt) -DBUILD_opencv_world=OFF ..
        cmake --build . --config Release -j 2
        cmake --build . --config Release --target install
    - name: package
      run: |
        mkdir ${{ env.PACKAGENAME }}
        mkdir ${{ env.PACKAGENAME }}/x86
        mkdir ${{ env.PACKAGENAME }}/x64
        Copy-Item -Verbose -Recurse -Path "opencv-${{ env.OPENCV_VERSION }}\build-x86\install\*" -Destination "${{ env.PACKAGENAME }}\x86"
        Copy-Item -Verbose -Recurse -Path "opencv-${{ env.OPENCV_VERSION }}\build-x64\install\*" -Destination "${{ env.PACKAGENAME }}\x64"
        7z a -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: upload-zip
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  windows-vs2019-opencv3:
    runs-on: windows-latest
    env:
      OPENCV_VERSION: 3.4.13
      PACKAGENAME: opencv-mobile-3.4.13-windows-vs2019
    steps:
    - uses: actions/checkout@v2
    - name: opencv-source
      run: |
        Invoke-WebRequest -Uri https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -OutFile opencv-${{ env.OPENCV_VERSION }}.zip
        7z x ./opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        Clear-Content "cmake\OpenCVFindLibsGrfmt.cmake"
        C:\msys64\usr\bin\patch.exe -p1 -i ..\opencv-3.4.13-no-zlib.patch
        Remove-Item "modules\highgui" -Recurse
        Copy-Item -Recurse -Path "..\highgui" -Destination "modules\"
    - name: build-x86
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x86; cd build-x86
        cmake -T v142,host=x64 -A Win32 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release $(type ../../opencv3_cmake_options.txt) -DBUILD_opencv_world=OFF ..
        cmake --build . --config Release -j 2
        cmake --build . --config Release --target install
    - name: build-x64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x64; cd build-x64
        cmake -T v142,host=x64 -A x64 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release $(type ../../opencv3_cmake_options.txt) -DBUILD_opencv_world=OFF ..
        cmake --build . --config Release -j 2
        cmake --build . --config Release --target install
    - name: package
      run: |
        mkdir ${{ env.PACKAGENAME }}
        mkdir ${{ env.PACKAGENAME }}/x86
        mkdir ${{ env.PACKAGENAME }}/x64
        Copy-Item -Verbose -Recurse -Path "opencv-${{ env.OPENCV_VERSION }}\build-x86\install\*" -Destination "${{ env.PACKAGENAME }}\x86"
        Copy-Item -Verbose -Recurse -Path "opencv-${{ env.OPENCV_VERSION }}\build-x64\install\*" -Destination "${{ env.PACKAGENAME }}\x64"
        7z a -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: upload-zip
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  windows-vs2019-opencv2:
    runs-on: windows-latest
    env:
      OPENCV_VERSION: 2.4.13.7
      PACKAGENAME: opencv-mobile-2.4.13.7-windows-vs2019
    steps:
    - uses: actions/checkout@v2
    - name: opencv-source
      run: |
        Invoke-WebRequest -Uri https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -OutFile opencv-${{ env.OPENCV_VERSION }}.zip
        7z x ./opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        Clear-Content "cmake\OpenCVFindLibsGrfmt.cmake"
        C:\msys64\usr\bin\patch.exe -p1 -i ..\opencv-2.4.13.7-no-zlib.patch
        C:\msys64\usr\bin\patch.exe -p1 -i ..\opencv-2.4.13.7-fix-highgui-include.patch
        Remove-Item "modules\highgui" -Recurse
        Copy-Item -Recurse -Path "..\highgui" -Destination "modules\"
    - name: build-x86
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x86; cd build-x86
        cmake -T v142,host=x64 -A Win32 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release $(type ../../opencv2_cmake_options.txt) -DBUILD_opencv_world=OFF ..
        cmake --build . --config Release -j 2
        cmake --build . --config Release --target install
    - name: build-x64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x64; cd build-x64
        cmake -T v142,host=x64 -A x64 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release $(type ../../opencv2_cmake_options.txt) -DBUILD_opencv_world=OFF ..
        cmake --build . --config Release -j 2
        cmake --build . --config Release --target install
    - name: package
      run: |
        mkdir ${{ env.PACKAGENAME }}
        mkdir ${{ env.PACKAGENAME }}/x86
        mkdir ${{ env.PACKAGENAME }}/x64
        Copy-Item -Verbose -Recurse -Path "opencv-${{ env.OPENCV_VERSION }}\build-x86\install\*" -Destination "${{ env.PACKAGENAME }}\x86"
        Copy-Item -Verbose -Recurse -Path "opencv-${{ env.OPENCV_VERSION }}\build-x64\install\*" -Destination "${{ env.PACKAGENAME }}\x64"
        7z a -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: upload-zip
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  ubuntu-1604-opencv4:
    runs-on: ubuntu-16.04
    env:
      OPENCV_VERSION: 4.5.1
      PACKAGENAME: opencv-mobile-4.5.1-ubuntu-1604
    steps:
    - uses: actions/checkout@v2
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        truncate -s 0 cmake/OpenCVFindLibsGrfmt.cmake
        rm -rf modules/gapi
        patch -p1 -i ../opencv-4.5.1-no-rtti.patch
        patch -p1 -i ../opencv-4.5.1-no-zlib.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/
    - name: build
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build && cd build
        cmake -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv4_cmake_options.txt` -DBUILD_opencv_world=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package
      run: |
        rm -rf ${{ env.PACKAGENAME }}
        mkdir -p ${{ env.PACKAGENAME }}
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build/install/* ${{ env.PACKAGENAME }}/
        rm -f ${{ env.PACKAGENAME }}.zip
        zip -9 -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  ubuntu-1604-opencv3:
    runs-on: ubuntu-16.04
    env:
      OPENCV_VERSION: 3.4.13
      PACKAGENAME: opencv-mobile-3.4.13-ubuntu-1604
    steps:
    - uses: actions/checkout@v2
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        truncate -s 0 cmake/OpenCVFindLibsGrfmt.cmake
        patch -p1 -i ../opencv-3.4.13-no-rtti.patch
        patch -p1 -i ../opencv-3.4.13-no-zlib.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/
    - name: build
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build && cd build
        cmake -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package
      run: |
        rm -rf ${{ env.PACKAGENAME }}
        mkdir -p ${{ env.PACKAGENAME }}
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build/install/* ${{ env.PACKAGENAME }}/
        rm -f ${{ env.PACKAGENAME }}.zip
        zip -9 -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  ubuntu-1604-opencv2:
    runs-on: ubuntu-16.04
    env:
      OPENCV_VERSION: 2.4.13.7
      PACKAGENAME: opencv-mobile-2.4.13.7-ubuntu-1604
    steps:
    - uses: actions/checkout@v2
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        truncate -s 0 cmake/OpenCVFindLibsGrfmt.cmake
        patch -p1 -i ../opencv-2.4.13.7-no-rtti.patch
        patch -p1 -i ../opencv-2.4.13.7-no-zlib.patch
        patch -p1 -i ../opencv-2.4.13.7-fix-highgui-include.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/
    - name: build
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build && cd build
        cmake -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv2_cmake_options.txt` -DBUILD_opencv_world=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package
      run: |
        rm -rf ${{ env.PACKAGENAME }}
        mkdir -p ${{ env.PACKAGENAME }}
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build/install/* ${{ env.PACKAGENAME }}/
        rm -f ${{ env.PACKAGENAME }}.zip
        zip -9 -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  ubuntu-1804-opencv4:
    runs-on: ubuntu-18.04
    env:
      OPENCV_VERSION: 4.5.1
      PACKAGENAME: opencv-mobile-4.5.1-ubuntu-1804
    steps:
    - uses: actions/checkout@v2
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        truncate -s 0 cmake/OpenCVFindLibsGrfmt.cmake
        rm -rf modules/gapi
        patch -p1 -i ../opencv-4.5.1-no-rtti.patch
        patch -p1 -i ../opencv-4.5.1-no-zlib.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/
    - name: build
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build && cd build
        cmake -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv4_cmake_options.txt` -DBUILD_opencv_world=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package
      run: |
        rm -rf ${{ env.PACKAGENAME }}
        mkdir -p ${{ env.PACKAGENAME }}
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build/install/* ${{ env.PACKAGENAME }}/
        rm -f ${{ env.PACKAGENAME }}.zip
        zip -9 -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  ubuntu-1804-opencv3:
    runs-on: ubuntu-18.04
    env:
      OPENCV_VERSION: 3.4.13
      PACKAGENAME: opencv-mobile-3.4.13-ubuntu-1804
    steps:
    - uses: actions/checkout@v2
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        truncate -s 0 cmake/OpenCVFindLibsGrfmt.cmake
        patch -p1 -i ../opencv-3.4.13-no-rtti.patch
        patch -p1 -i ../opencv-3.4.13-no-zlib.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/
    - name: build
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build && cd build
        cmake -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package
      run: |
        rm -rf ${{ env.PACKAGENAME }}
        mkdir -p ${{ env.PACKAGENAME }}
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build/install/* ${{ env.PACKAGENAME }}/
        rm -f ${{ env.PACKAGENAME }}.zip
        zip -9 -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  ubuntu-1804-opencv2:
    runs-on: ubuntu-18.04
    env:
      OPENCV_VERSION: 2.4.13.7
      PACKAGENAME: opencv-mobile-2.4.13.7-ubuntu-1804
    steps:
    - uses: actions/checkout@v2
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        truncate -s 0 cmake/OpenCVFindLibsGrfmt.cmake
        patch -p1 -i ../opencv-2.4.13.7-no-rtti.patch
        patch -p1 -i ../opencv-2.4.13.7-no-zlib.patch
        patch -p1 -i ../opencv-2.4.13.7-fix-highgui-include.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/
    - name: build
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build && cd build
        cmake -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv2_cmake_options.txt` -DBUILD_opencv_world=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package
      run: |
        rm -rf ${{ env.PACKAGENAME }}
        mkdir -p ${{ env.PACKAGENAME }}
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build/install/* ${{ env.PACKAGENAME }}/
        rm -f ${{ env.PACKAGENAME }}.zip
        zip -9 -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  ubuntu-2004-opencv4:
    runs-on: ubuntu-20.04
    env:
      OPENCV_VERSION: 4.5.1
      PACKAGENAME: opencv-mobile-4.5.1-ubuntu-2004
    steps:
    - uses: actions/checkout@v2
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        truncate -s 0 cmake/OpenCVFindLibsGrfmt.cmake
        rm -rf modules/gapi
        patch -p1 -i ../opencv-4.5.1-no-rtti.patch
        patch -p1 -i ../opencv-4.5.1-no-zlib.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/
    - name: build
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build && cd build
        cmake -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv4_cmake_options.txt` -DBUILD_opencv_world=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package
      run: |
        rm -rf ${{ env.PACKAGENAME }}
        mkdir -p ${{ env.PACKAGENAME }}
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build/install/* ${{ env.PACKAGENAME }}/
        rm -f ${{ env.PACKAGENAME }}.zip
        zip -9 -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  ubuntu-2004-opencv3:
    runs-on: ubuntu-20.04
    env:
      OPENCV_VERSION: 3.4.13
      PACKAGENAME: opencv-mobile-3.4.13-ubuntu-2004
    steps:
    - uses: actions/checkout@v2
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        truncate -s 0 cmake/OpenCVFindLibsGrfmt.cmake
        patch -p1 -i ../opencv-3.4.13-no-rtti.patch
        patch -p1 -i ../opencv-3.4.13-no-zlib.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/
    - name: build
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build && cd build
        cmake -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package
      run: |
        rm -rf ${{ env.PACKAGENAME }}
        mkdir -p ${{ env.PACKAGENAME }}
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build/install/* ${{ env.PACKAGENAME }}/
        rm -f ${{ env.PACKAGENAME }}.zip
        zip -9 -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  ubuntu-2004-opencv2:
    runs-on: ubuntu-20.04
    env:
      OPENCV_VERSION: 2.4.13.7
      PACKAGENAME: opencv-mobile-2.4.13.7-ubuntu-2004
    steps:
    - uses: actions/checkout@v2
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        truncate -s 0 cmake/OpenCVFindLibsGrfmt.cmake
        patch -p1 -i ../opencv-2.4.13.7-no-rtti.patch
        patch -p1 -i ../opencv-2.4.13.7-no-zlib.patch
        patch -p1 -i ../opencv-2.4.13.7-fix-highgui-include.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/
    - name: build
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build && cd build
        cmake -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv2_cmake_options.txt` -DBUILD_opencv_world=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package
      run: |
        rm -rf ${{ env.PACKAGENAME }}
        mkdir -p ${{ env.PACKAGENAME }}
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build/install/* ${{ env.PACKAGENAME }}/
        rm -f ${{ env.PACKAGENAME }}.zip
        zip -9 -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  release:
    needs: [setup, android-opencv4, android-opencv3, android-opencv2, ios-opencv4, ios-opencv3, ios-opencv2, ios-opencv4-bitcode, ios-opencv3-bitcode, ios-opencv2-bitcode, armlinux-opencv4, armlinux-opencv3, armlinux-opencv2, macos-opencv4, macos-opencv3, macos-opencv2, windows-vs2015-opencv4, windows-vs2015-opencv3, windows-vs2015-opencv2, windows-vs2017-opencv4, windows-vs2017-opencv3, windows-vs2017-opencv2, windows-vs2019-opencv4, windows-vs2019-opencv3, windows-vs2019-opencv2, ubuntu-1604-opencv4, ubuntu-1604-opencv3, ubuntu-1604-opencv2, ubuntu-1804-opencv4, ubuntu-1804-opencv3, ubuntu-1804-opencv2, ubuntu-2004-opencv4, ubuntu-2004-opencv3, ubuntu-2004-opencv2]
    runs-on: ubuntu-latest
    steps:
    - name: download
      uses: actions/download-artifact@v2
      with:
        path: artifacts

    - name: create-release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.setup.outputs.VERSION }}
        release_name: Release ${{ needs.setup.outputs.VERSION }}
        draft: false
        prerelease: false

    - name: upload-android-opencv4
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PACKAGENAME: opencv-mobile-4.5.1-android
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
        asset_name: ${{ env.PACKAGENAME }}.zip
        asset_content_type: application/zip

    - name: upload-android-opencv3
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PACKAGENAME: opencv-mobile-3.4.13-android
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
        asset_name: ${{ env.PACKAGENAME }}.zip
        asset_content_type: application/zip

    - name: upload-android-opencv2
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PACKAGENAME: opencv-mobile-2.4.13.7-android
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
        asset_name: ${{ env.PACKAGENAME }}.zip
        asset_content_type: application/zip

    - name: upload-ios-opencv4
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PACKAGENAME: opencv-mobile-4.5.1-ios
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
        asset_name: ${{ env.PACKAGENAME }}.zip
        asset_content_type: application/zip

    - name: upload-ios-opencv3
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PACKAGENAME: opencv-mobile-3.4.13-ios
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
        asset_name: ${{ env.PACKAGENAME }}.zip
        asset_content_type: application/zip

    - name: upload-ios-opencv2
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PACKAGENAME: opencv-mobile-2.4.13.7-ios
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
        asset_name: ${{ env.PACKAGENAME }}.zip
        asset_content_type: application/zip

    - name: upload-ios-opencv4-bitcode
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PACKAGENAME: opencv-mobile-4.5.1-ios-bitcode
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
        asset_name: ${{ env.PACKAGENAME }}.zip
        asset_content_type: application/zip

    - name: upload-ios-opencv3-bitcode
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PACKAGENAME: opencv-mobile-3.4.13-ios-bitcode
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
        asset_name: ${{ env.PACKAGENAME }}.zip
        asset_content_type: application/zip

    - name: upload-ios-opencv2-bitcode
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PACKAGENAME: opencv-mobile-2.4.13.7-ios-bitcode
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
        asset_name: ${{ env.PACKAGENAME }}.zip
        asset_content_type: application/zip

    - name: upload-armlinux-opencv4
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PACKAGENAME: opencv-mobile-4.5.1-armlinux
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
        asset_name: ${{ env.PACKAGENAME }}.zip
        asset_content_type: application/zip

    - name: upload-armlinux-opencv3
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PACKAGENAME: opencv-mobile-3.4.13-armlinux
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
        asset_name: ${{ env.PACKAGENAME }}.zip
        asset_content_type: application/zip

    - name: upload-armlinux-opencv2
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PACKAGENAME: opencv-mobile-2.4.13.7-armlinux
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
        asset_name: ${{ env.PACKAGENAME }}.zip
        asset_content_type: application/zip

    - name: upload-macos-opencv4
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PACKAGENAME: opencv-mobile-4.5.1-macos
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
        asset_name: ${{ env.PACKAGENAME }}.zip
        asset_content_type: application/zip

    - name: upload-macos-opencv3
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PACKAGENAME: opencv-mobile-3.4.13-macos
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
        asset_name: ${{ env.PACKAGENAME }}.zip
        asset_content_type: application/zip

    - name: upload-macos-opencv2
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PACKAGENAME: opencv-mobile-2.4.13.7-macos
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
        asset_name: ${{ env.PACKAGENAME }}.zip
        asset_content_type: application/zip

    - name: upload-windows-vs2015-opencv4
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PACKAGENAME: opencv-mobile-4.5.1-windows-vs2015
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
        asset_name: ${{ env.PACKAGENAME }}.zip
        asset_content_type: application/zip

    - name: upload-windows-vs2015-opencv3
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PACKAGENAME: opencv-mobile-3.4.13-windows-vs2015
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
        asset_name: ${{ env.PACKAGENAME }}.zip
        asset_content_type: application/zip

    - name: upload-windows-vs2015-opencv2
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PACKAGENAME: opencv-mobile-2.4.13.7-windows-vs2015
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
        asset_name: ${{ env.PACKAGENAME }}.zip
        asset_content_type: application/zip

    - name: upload-windows-vs2017-opencv4
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PACKAGENAME: opencv-mobile-4.5.1-windows-vs2017
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
        asset_name: ${{ env.PACKAGENAME }}.zip
        asset_content_type: application/zip

    - name: upload-windows-vs2017-opencv3
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PACKAGENAME: opencv-mobile-3.4.13-windows-vs2017
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
        asset_name: ${{ env.PACKAGENAME }}.zip
        asset_content_type: application/zip

    - name: upload-windows-vs2017-opencv2
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PACKAGENAME: opencv-mobile-2.4.13.7-windows-vs2017
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
        asset_name: ${{ env.PACKAGENAME }}.zip
        asset_content_type: application/zip

    - name: upload-windows-vs2019-opencv4
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PACKAGENAME: opencv-mobile-4.5.1-windows-vs2019
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
        asset_name: ${{ env.PACKAGENAME }}.zip
        asset_content_type: application/zip

    - name: upload-windows-vs2019-opencv3
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PACKAGENAME: opencv-mobile-3.4.13-windows-vs2019
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
        asset_name: ${{ env.PACKAGENAME }}.zip
        asset_content_type: application/zip

    - name: upload-windows-vs2019-opencv2
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PACKAGENAME: opencv-mobile-2.4.13.7-windows-vs2019
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
        asset_name: ${{ env.PACKAGENAME }}.zip
        asset_content_type: application/zip

    - name: upload-ubuntu-1604-opencv4
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PACKAGENAME: opencv-mobile-4.5.1-ubuntu-1604
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
        asset_name: ${{ env.PACKAGENAME }}.zip
        asset_content_type: application/zip

    - name: upload-ubuntu-1604-opencv3
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PACKAGENAME: opencv-mobile-3.4.13-ubuntu-1604
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
        asset_name: ${{ env.PACKAGENAME }}.zip
        asset_content_type: application/zip

    - name: upload-ubuntu-1604-opencv2
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PACKAGENAME: opencv-mobile-2.4.13.7-ubuntu-1604
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
        asset_name: ${{ env.PACKAGENAME }}.zip
        asset_content_type: application/zip

    - name: upload-ubuntu-1804-opencv4
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PACKAGENAME: opencv-mobile-4.5.1-ubuntu-1804
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
        asset_name: ${{ env.PACKAGENAME }}.zip
        asset_content_type: application/zip

    - name: upload-ubuntu-1804-opencv3
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PACKAGENAME: opencv-mobile-3.4.13-ubuntu-1804
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
        asset_name: ${{ env.PACKAGENAME }}.zip
        asset_content_type: application/zip

    - name: upload-ubuntu-1804-opencv2
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PACKAGENAME: opencv-mobile-2.4.13.7-ubuntu-1804
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
        asset_name: ${{ env.PACKAGENAME }}.zip
        asset_content_type: application/zip

    - name: upload-ubuntu-2004-opencv4
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PACKAGENAME: opencv-mobile-4.5.1-ubuntu-2004
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
        asset_name: ${{ env.PACKAGENAME }}.zip
        asset_content_type: application/zip

    - name: upload-ubuntu-2004-opencv3
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PACKAGENAME: opencv-mobile-3.4.13-ubuntu-2004
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
        asset_name: ${{ env.PACKAGENAME }}.zip
        asset_content_type: application/zip

    - name: upload-ubuntu-2004-opencv2
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PACKAGENAME: opencv-mobile-2.4.13.7-ubuntu-2004
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
        asset_name: ${{ env.PACKAGENAME }}.zip
        asset_content_type: application/zip
