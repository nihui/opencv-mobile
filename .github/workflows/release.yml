name: release
# on: [push, pull_request]
on:
  push:
    tags:
      - '*'

env:
  DEVELOPER_DIR: /Applications/Xcode_13.4.1.app/Contents/Developer
  IOS_DEPLOYMENT_TARGET: '9.0'
  MAC_DEPLOYMENT_TARGET: '10.9'
  MAC_ARM64_DEPLOYMENT_TARGET: '11.0'
  MAC_CATALYST_DEPLOYMENT_TARGET: '13.1'
  ENABLE_BITCODE: OFF
  ENABLE_ARC: OFF
  ENABLE_VISIBILITY: OFF
  EMSCRIPTEN_VERSION: 3.1.28

permissions:
  contents: read

jobs:
  setup:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.get_version.outputs.VERSION }}
    steps:
    - name: get-version
      id: get_version
      run: echo "VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_OUTPUT

  android-opencv4:
    runs-on: ubuntu-latest
    env:
      OPENCV_VERSION: 4.8.1
      PACKAGENAME: opencv-mobile-4.8.1-android
    steps:
    - uses: actions/checkout@v3
    - name: ndk-fix-debug
      run: sed -i -e '/^  -g$/d' $ANDROID_NDK_LATEST_HOME/build/cmake/android-legacy.toolchain.cmake
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        truncate -s 0 cmake/OpenCVFindLibsGrfmt.cmake
        rm -rf modules/gapi
        patch -p1 -i ../opencv-4.8.1-no-rtti.patch
        patch -p1 -i ../opencv-4.8.1-no-zlib.patch
        patch -p1 -i ../opencv-4.8.1-link-openmp.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/
    - name: build-armeabi-v7a
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-armeabi-v7a && cd build-armeabi-v7a
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_LATEST_HOME/build/cmake/android.toolchain.cmake -DANDROID_USE_LEGACY_TOOLCHAIN_FILE=False \
            -DANDROID_ABI="armeabi-v7a" -DANDROID_ARM_NEON=ON -DANDROID_PLATFORM=android-21 -DANDROID_CPP_FEATURES="no-rtti no-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv4_cmake_options.txt` -DBUILD_opencv_world=OFF -DOPENCV_DISABLE_FILESYSTEM_SUPPORT=ON ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-arm64-v8a
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-arm64-v8a && cd build-arm64-v8a
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_LATEST_HOME/build/cmake/android.toolchain.cmake -DANDROID_USE_LEGACY_TOOLCHAIN_FILE=False \
            -DANDROID_ABI="arm64-v8a" -DANDROID_PLATFORM=android-21 -DANDROID_CPP_FEATURES="no-rtti no-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv4_cmake_options.txt` -DBUILD_opencv_world=OFF -DOPENCV_DISABLE_FILESYSTEM_SUPPORT=ON -DOPENCV_EXTRA_FLAGS="-mno-outline-atomics" ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-x86
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x86 && cd build-x86
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_LATEST_HOME/build/cmake/android.toolchain.cmake -DANDROID_USE_LEGACY_TOOLCHAIN_FILE=False \
            -DANDROID_ABI="x86" -DANDROID_PLATFORM=android-21 -DANDROID_CPP_FEATURES="no-rtti no-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv4_cmake_options.txt` -DBUILD_opencv_world=OFF -DOPENCV_DISABLE_FILESYSTEM_SUPPORT=ON ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-x86_64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x86_64 && cd build-x86_64
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_LATEST_HOME/build/cmake/android.toolchain.cmake -DANDROID_USE_LEGACY_TOOLCHAIN_FILE=False \
            -DANDROID_ABI="x86_64" -DANDROID_PLATFORM=android-21 -DANDROID_CPP_FEATURES="no-rtti no-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv4_cmake_options.txt` -DBUILD_opencv_world=OFF -DOPENCV_DISABLE_FILESYSTEM_SUPPORT=ON ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package
      run: |
        mkdir ${{ env.PACKAGENAME }}
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-x86/install/* ${{ env.PACKAGENAME }}/
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-x86_64/install/* ${{ env.PACKAGENAME }}/
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-armeabi-v7a/install/* ${{ env.PACKAGENAME }}/
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-arm64-v8a/install/* ${{ env.PACKAGENAME }}/
        rm -rf ${{ env.PACKAGENAME }}/sdk/etc
        rm -f ${{ env.PACKAGENAME }}/sdk/native/jni/*.mk
        rm -f ${{ env.PACKAGENAME }}/sdk/native/jni/android.toolchain.cmake
        zip -9 -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: test-armeabi-v7a
      run: |
        cd test
        mkdir build-armeabi-v7a && cd build-armeabi-v7a
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_LATEST_HOME/build/cmake/android.toolchain.cmake -DANDROID_USE_LEGACY_TOOLCHAIN_FILE=False \
            -DANDROID_ABI="armeabi-v7a" -DANDROID_ARM_NEON=ON -DANDROID_PLATFORM=android-21 -DANDROID_CPP_FEATURES="no-rtti no-exceptions" \
            -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR=$GITHUB_WORKSPACE/${{ env.PACKAGENAME }}/sdk/native/jni ..
        cmake --build . -j 2
    - name: test-arm64-v8a
      run: |
        cd test
        mkdir build-arm64-v8a && cd build-arm64-v8a
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_LATEST_HOME/build/cmake/android.toolchain.cmake -DANDROID_USE_LEGACY_TOOLCHAIN_FILE=False \
            -DANDROID_ABI="arm64-v8a" -DANDROID_PLATFORM=android-21 -DANDROID_CPP_FEATURES="no-rtti no-exceptions" \
            -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR=$GITHUB_WORKSPACE/${{ env.PACKAGENAME }}/sdk/native/jni ..
        cmake --build . -j 2
    - name: test-x86
      run: |
        cd test
        mkdir build-x86 && cd build-x86
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_LATEST_HOME/build/cmake/android.toolchain.cmake -DANDROID_USE_LEGACY_TOOLCHAIN_FILE=False \
            -DANDROID_ABI="x86" -DANDROID_PLATFORM=android-21 -DANDROID_CPP_FEATURES="no-rtti no-exceptions" \
            -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR=$GITHUB_WORKSPACE/${{ env.PACKAGENAME }}/sdk/native/jni ..
        cmake --build . -j 2
    - name: test-x86_64
      run: |
        cd test
        mkdir build-x86_64 && cd build-x86_64
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_LATEST_HOME/build/cmake/android.toolchain.cmake -DANDROID_USE_LEGACY_TOOLCHAIN_FILE=False \
            -DANDROID_ABI="x86_64" -DANDROID_PLATFORM=android-21 -DANDROID_CPP_FEATURES="no-rtti no-exceptions" \
            -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR=$GITHUB_WORKSPACE/${{ env.PACKAGENAME }}/sdk/native/jni ..
        cmake --build . -j 2
    - name: upload
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  android-opencv3:
    runs-on: ubuntu-latest
    env:
      OPENCV_VERSION: 3.4.20
      PACKAGENAME: opencv-mobile-3.4.20-android
    steps:
    - uses: actions/checkout@v3
    - name: ndk-fix-debug
      run: sed -i -e '/^  -g$/d' $ANDROID_NDK_LATEST_HOME/build/cmake/android-legacy.toolchain.cmake
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        truncate -s 0 cmake/OpenCVFindLibsGrfmt.cmake
        patch -p1 -i ../opencv-3.4.20-no-rtti.patch
        patch -p1 -i ../opencv-3.4.20-no-zlib.patch
        patch -p1 -i ../opencv-3.4.20-link-openmp.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/
    - name: build-armeabi-v7a
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-armeabi-v7a && cd build-armeabi-v7a
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_LATEST_HOME/build/cmake/android.toolchain.cmake -DANDROID_USE_LEGACY_TOOLCHAIN_FILE=False \
            -DANDROID_ABI="armeabi-v7a" -DANDROID_ARM_NEON=ON -DANDROID_PLATFORM=android-21 -DANDROID_CPP_FEATURES="no-rtti no-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-arm64-v8a
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-arm64-v8a && cd build-arm64-v8a
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_LATEST_HOME/build/cmake/android.toolchain.cmake -DANDROID_USE_LEGACY_TOOLCHAIN_FILE=False \
            -DANDROID_ABI="arm64-v8a" -DANDROID_PLATFORM=android-21 -DANDROID_CPP_FEATURES="no-rtti no-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=OFF -DOPENCV_EXTRA_FLAGS="-mno-outline-atomics" ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-x86
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x86 && cd build-x86
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_LATEST_HOME/build/cmake/android.toolchain.cmake -DANDROID_USE_LEGACY_TOOLCHAIN_FILE=False \
            -DANDROID_ABI="x86" -DANDROID_PLATFORM=android-21 -DANDROID_CPP_FEATURES="no-rtti no-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-x86_64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x86_64 && cd build-x86_64
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_LATEST_HOME/build/cmake/android.toolchain.cmake -DANDROID_USE_LEGACY_TOOLCHAIN_FILE=False \
            -DANDROID_ABI="x86_64" -DANDROID_PLATFORM=android-21 -DANDROID_CPP_FEATURES="no-rtti no-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package
      run: |
        mkdir ${{ env.PACKAGENAME }}
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-x86/install/* ${{ env.PACKAGENAME }}/
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-x86_64/install/* ${{ env.PACKAGENAME }}/
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-armeabi-v7a/install/* ${{ env.PACKAGENAME }}/
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-arm64-v8a/install/* ${{ env.PACKAGENAME }}/
        rm -rf ${{ env.PACKAGENAME }}/apk
        rm -rf ${{ env.PACKAGENAME }}/sdk/etc
        rm -f ${{ env.PACKAGENAME }}/sdk/native/jni/*.mk
        rm -f ${{ env.PACKAGENAME }}/sdk/native/jni/android.toolchain.cmake
        zip -9 -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: test-armeabi-v7a
      run: |
        cd test
        mkdir build-armeabi-v7a && cd build-armeabi-v7a
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_LATEST_HOME/build/cmake/android.toolchain.cmake -DANDROID_USE_LEGACY_TOOLCHAIN_FILE=False \
            -DANDROID_ABI="armeabi-v7a" -DANDROID_ARM_NEON=ON -DANDROID_PLATFORM=android-21 -DANDROID_CPP_FEATURES="no-rtti no-exceptions" \
            -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR=$GITHUB_WORKSPACE/${{ env.PACKAGENAME }}/sdk/native/jni ..
        cmake --build . -j 2
    - name: test-arm64-v8a
      run: |
        cd test
        mkdir build-arm64-v8a && cd build-arm64-v8a
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_LATEST_HOME/build/cmake/android.toolchain.cmake -DANDROID_USE_LEGACY_TOOLCHAIN_FILE=False \
            -DANDROID_ABI="arm64-v8a" -DANDROID_PLATFORM=android-21 -DANDROID_CPP_FEATURES="no-rtti no-exceptions" \
            -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR=$GITHUB_WORKSPACE/${{ env.PACKAGENAME }}/sdk/native/jni ..
        cmake --build . -j 2
    - name: test-x86
      run: |
        cd test
        mkdir build-x86 && cd build-x86
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_LATEST_HOME/build/cmake/android.toolchain.cmake -DANDROID_USE_LEGACY_TOOLCHAIN_FILE=False \
            -DANDROID_ABI="x86" -DANDROID_PLATFORM=android-21 -DANDROID_CPP_FEATURES="no-rtti no-exceptions" \
            -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR=$GITHUB_WORKSPACE/${{ env.PACKAGENAME }}/sdk/native/jni ..
        cmake --build . -j 2
    - name: test-x86_64
      run: |
        cd test
        mkdir build-x86_64 && cd build-x86_64
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_LATEST_HOME/build/cmake/android.toolchain.cmake -DANDROID_USE_LEGACY_TOOLCHAIN_FILE=False \
            -DANDROID_ABI="x86_64" -DANDROID_PLATFORM=android-21 -DANDROID_CPP_FEATURES="no-rtti no-exceptions" \
            -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR=$GITHUB_WORKSPACE/${{ env.PACKAGENAME }}/sdk/native/jni ..
        cmake --build . -j 2
    - name: upload
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  android-opencv2:
    runs-on: ubuntu-latest
    env:
      OPENCV_VERSION: 2.4.13.7
      PACKAGENAME: opencv-mobile-2.4.13.7-android
    steps:
    - uses: actions/checkout@v3
    - name: ndk-fix-debug
      run: sed -i -e '/^  -g$/d' $ANDROID_NDK_LATEST_HOME/build/cmake/android-legacy.toolchain.cmake
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        truncate -s 0 cmake/OpenCVFindLibsGrfmt.cmake
        patch -p1 -i ../opencv-2.4.13.7-no-rtti.patch
        patch -p1 -i ../opencv-2.4.13.7-no-zlib.patch
        patch -p1 -i ../opencv-2.4.13.7-fix-highgui-include.patch
        patch -p1 -i ../opencv-2.4.13.7-no-link-stdc++.patch
        patch -p1 -i ../opencv-2.4.13.7-enable-cxx11.patch
        patch -p1 -i ../opencv-2.4.13.7-link-openmp.patch
        patch -p1 -i ../opencv-2.4.13.7-newer-msvc.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/
    - name: build-armeabi-v7a
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-armeabi-v7a && cd build-armeabi-v7a
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_LATEST_HOME/build/cmake/android.toolchain.cmake -DANDROID_USE_LEGACY_TOOLCHAIN_FILE=False \
            -DANDROID_ABI="armeabi-v7a" -DANDROID_ARM_NEON=ON -DANDROID_PLATFORM=android-21 -DANDROID_CPP_FEATURES="no-rtti no-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv2_cmake_options.txt` -DBUILD_opencv_world=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-arm64-v8a
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-arm64-v8a && cd build-arm64-v8a
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_LATEST_HOME/build/cmake/android.toolchain.cmake -DANDROID_USE_LEGACY_TOOLCHAIN_FILE=False \
            -DANDROID_ABI="arm64-v8a" -DANDROID_PLATFORM=android-21 -DANDROID_CPP_FEATURES="no-rtti no-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv2_cmake_options.txt` -DBUILD_opencv_world=OFF -DOPENCV_EXTRA_FLAGS="-mno-outline-atomics" ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-x86
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x86 && cd build-x86
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_LATEST_HOME/build/cmake/android.toolchain.cmake -DANDROID_USE_LEGACY_TOOLCHAIN_FILE=False \
            -DANDROID_ABI="x86" -DANDROID_PLATFORM=android-21 -DANDROID_CPP_FEATURES="no-rtti no-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv2_cmake_options.txt` -DBUILD_opencv_world=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-x86_64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x86_64 && cd build-x86_64
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_LATEST_HOME/build/cmake/android.toolchain.cmake -DANDROID_USE_LEGACY_TOOLCHAIN_FILE=False \
            -DANDROID_ABI="x86_64" -DANDROID_PLATFORM=android-21 -DANDROID_CPP_FEATURES="no-rtti no-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv2_cmake_options.txt` -DBUILD_opencv_world=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package
      run: |
        mkdir ${{ env.PACKAGENAME }}
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-x86/install/* ${{ env.PACKAGENAME }}/
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-x86_64/install/* ${{ env.PACKAGENAME }}/
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-armeabi-v7a/install/* ${{ env.PACKAGENAME }}/
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-arm64-v8a/install/* ${{ env.PACKAGENAME }}/
        rm -f ${{ env.PACKAGENAME }}/sdk/native/libs/armeabi-v7a/libopencv_info.so
        rm -f ${{ env.PACKAGENAME }}/sdk/native/libs/arm64-v8a/libopencv_info.so
        rm -f ${{ env.PACKAGENAME }}/sdk/native/libs/x86/libopencv_info.so
        rm -f ${{ env.PACKAGENAME }}/sdk/native/libs/x86_64/libopencv_info.so
        rm -rf ${{ env.PACKAGENAME }}/sdk/etc
        rm -f ${{ env.PACKAGENAME }}/sdk/native/jni/*.mk
        rm -f ${{ env.PACKAGENAME }}/sdk/native/jni/android.toolchain.cmake
        zip -9 -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: test-armeabi-v7a
      run: |
        cd test
        mkdir build-armeabi-v7a && cd build-armeabi-v7a
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_LATEST_HOME/build/cmake/android.toolchain.cmake -DANDROID_USE_LEGACY_TOOLCHAIN_FILE=False \
            -DANDROID_ABI="armeabi-v7a" -DANDROID_ARM_NEON=ON -DANDROID_PLATFORM=android-21 -DANDROID_CPP_FEATURES="no-rtti no-exceptions" \
            -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR=$GITHUB_WORKSPACE/${{ env.PACKAGENAME }}/sdk/native/jni ..
        cmake --build . -j 2
    - name: test-arm64-v8a
      run: |
        cd test
        mkdir build-arm64-v8a && cd build-arm64-v8a
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_LATEST_HOME/build/cmake/android.toolchain.cmake -DANDROID_USE_LEGACY_TOOLCHAIN_FILE=False \
            -DANDROID_ABI="arm64-v8a" -DANDROID_PLATFORM=android-21 -DANDROID_CPP_FEATURES="no-rtti no-exceptions" \
            -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR=$GITHUB_WORKSPACE/${{ env.PACKAGENAME }}/sdk/native/jni ..
        cmake --build . -j 2
    - name: test-x86
      run: |
        cd test
        mkdir build-x86 && cd build-x86
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_LATEST_HOME/build/cmake/android.toolchain.cmake -DANDROID_USE_LEGACY_TOOLCHAIN_FILE=False \
            -DANDROID_ABI="x86" -DANDROID_PLATFORM=android-21 -DANDROID_CPP_FEATURES="no-rtti no-exceptions" \
            -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR=$GITHUB_WORKSPACE/${{ env.PACKAGENAME }}/sdk/native/jni ..
        cmake --build . -j 2
    - name: test-x86_64
      run: |
        cd test
        mkdir build-x86_64 && cd build-x86_64
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_LATEST_HOME/build/cmake/android.toolchain.cmake -DANDROID_USE_LEGACY_TOOLCHAIN_FILE=False \
            -DANDROID_ABI="x86_64" -DANDROID_PLATFORM=android-21 -DANDROID_CPP_FEATURES="no-rtti no-exceptions" \
            -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR=$GITHUB_WORKSPACE/${{ env.PACKAGENAME }}/sdk/native/jni ..
        cmake --build . -j 2
    - name: upload
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  ios-opencv4:
    runs-on: macos-12
    env:
      OPENCV_VERSION: 4.8.1
      PACKAGENAME: opencv-mobile-4.8.1-ios
    steps:
    - uses: actions/checkout@v3
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        echo -n > cmake/OpenCVFindLibsGrfmt.cmake
        rm -rf modules/gapi
        patch -p1 -i ../opencv-4.8.1-no-rtti.patch
        patch -p1 -i ../opencv-4.8.1-no-zlib.patch
        patch -p1 -i ../opencv-4.8.1-link-openmp.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/
    - name: build-armv7
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-armv7 && cd build-armv7
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=OS -DARCHS="armv7" \
            -DDEPLOYMENT_TARGET=$IOS_DEPLOYMENT_TARGET -DENABLE_BITCODE=$ENABLE_BITCODE -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv4_cmake_options.txt` -DBUILD_opencv_world=ON -DOPENCV_DISABLE_FILESYSTEM_SUPPORT=ON ..
        cmake --build . -j 3
        cmake --build . --target install
    - name: build-arm64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-arm64 && cd build-arm64
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=OS -DARCHS="arm64" \
            -DDEPLOYMENT_TARGET=$IOS_DEPLOYMENT_TARGET -DENABLE_BITCODE=$ENABLE_BITCODE -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv4_cmake_options.txt` -DBUILD_opencv_world=ON -DOPENCV_DISABLE_FILESYSTEM_SUPPORT=ON ..
        cmake --build . -j 3
        cmake --build . --target install
    - name: build-arm64e
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-arm64e && cd build-arm64e
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=OS -DARCHS="arm64e" \
            -DDEPLOYMENT_TARGET=$IOS_DEPLOYMENT_TARGET -DENABLE_BITCODE=$ENABLE_BITCODE -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv4_cmake_options.txt` -DBUILD_opencv_world=ON -DOPENCV_DISABLE_FILESYSTEM_SUPPORT=ON ..
        cmake --build . -j 3
        cmake --build . --target install
    - name: package
      run: |
        rm -rf opencv2.framework
        mkdir -p opencv2.framework/Versions/A/Headers
        mkdir -p opencv2.framework/Versions/A/Resources
        ln -s A opencv2.framework/Versions/Current
        ln -s Versions/Current/Headers opencv2.framework/Headers
        ln -s Versions/Current/Resources opencv2.framework/Resources
        ln -s Versions/Current/opencv2 opencv2.framework/opencv2
        lipo -create \
            opencv-${{ env.OPENCV_VERSION }}/build-armv7/install/lib/libopencv_world.a \
            opencv-${{ env.OPENCV_VERSION }}/build-arm64/install/lib/libopencv_world.a \
            opencv-${{ env.OPENCV_VERSION }}/build-arm64e/install/lib/libopencv_world.a \
            -o opencv2.framework/Versions/A/opencv2
        cp -r opencv-${{ env.OPENCV_VERSION }}/build-arm64/install/include/opencv4/opencv2/* opencv2.framework/Versions/A/Headers/
        sed -e 's/__NAME__/OpenCV/g' -e 's/__IDENTIFIER__/org.opencv/g' -e 's/__VERSION__/${{ env.OPENCV_VERSION }}/g' Info.plist > opencv2.framework/Versions/A/Resources/Info.plist
        rm -f ${{ env.PACKAGENAME }}.zip
        zip -9 -y -r ${{ env.PACKAGENAME }}.zip opencv2.framework
    - name: test
      run: |
        cd test
        mkdir build && cd build
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=OS -DARCHS="armv7;arm64;arm64e" \
            -DDEPLOYMENT_TARGET=$IOS_DEPLOYMENT_TARGET -DENABLE_BITCODE=$ENABLE_BITCODE -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR=$GITHUB_WORKSPACE ..
        cmake --build . -j 3
    - name: upload-zip
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  ios-opencv3:
    runs-on: macos-12
    env:
      OPENCV_VERSION: 3.4.20
      PACKAGENAME: opencv-mobile-3.4.20-ios
    steps:
    - uses: actions/checkout@v3
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        echo -n > cmake/OpenCVFindLibsGrfmt.cmake
        patch -p1 -i ../opencv-3.4.20-no-rtti.patch
        patch -p1 -i ../opencv-3.4.20-no-zlib.patch
        patch -p1 -i ../opencv-3.4.20-link-openmp.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/
    - name: build-armv7
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-armv7 && cd build-armv7
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=OS -DARCHS="armv7" \
            -DDEPLOYMENT_TARGET=$IOS_DEPLOYMENT_TARGET -DENABLE_BITCODE=$ENABLE_BITCODE -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=ON ..
        cmake --build . -j 3
        cmake --build . --target install
    - name: build-arm64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-arm64 && cd build-arm64
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=OS -DARCHS="arm64" \
            -DDEPLOYMENT_TARGET=$IOS_DEPLOYMENT_TARGET -DENABLE_BITCODE=$ENABLE_BITCODE -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=ON ..
        cmake --build . -j 3
        cmake --build . --target install
    - name: build-arm64e
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-arm64e && cd build-arm64e
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=OS -DARCHS="arm64e" \
            -DDEPLOYMENT_TARGET=$IOS_DEPLOYMENT_TARGET -DENABLE_BITCODE=$ENABLE_BITCODE -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=ON ..
        cmake --build . -j 3
        cmake --build . --target install
    - name: package
      run: |
        rm -rf opencv2.framework
        mkdir -p opencv2.framework/Versions/A/Headers
        mkdir -p opencv2.framework/Versions/A/Resources
        ln -s A opencv2.framework/Versions/Current
        ln -s Versions/Current/Headers opencv2.framework/Headers
        ln -s Versions/Current/Resources opencv2.framework/Resources
        ln -s Versions/Current/opencv2 opencv2.framework/opencv2
        lipo -create \
            opencv-${{ env.OPENCV_VERSION }}/build-armv7/install/lib/libopencv_world.a \
            opencv-${{ env.OPENCV_VERSION }}/build-arm64/install/lib/libopencv_world.a \
            opencv-${{ env.OPENCV_VERSION }}/build-arm64e/install/lib/libopencv_world.a \
            -o opencv2.framework/Versions/A/opencv2
        cp -r opencv-${{ env.OPENCV_VERSION }}/build-arm64/install/include/opencv2/* opencv2.framework/Versions/A/Headers/
        sed -e 's/__NAME__/OpenCV/g' -e 's/__IDENTIFIER__/org.opencv/g' -e 's/__VERSION__/${{ env.OPENCV_VERSION }}/g' Info.plist > opencv2.framework/Versions/A/Resources/Info.plist
        rm -f ${{ env.PACKAGENAME }}.zip
        zip -9 -y -r ${{ env.PACKAGENAME }}.zip opencv2.framework
    - name: test
      run: |
        cd test
        mkdir build && cd build
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=OS -DARCHS="armv7;arm64;arm64e" \
            -DDEPLOYMENT_TARGET=$IOS_DEPLOYMENT_TARGET -DENABLE_BITCODE=$ENABLE_BITCODE -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR=$GITHUB_WORKSPACE ..
        cmake --build . -j 3
    - name: upload-zip
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  ios-opencv2:
    runs-on: macos-12
    env:
      OPENCV_VERSION: 2.4.13.7
      PACKAGENAME: opencv-mobile-2.4.13.7-ios
    steps:
    - uses: actions/checkout@v3
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        echo -n > cmake/OpenCVFindLibsGrfmt.cmake
        patch -p1 -i ../opencv-2.4.13.7-no-rtti.patch
        patch -p1 -i ../opencv-2.4.13.7-no-zlib.patch
        patch -p1 -i ../opencv-2.4.13.7-fix-highgui-include.patch
        patch -p1 -i ../opencv-2.4.13.7-no-link-stdc++.patch
        patch -p1 -i ../opencv-2.4.13.7-enable-cxx11.patch
        patch -p1 -i ../opencv-2.4.13.7-link-openmp.patch
        patch -p1 -i ../opencv-2.4.13.7-newer-msvc.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/

        # workaround ar @list issue on macos
        sed -i -e 's!\\"${objpath4}\\"!${objpath4}!g' modules/world/CMakeLists.txt

    - name: build-armv7
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-armv7 && cd build-armv7
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=OS -DARCHS="armv7" \
            -DDEPLOYMENT_TARGET=$IOS_DEPLOYMENT_TARGET -DENABLE_BITCODE=$ENABLE_BITCODE -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv2_cmake_options.txt` -DBUILD_opencv_world=ON ..
        cmake --build . -j 3 || echo "qaq"

        # workaround ar @list issue on macos
        cd modules/world
        /Applications/Xcode_13.4.1.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ar qc ../../lib/libopencv_world.a `cat world_objects.rsp` CMakeFiles/opencv_world.dir/src/world_init.cpp.o
        cd ../..

        cmake --build . --target install
    - name: build-arm64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-arm64 && cd build-arm64
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=OS -DARCHS="arm64" \
            -DDEPLOYMENT_TARGET=$IOS_DEPLOYMENT_TARGET -DENABLE_BITCODE=$ENABLE_BITCODE -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv2_cmake_options.txt` -DBUILD_opencv_world=ON ..
        cmake --build . -j 3 || echo "qaq"

        # workaround ar @list issue on macos
        cd modules/world
        /Applications/Xcode_13.4.1.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ar qc ../../lib/libopencv_world.a `cat world_objects.rsp` CMakeFiles/opencv_world.dir/src/world_init.cpp.o
        cd ../..

        cmake --build . --target install
    - name: build-arm64e
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-arm64e && cd build-arm64e
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=OS -DARCHS="arm64e" \
            -DDEPLOYMENT_TARGET=$IOS_DEPLOYMENT_TARGET -DENABLE_BITCODE=$ENABLE_BITCODE -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv2_cmake_options.txt` -DBUILD_opencv_world=ON ..
        cmake --build . -j 3 || echo "qaq"

        # workaround ar @list issue on macos
        cd modules/world
        /Applications/Xcode_13.4.1.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ar qc ../../lib/libopencv_world.a `cat world_objects.rsp` CMakeFiles/opencv_world.dir/src/world_init.cpp.o
        cd ../..

        cmake --build . --target install
    - name: package
      run: |
        rm -rf opencv2.framework
        mkdir -p opencv2.framework/Versions/A/Headers
        mkdir -p opencv2.framework/Versions/A/Resources
        ln -s A opencv2.framework/Versions/Current
        ln -s Versions/Current/Headers opencv2.framework/Headers
        ln -s Versions/Current/Resources opencv2.framework/Resources
        ln -s Versions/Current/opencv2 opencv2.framework/opencv2
        lipo -create \
            opencv-${{ env.OPENCV_VERSION }}/build-armv7/install/lib/libopencv_world.a \
            opencv-${{ env.OPENCV_VERSION }}/build-arm64/install/lib/libopencv_world.a \
            opencv-${{ env.OPENCV_VERSION }}/build-arm64e/install/lib/libopencv_world.a \
            -o opencv2.framework/Versions/A/opencv2
        cp -r opencv-${{ env.OPENCV_VERSION }}/build-arm64/install/include/opencv2/* opencv2.framework/Versions/A/Headers/
        sed -e 's/__NAME__/OpenCV/g' -e 's/__IDENTIFIER__/org.opencv/g' -e 's/__VERSION__/${{ env.OPENCV_VERSION }}/g' Info.plist > opencv2.framework/Versions/A/Resources/Info.plist
        rm -f ${{ env.PACKAGENAME }}.zip
        zip -9 -y -r ${{ env.PACKAGENAME }}.zip opencv2.framework
    - name: test
      run: |
        cd test
        mkdir build && cd build
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=OS -DARCHS="armv7;arm64;arm64e" \
            -DDEPLOYMENT_TARGET=$IOS_DEPLOYMENT_TARGET -DENABLE_BITCODE=$ENABLE_BITCODE -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR=$GITHUB_WORKSPACE ..
        cmake --build . -j 3
    - name: upload-zip
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  ios-opencv4-bitcode:
    runs-on: macos-12
    env:
      OPENCV_VERSION: 4.8.1
      PACKAGENAME: opencv-mobile-4.8.1-ios-bitcode
    steps:
    - uses: actions/checkout@v3
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        echo -n > cmake/OpenCVFindLibsGrfmt.cmake
        rm -rf modules/gapi
        patch -p1 -i ../opencv-4.8.1-no-rtti.patch
        patch -p1 -i ../opencv-4.8.1-no-zlib.patch
        patch -p1 -i ../opencv-4.8.1-link-openmp.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/
    - name: build-armv7
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-armv7 && cd build-armv7
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=OS -DARCHS="armv7" \
            -DDEPLOYMENT_TARGET=$IOS_DEPLOYMENT_TARGET -DENABLE_BITCODE=ON -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv4_cmake_options.txt` -DBUILD_opencv_world=ON -DOPENCV_DISABLE_FILESYSTEM_SUPPORT=ON ..
        cmake --build . -j 3
        cmake --build . --target install
    - name: build-arm64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-arm64 && cd build-arm64
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=OS -DARCHS="arm64" \
            -DDEPLOYMENT_TARGET=$IOS_DEPLOYMENT_TARGET -DENABLE_BITCODE=ON -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv4_cmake_options.txt` -DBUILD_opencv_world=ON -DOPENCV_DISABLE_FILESYSTEM_SUPPORT=ON ..
        cmake --build . -j 3
        cmake --build . --target install
    - name: build-arm64e
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-arm64e && cd build-arm64e
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=OS -DARCHS="arm64e" \
            -DDEPLOYMENT_TARGET=$IOS_DEPLOYMENT_TARGET -DENABLE_BITCODE=ON -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv4_cmake_options.txt` -DBUILD_opencv_world=ON -DOPENCV_DISABLE_FILESYSTEM_SUPPORT=ON ..
        cmake --build . -j 3
        cmake --build . --target install
    - name: package
      run: |
        rm -rf opencv2.framework
        mkdir -p opencv2.framework/Versions/A/Headers
        mkdir -p opencv2.framework/Versions/A/Resources
        ln -s A opencv2.framework/Versions/Current
        ln -s Versions/Current/Headers opencv2.framework/Headers
        ln -s Versions/Current/Resources opencv2.framework/Resources
        ln -s Versions/Current/opencv2 opencv2.framework/opencv2
        lipo -create \
            opencv-${{ env.OPENCV_VERSION }}/build-armv7/install/lib/libopencv_world.a \
            opencv-${{ env.OPENCV_VERSION }}/build-arm64/install/lib/libopencv_world.a \
            opencv-${{ env.OPENCV_VERSION }}/build-arm64e/install/lib/libopencv_world.a \
            -o opencv2.framework/Versions/A/opencv2
        cp -r opencv-${{ env.OPENCV_VERSION }}/build-arm64/install/include/opencv4/opencv2/* opencv2.framework/Versions/A/Headers/
        sed -e 's/__NAME__/OpenCV/g' -e 's/__IDENTIFIER__/org.opencv/g' -e 's/__VERSION__/${{ env.OPENCV_VERSION }}/g' Info.plist > opencv2.framework/Versions/A/Resources/Info.plist
        rm -f ${{ env.PACKAGENAME }}.zip
        zip -9 -y -r ${{ env.PACKAGENAME }}.zip opencv2.framework
    - name: test
      run: |
        cd test
        mkdir build && cd build
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=OS -DARCHS="armv7;arm64;arm64e" \
            -DDEPLOYMENT_TARGET=$IOS_DEPLOYMENT_TARGET -DENABLE_BITCODE=ON -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR=$GITHUB_WORKSPACE ..
        cmake --build . -j 3
    - name: upload-zip
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  ios-opencv3-bitcode:
    runs-on: macos-12
    env:
      OPENCV_VERSION: 3.4.20
      PACKAGENAME: opencv-mobile-3.4.20-ios-bitcode
    steps:
    - uses: actions/checkout@v3
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        echo -n > cmake/OpenCVFindLibsGrfmt.cmake
        patch -p1 -i ../opencv-3.4.20-no-rtti.patch
        patch -p1 -i ../opencv-3.4.20-no-zlib.patch
        patch -p1 -i ../opencv-3.4.20-link-openmp.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/
    - name: build-armv7
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-armv7 && cd build-armv7
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=OS -DARCHS="armv7" \
            -DDEPLOYMENT_TARGET=$IOS_DEPLOYMENT_TARGET -DENABLE_BITCODE=ON -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=ON ..
        cmake --build . -j 3
        cmake --build . --target install
    - name: build-arm64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-arm64 && cd build-arm64
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=OS -DARCHS="arm64" \
            -DDEPLOYMENT_TARGET=$IOS_DEPLOYMENT_TARGET -DENABLE_BITCODE=ON -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=ON ..
        cmake --build . -j 3
        cmake --build . --target install
    - name: build-arm64e
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-arm64e && cd build-arm64e
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=OS -DARCHS="arm64e" \
            -DDEPLOYMENT_TARGET=$IOS_DEPLOYMENT_TARGET -DENABLE_BITCODE=ON -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=ON ..
        cmake --build . -j 3
        cmake --build . --target install
    - name: package
      run: |
        rm -rf opencv2.framework
        mkdir -p opencv2.framework/Versions/A/Headers
        mkdir -p opencv2.framework/Versions/A/Resources
        ln -s A opencv2.framework/Versions/Current
        ln -s Versions/Current/Headers opencv2.framework/Headers
        ln -s Versions/Current/Resources opencv2.framework/Resources
        ln -s Versions/Current/opencv2 opencv2.framework/opencv2
        lipo -create \
            opencv-${{ env.OPENCV_VERSION }}/build-armv7/install/lib/libopencv_world.a \
            opencv-${{ env.OPENCV_VERSION }}/build-arm64/install/lib/libopencv_world.a \
            opencv-${{ env.OPENCV_VERSION }}/build-arm64e/install/lib/libopencv_world.a \
            -o opencv2.framework/Versions/A/opencv2
        cp -r opencv-${{ env.OPENCV_VERSION }}/build-arm64/install/include/opencv2/* opencv2.framework/Versions/A/Headers/
        sed -e 's/__NAME__/OpenCV/g' -e 's/__IDENTIFIER__/org.opencv/g' -e 's/__VERSION__/${{ env.OPENCV_VERSION }}/g' Info.plist > opencv2.framework/Versions/A/Resources/Info.plist
        rm -f ${{ env.PACKAGENAME }}.zip
        zip -9 -y -r ${{ env.PACKAGENAME }}.zip opencv2.framework
    - name: test
      run: |
        cd test
        mkdir build && cd build
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=OS -DARCHS="armv7;arm64;arm64e" \
            -DDEPLOYMENT_TARGET=$IOS_DEPLOYMENT_TARGET -DENABLE_BITCODE=ON -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR=$GITHUB_WORKSPACE ..
        cmake --build . -j 3
    - name: upload-zip
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  ios-opencv2-bitcode:
    runs-on: macos-12
    env:
      OPENCV_VERSION: 2.4.13.7
      PACKAGENAME: opencv-mobile-2.4.13.7-ios-bitcode
    steps:
    - uses: actions/checkout@v3
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        echo -n > cmake/OpenCVFindLibsGrfmt.cmake
        patch -p1 -i ../opencv-2.4.13.7-no-rtti.patch
        patch -p1 -i ../opencv-2.4.13.7-no-zlib.patch
        patch -p1 -i ../opencv-2.4.13.7-fix-highgui-include.patch
        patch -p1 -i ../opencv-2.4.13.7-no-link-stdc++.patch
        patch -p1 -i ../opencv-2.4.13.7-enable-cxx11.patch
        patch -p1 -i ../opencv-2.4.13.7-link-openmp.patch
        patch -p1 -i ../opencv-2.4.13.7-newer-msvc.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/

        # workaround ar @list issue on macos
        sed -i -e 's!\\"${objpath4}\\"!${objpath4}!g' modules/world/CMakeLists.txt

    - name: build-armv7
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-armv7 && cd build-armv7
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=OS -DARCHS="armv7" \
            -DDEPLOYMENT_TARGET=$IOS_DEPLOYMENT_TARGET -DENABLE_BITCODE=ON -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv2_cmake_options.txt` -DBUILD_opencv_world=ON ..
        cmake --build . -j 3 || echo "qaq"

        # workaround ar @list issue on macos
        cd modules/world
        /Applications/Xcode_13.4.1.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ar qc ../../lib/libopencv_world.a `cat world_objects.rsp` CMakeFiles/opencv_world.dir/src/world_init.cpp.o
        cd ../..

        cmake --build . --target install
    - name: build-arm64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-arm64 && cd build-arm64
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=OS -DARCHS="arm64" \
            -DDEPLOYMENT_TARGET=$IOS_DEPLOYMENT_TARGET -DENABLE_BITCODE=ON -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv2_cmake_options.txt` -DBUILD_opencv_world=ON ..
        cmake --build . -j 3 || echo "qaq"

        # workaround ar @list issue on macos
        cd modules/world
        /Applications/Xcode_13.4.1.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ar qc ../../lib/libopencv_world.a `cat world_objects.rsp` CMakeFiles/opencv_world.dir/src/world_init.cpp.o
        cd ../..

        cmake --build . --target install
    - name: build-arm64e
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-arm64e && cd build-arm64e
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=OS -DARCHS="arm64e" \
            -DDEPLOYMENT_TARGET=$IOS_DEPLOYMENT_TARGET -DENABLE_BITCODE=ON -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv2_cmake_options.txt` -DBUILD_opencv_world=ON ..
        cmake --build . -j 3 || echo "qaq"

        # workaround ar @list issue on macos
        cd modules/world
        /Applications/Xcode_13.4.1.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ar qc ../../lib/libopencv_world.a `cat world_objects.rsp` CMakeFiles/opencv_world.dir/src/world_init.cpp.o
        cd ../..

        cmake --build . --target install
    - name: package
      run: |
        rm -rf opencv2.framework
        mkdir -p opencv2.framework/Versions/A/Headers
        mkdir -p opencv2.framework/Versions/A/Resources
        ln -s A opencv2.framework/Versions/Current
        ln -s Versions/Current/Headers opencv2.framework/Headers
        ln -s Versions/Current/Resources opencv2.framework/Resources
        ln -s Versions/Current/opencv2 opencv2.framework/opencv2
        lipo -create \
            opencv-${{ env.OPENCV_VERSION }}/build-armv7/install/lib/libopencv_world.a \
            opencv-${{ env.OPENCV_VERSION }}/build-arm64/install/lib/libopencv_world.a \
            opencv-${{ env.OPENCV_VERSION }}/build-arm64e/install/lib/libopencv_world.a \
            -o opencv2.framework/Versions/A/opencv2
        cp -r opencv-${{ env.OPENCV_VERSION }}/build-arm64/install/include/opencv2/* opencv2.framework/Versions/A/Headers/
        sed -e 's/__NAME__/OpenCV/g' -e 's/__IDENTIFIER__/org.opencv/g' -e 's/__VERSION__/${{ env.OPENCV_VERSION }}/g' Info.plist > opencv2.framework/Versions/A/Resources/Info.plist
        rm -f ${{ env.PACKAGENAME }}.zip
        zip -9 -y -r ${{ env.PACKAGENAME }}.zip opencv2.framework
    - name: test
      run: |
        cd test
        mkdir build && cd build
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=OS -DARCHS="armv7;arm64;arm64e" \
            -DDEPLOYMENT_TARGET=$IOS_DEPLOYMENT_TARGET -DENABLE_BITCODE=ON -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR=$GITHUB_WORKSPACE ..
        cmake --build . -j 3
    - name: upload-zip
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  ios-simulator-opencv4:
    runs-on: macos-12
    env:
      OPENCV_VERSION: 4.8.1
      PACKAGENAME: opencv-mobile-4.8.1-ios-simulator
    steps:
    - uses: actions/checkout@v3
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        echo -n > cmake/OpenCVFindLibsGrfmt.cmake
        rm -rf modules/gapi
        patch -p1 -i ../opencv-4.8.1-no-rtti.patch
        patch -p1 -i ../opencv-4.8.1-no-zlib.patch
        patch -p1 -i ../opencv-4.8.1-link-openmp.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/
    - name: build-i386
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-i386 && cd build-i386
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=SIMULATOR -DARCHS="i386" \
            -DDEPLOYMENT_TARGET=$IOS_DEPLOYMENT_TARGET -DENABLE_BITCODE=$ENABLE_BITCODE -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv4_cmake_options.txt` -DBUILD_opencv_world=ON -DOPENCV_DISABLE_FILESYSTEM_SUPPORT=ON ..
        cmake --build . -j 3
        cmake --build . --target install
    - name: build-x86_64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x86_64 && cd build-x86_64
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=SIMULATOR -DARCHS="x86_64" \
            -DDEPLOYMENT_TARGET=$IOS_DEPLOYMENT_TARGET -DENABLE_BITCODE=$ENABLE_BITCODE -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv4_cmake_options.txt` -DBUILD_opencv_world=ON -DOPENCV_DISABLE_FILESYSTEM_SUPPORT=ON ..
        cmake --build . -j 3
        cmake --build . --target install
    - name: build-arm64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-arm64 && cd build-arm64
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=SIMULATOR -DARCHS="arm64" \
            -DDEPLOYMENT_TARGET=$IOS_DEPLOYMENT_TARGET -DENABLE_BITCODE=$ENABLE_BITCODE -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv4_cmake_options.txt` -DBUILD_opencv_world=ON -DOPENCV_DISABLE_FILESYSTEM_SUPPORT=ON ..
        cmake --build . -j 3
        cmake --build . --target install
    - name: package
      run: |
        rm -rf opencv2.framework
        mkdir -p opencv2.framework/Versions/A/Headers
        mkdir -p opencv2.framework/Versions/A/Resources
        ln -s A opencv2.framework/Versions/Current
        ln -s Versions/Current/Headers opencv2.framework/Headers
        ln -s Versions/Current/Resources opencv2.framework/Resources
        ln -s Versions/Current/opencv2 opencv2.framework/opencv2
        lipo -create \
            opencv-${{ env.OPENCV_VERSION }}/build-i386/install/lib/libopencv_world.a \
            opencv-${{ env.OPENCV_VERSION }}/build-x86_64/install/lib/libopencv_world.a \
            opencv-${{ env.OPENCV_VERSION }}/build-arm64/install/lib/libopencv_world.a \
            -o opencv2.framework/Versions/A/opencv2
        cp -r opencv-${{ env.OPENCV_VERSION }}/build-x86_64/install/include/opencv4/opencv2/* opencv2.framework/Versions/A/Headers/
        sed -e 's/__NAME__/OpenCV/g' -e 's/__IDENTIFIER__/org.opencv/g' -e 's/__VERSION__/${{ env.OPENCV_VERSION }}/g' Info.plist > opencv2.framework/Versions/A/Resources/Info.plist
        rm -f ${{ env.PACKAGENAME }}.zip
        zip -9 -y -r ${{ env.PACKAGENAME }}.zip opencv2.framework
    - name: test
      run: |
        cd test
        mkdir build && cd build
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=SIMULATOR -DARCHS="i386;x86_64;arm64" \
            -DDEPLOYMENT_TARGET=$IOS_DEPLOYMENT_TARGET -DENABLE_BITCODE=$ENABLE_BITCODE -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR=$GITHUB_WORKSPACE ..
        cmake --build . -j 3
    - name: upload-zip
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  ios-simulator-opencv3:
    runs-on: macos-12
    env:
      OPENCV_VERSION: 3.4.20
      PACKAGENAME: opencv-mobile-3.4.20-ios-simulator
    steps:
    - uses: actions/checkout@v3
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        echo -n > cmake/OpenCVFindLibsGrfmt.cmake
        patch -p1 -i ../opencv-3.4.20-no-rtti.patch
        patch -p1 -i ../opencv-3.4.20-no-zlib.patch
        patch -p1 -i ../opencv-3.4.20-link-openmp.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/
    - name: build-i386
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-i386 && cd build-i386
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=SIMULATOR -DARCHS="i386" \
            -DDEPLOYMENT_TARGET=$IOS_DEPLOYMENT_TARGET -DENABLE_BITCODE=$ENABLE_BITCODE -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=ON ..
        cmake --build . -j 3
        cmake --build . --target install
    - name: build-x86_64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x86_64 && cd build-x86_64
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=SIMULATOR -DARCHS="x86_64" \
            -DDEPLOYMENT_TARGET=$IOS_DEPLOYMENT_TARGET -DENABLE_BITCODE=$ENABLE_BITCODE -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=ON ..
        cmake --build . -j 3
        cmake --build . --target install
    - name: build-arm64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-arm64 && cd build-arm64
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=SIMULATOR -DARCHS="arm64" \
            -DDEPLOYMENT_TARGET=$IOS_DEPLOYMENT_TARGET -DENABLE_BITCODE=$ENABLE_BITCODE -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=ON ..
        cmake --build . -j 3
        cmake --build . --target install
    - name: package
      run: |
        rm -rf opencv2.framework
        mkdir -p opencv2.framework/Versions/A/Headers
        mkdir -p opencv2.framework/Versions/A/Resources
        ln -s A opencv2.framework/Versions/Current
        ln -s Versions/Current/Headers opencv2.framework/Headers
        ln -s Versions/Current/Resources opencv2.framework/Resources
        ln -s Versions/Current/opencv2 opencv2.framework/opencv2
        lipo -create \
            opencv-${{ env.OPENCV_VERSION }}/build-i386/install/lib/libopencv_world.a \
            opencv-${{ env.OPENCV_VERSION }}/build-x86_64/install/lib/libopencv_world.a \
            opencv-${{ env.OPENCV_VERSION }}/build-arm64/install/lib/libopencv_world.a \
            -o opencv2.framework/Versions/A/opencv2
        cp -r opencv-${{ env.OPENCV_VERSION }}/build-x86_64/install/include/opencv2/* opencv2.framework/Versions/A/Headers/
        sed -e 's/__NAME__/OpenCV/g' -e 's/__IDENTIFIER__/org.opencv/g' -e 's/__VERSION__/${{ env.OPENCV_VERSION }}/g' Info.plist > opencv2.framework/Versions/A/Resources/Info.plist
        rm -f ${{ env.PACKAGENAME }}.zip
        zip -9 -y -r ${{ env.PACKAGENAME }}.zip opencv2.framework
    - name: test
      run: |
        cd test
        mkdir build && cd build
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=SIMULATOR -DARCHS="i386;x86_64;arm64" \
            -DDEPLOYMENT_TARGET=$IOS_DEPLOYMENT_TARGET -DENABLE_BITCODE=$ENABLE_BITCODE -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR=$GITHUB_WORKSPACE ..
        cmake --build . -j 3
    - name: upload-zip
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  ios-simulator-opencv2:
    runs-on: macos-12
    env:
      OPENCV_VERSION: 2.4.13.7
      PACKAGENAME: opencv-mobile-2.4.13.7-ios-simulator
    steps:
    - uses: actions/checkout@v3
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        echo -n > cmake/OpenCVFindLibsGrfmt.cmake
        patch -p1 -i ../opencv-2.4.13.7-no-rtti.patch
        patch -p1 -i ../opencv-2.4.13.7-no-zlib.patch
        patch -p1 -i ../opencv-2.4.13.7-fix-highgui-include.patch
        patch -p1 -i ../opencv-2.4.13.7-no-link-stdc++.patch
        patch -p1 -i ../opencv-2.4.13.7-enable-cxx11.patch
        patch -p1 -i ../opencv-2.4.13.7-link-openmp.patch
        patch -p1 -i ../opencv-2.4.13.7-newer-msvc.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/

        # workaround ar @list issue on macos
        sed -i -e 's!\\"${objpath4}\\"!${objpath4}!g' modules/world/CMakeLists.txt

    - name: build-i386
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-i386 && cd build-i386
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=SIMULATOR -DARCHS="i386" \
            -DDEPLOYMENT_TARGET=$IOS_DEPLOYMENT_TARGET -DENABLE_BITCODE=$ENABLE_BITCODE -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv2_cmake_options.txt` -DBUILD_opencv_world=ON ..
        cmake --build . -j 3 || echo "qaq"

        # workaround ar @list issue on macos
        cd modules/world
        /Applications/Xcode_13.4.1.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ar qc ../../lib/libopencv_world.a `cat world_objects.rsp` CMakeFiles/opencv_world.dir/src/world_init.cpp.o
        cd ../..

        cmake --build . --target install
    - name: build-x86_64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x86_64 && cd build-x86_64
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=SIMULATOR -DARCHS="x86_64" \
            -DDEPLOYMENT_TARGET=$IOS_DEPLOYMENT_TARGET -DENABLE_BITCODE=$ENABLE_BITCODE -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv2_cmake_options.txt` -DBUILD_opencv_world=ON ..
        cmake --build . -j 3 || echo "qaq"

        # workaround ar @list issue on macos
        cd modules/world
        /Applications/Xcode_13.4.1.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ar qc ../../lib/libopencv_world.a `cat world_objects.rsp` CMakeFiles/opencv_world.dir/src/world_init.cpp.o
        cd ../..

        cmake --build . --target install
    - name: build-arm64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-arm64 && cd build-arm64
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=SIMULATOR -DARCHS="arm64" \
            -DDEPLOYMENT_TARGET=$IOS_DEPLOYMENT_TARGET -DENABLE_BITCODE=$ENABLE_BITCODE -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv2_cmake_options.txt` -DBUILD_opencv_world=ON ..
        cmake --build . -j 3 || echo "qaq"

        # workaround ar @list issue on macos
        cd modules/world
        /Applications/Xcode_13.4.1.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ar qc ../../lib/libopencv_world.a `cat world_objects.rsp` CMakeFiles/opencv_world.dir/src/world_init.cpp.o
        cd ../..

        cmake --build . --target install
    - name: package
      run: |
        rm -rf opencv2.framework
        mkdir -p opencv2.framework/Versions/A/Headers
        mkdir -p opencv2.framework/Versions/A/Resources
        ln -s A opencv2.framework/Versions/Current
        ln -s Versions/Current/Headers opencv2.framework/Headers
        ln -s Versions/Current/Resources opencv2.framework/Resources
        ln -s Versions/Current/opencv2 opencv2.framework/opencv2
        lipo -create \
            opencv-${{ env.OPENCV_VERSION }}/build-i386/install/lib/libopencv_world.a \
            opencv-${{ env.OPENCV_VERSION }}/build-x86_64/install/lib/libopencv_world.a \
            opencv-${{ env.OPENCV_VERSION }}/build-arm64/install/lib/libopencv_world.a \
            -o opencv2.framework/Versions/A/opencv2
        cp -r opencv-${{ env.OPENCV_VERSION }}/build-x86_64/install/include/opencv2/* opencv2.framework/Versions/A/Headers/
        sed -e 's/__NAME__/OpenCV/g' -e 's/__IDENTIFIER__/org.opencv/g' -e 's/__VERSION__/${{ env.OPENCV_VERSION }}/g' Info.plist > opencv2.framework/Versions/A/Resources/Info.plist
        rm -f ${{ env.PACKAGENAME }}.zip
        zip -9 -y -r ${{ env.PACKAGENAME }}.zip opencv2.framework
    - name: test
      run: |
        cd test
        mkdir build && cd build
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=SIMULATOR -DARCHS="i386;x86_64;arm64" \
            -DDEPLOYMENT_TARGET=$IOS_DEPLOYMENT_TARGET -DENABLE_BITCODE=$ENABLE_BITCODE -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR=$GITHUB_WORKSPACE ..
        cmake --build . -j 3
    - name: upload-zip
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  ios-simulator-opencv4-bitcode:
    runs-on: macos-12
    env:
      OPENCV_VERSION: 4.8.1
      PACKAGENAME: opencv-mobile-4.8.1-ios-simulator-bitcode
    steps:
    - uses: actions/checkout@v3
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        echo -n > cmake/OpenCVFindLibsGrfmt.cmake
        rm -rf modules/gapi
        patch -p1 -i ../opencv-4.8.1-no-rtti.patch
        patch -p1 -i ../opencv-4.8.1-no-zlib.patch
        patch -p1 -i ../opencv-4.8.1-link-openmp.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/
    - name: build-i386
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-i386 && cd build-i386
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=SIMULATOR -DARCHS="i386" \
            -DDEPLOYMENT_TARGET=$IOS_DEPLOYMENT_TARGET -DENABLE_BITCODE=ON -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv4_cmake_options.txt` -DBUILD_opencv_world=ON -DOPENCV_DISABLE_FILESYSTEM_SUPPORT=ON ..
        cmake --build . -j 3
        cmake --build . --target install
    - name: build-x86_64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x86_64 && cd build-x86_64
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=SIMULATOR -DARCHS="x86_64" \
            -DDEPLOYMENT_TARGET=$IOS_DEPLOYMENT_TARGET -DENABLE_BITCODE=ON -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv4_cmake_options.txt` -DBUILD_opencv_world=ON -DOPENCV_DISABLE_FILESYSTEM_SUPPORT=ON ..
        cmake --build . -j 3
        cmake --build . --target install
    - name: build-arm64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-arm64 && cd build-arm64
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=SIMULATOR -DARCHS="arm64" \
            -DDEPLOYMENT_TARGET=$IOS_DEPLOYMENT_TARGET -DENABLE_BITCODE=ON -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv4_cmake_options.txt` -DBUILD_opencv_world=ON -DOPENCV_DISABLE_FILESYSTEM_SUPPORT=ON ..
        cmake --build . -j 3
        cmake --build . --target install
    - name: package
      run: |
        rm -rf opencv2.framework
        mkdir -p opencv2.framework/Versions/A/Headers
        mkdir -p opencv2.framework/Versions/A/Resources
        ln -s A opencv2.framework/Versions/Current
        ln -s Versions/Current/Headers opencv2.framework/Headers
        ln -s Versions/Current/Resources opencv2.framework/Resources
        ln -s Versions/Current/opencv2 opencv2.framework/opencv2
        lipo -create \
            opencv-${{ env.OPENCV_VERSION }}/build-i386/install/lib/libopencv_world.a \
            opencv-${{ env.OPENCV_VERSION }}/build-x86_64/install/lib/libopencv_world.a \
            opencv-${{ env.OPENCV_VERSION }}/build-arm64/install/lib/libopencv_world.a \
            -o opencv2.framework/Versions/A/opencv2
        cp -r opencv-${{ env.OPENCV_VERSION }}/build-x86_64/install/include/opencv4/opencv2/* opencv2.framework/Versions/A/Headers/
        sed -e 's/__NAME__/OpenCV/g' -e 's/__IDENTIFIER__/org.opencv/g' -e 's/__VERSION__/${{ env.OPENCV_VERSION }}/g' Info.plist > opencv2.framework/Versions/A/Resources/Info.plist
        rm -f ${{ env.PACKAGENAME }}.zip
        zip -9 -y -r ${{ env.PACKAGENAME }}.zip opencv2.framework
    - name: test
      run: |
        cd test
        mkdir build && cd build
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=SIMULATOR -DARCHS="i386;x86_64;arm64" \
            -DDEPLOYMENT_TARGET=$IOS_DEPLOYMENT_TARGET -DENABLE_BITCODE=ON -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR=$GITHUB_WORKSPACE ..
        cmake --build . -j 3
    - name: upload-zip
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  ios-simulator-opencv3-bitcode:
    runs-on: macos-12
    env:
      OPENCV_VERSION: 3.4.20
      PACKAGENAME: opencv-mobile-3.4.20-ios-simulator-bitcode
    steps:
    - uses: actions/checkout@v3
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        echo -n > cmake/OpenCVFindLibsGrfmt.cmake
        patch -p1 -i ../opencv-3.4.20-no-rtti.patch
        patch -p1 -i ../opencv-3.4.20-no-zlib.patch
        patch -p1 -i ../opencv-3.4.20-link-openmp.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/
    - name: build-i386
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-i386 && cd build-i386
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=SIMULATOR -DARCHS="i386" \
            -DDEPLOYMENT_TARGET=$IOS_DEPLOYMENT_TARGET -DENABLE_BITCODE=ON -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=ON ..
        cmake --build . -j 3
        cmake --build . --target install
    - name: build-x86_64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x86_64 && cd build-x86_64
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=SIMULATOR -DARCHS="x86_64" \
            -DDEPLOYMENT_TARGET=$IOS_DEPLOYMENT_TARGET -DENABLE_BITCODE=ON -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=ON ..
        cmake --build . -j 3
        cmake --build . --target install
    - name: build-arm64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-arm64 && cd build-arm64
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=SIMULATOR -DARCHS="arm64" \
            -DDEPLOYMENT_TARGET=$IOS_DEPLOYMENT_TARGET -DENABLE_BITCODE=ON -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=ON ..
        cmake --build . -j 3
        cmake --build . --target install
    - name: package
      run: |
        rm -rf opencv2.framework
        mkdir -p opencv2.framework/Versions/A/Headers
        mkdir -p opencv2.framework/Versions/A/Resources
        ln -s A opencv2.framework/Versions/Current
        ln -s Versions/Current/Headers opencv2.framework/Headers
        ln -s Versions/Current/Resources opencv2.framework/Resources
        ln -s Versions/Current/opencv2 opencv2.framework/opencv2
        lipo -create \
            opencv-${{ env.OPENCV_VERSION }}/build-i386/install/lib/libopencv_world.a \
            opencv-${{ env.OPENCV_VERSION }}/build-x86_64/install/lib/libopencv_world.a \
            opencv-${{ env.OPENCV_VERSION }}/build-arm64/install/lib/libopencv_world.a \
            -o opencv2.framework/Versions/A/opencv2
        cp -r opencv-${{ env.OPENCV_VERSION }}/build-x86_64/install/include/opencv2/* opencv2.framework/Versions/A/Headers/
        sed -e 's/__NAME__/OpenCV/g' -e 's/__IDENTIFIER__/org.opencv/g' -e 's/__VERSION__/${{ env.OPENCV_VERSION }}/g' Info.plist > opencv2.framework/Versions/A/Resources/Info.plist
        rm -f ${{ env.PACKAGENAME }}.zip
        zip -9 -y -r ${{ env.PACKAGENAME }}.zip opencv2.framework
    - name: test
      run: |
        cd test
        mkdir build && cd build
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=SIMULATOR -DARCHS="i386;x86_64;arm64" \
            -DDEPLOYMENT_TARGET=$IOS_DEPLOYMENT_TARGET -DENABLE_BITCODE=ON -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR=$GITHUB_WORKSPACE ..
        cmake --build . -j 3
    - name: upload-zip
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  ios-simulator-opencv2-bitcode:
    runs-on: macos-12
    env:
      OPENCV_VERSION: 2.4.13.7
      PACKAGENAME: opencv-mobile-2.4.13.7-ios-simulator-bitcode
    steps:
    - uses: actions/checkout@v3
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        echo -n > cmake/OpenCVFindLibsGrfmt.cmake
        patch -p1 -i ../opencv-2.4.13.7-no-rtti.patch
        patch -p1 -i ../opencv-2.4.13.7-no-zlib.patch
        patch -p1 -i ../opencv-2.4.13.7-fix-highgui-include.patch
        patch -p1 -i ../opencv-2.4.13.7-no-link-stdc++.patch
        patch -p1 -i ../opencv-2.4.13.7-enable-cxx11.patch
        patch -p1 -i ../opencv-2.4.13.7-link-openmp.patch
        patch -p1 -i ../opencv-2.4.13.7-newer-msvc.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/

        # workaround ar @list issue on macos
        sed -i -e 's!\\"${objpath4}\\"!${objpath4}!g' modules/world/CMakeLists.txt

    - name: build-i386
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-i386 && cd build-i386
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=SIMULATOR -DARCHS="i386" \
            -DDEPLOYMENT_TARGET=$IOS_DEPLOYMENT_TARGET -DENABLE_BITCODE=ON -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv2_cmake_options.txt` -DBUILD_opencv_world=ON ..
        cmake --build . -j 3 || echo "qaq"

        # workaround ar @list issue on macos
        cd modules/world
        /Applications/Xcode_13.4.1.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ar qc ../../lib/libopencv_world.a `cat world_objects.rsp` CMakeFiles/opencv_world.dir/src/world_init.cpp.o
        cd ../..

        cmake --build . --target install
    - name: build-x86_64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x86_64 && cd build-x86_64
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=SIMULATOR -DARCHS="x86_64" \
            -DDEPLOYMENT_TARGET=$IOS_DEPLOYMENT_TARGET -DENABLE_BITCODE=ON -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv2_cmake_options.txt` -DBUILD_opencv_world=ON ..
        cmake --build . -j 3 || echo "qaq"

        # workaround ar @list issue on macos
        cd modules/world
        /Applications/Xcode_13.4.1.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ar qc ../../lib/libopencv_world.a `cat world_objects.rsp` CMakeFiles/opencv_world.dir/src/world_init.cpp.o
        cd ../..

        cmake --build . --target install
    - name: build-arm64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-arm64 && cd build-arm64
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=SIMULATOR -DARCHS="arm64" \
            -DDEPLOYMENT_TARGET=$IOS_DEPLOYMENT_TARGET -DENABLE_BITCODE=ON -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv2_cmake_options.txt` -DBUILD_opencv_world=ON ..
        cmake --build . -j 3 || echo "qaq"

        # workaround ar @list issue on macos
        cd modules/world
        /Applications/Xcode_13.4.1.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ar qc ../../lib/libopencv_world.a `cat world_objects.rsp` CMakeFiles/opencv_world.dir/src/world_init.cpp.o
        cd ../..

        cmake --build . --target install
    - name: package
      run: |
        rm -rf opencv2.framework
        mkdir -p opencv2.framework/Versions/A/Headers
        mkdir -p opencv2.framework/Versions/A/Resources
        ln -s A opencv2.framework/Versions/Current
        ln -s Versions/Current/Headers opencv2.framework/Headers
        ln -s Versions/Current/Resources opencv2.framework/Resources
        ln -s Versions/Current/opencv2 opencv2.framework/opencv2
        lipo -create \
            opencv-${{ env.OPENCV_VERSION }}/build-i386/install/lib/libopencv_world.a \
            opencv-${{ env.OPENCV_VERSION }}/build-x86_64/install/lib/libopencv_world.a \
            opencv-${{ env.OPENCV_VERSION }}/build-arm64/install/lib/libopencv_world.a \
            -o opencv2.framework/Versions/A/opencv2
        cp -r opencv-${{ env.OPENCV_VERSION }}/build-x86_64/install/include/opencv2/* opencv2.framework/Versions/A/Headers/
        sed -e 's/__NAME__/OpenCV/g' -e 's/__IDENTIFIER__/org.opencv/g' -e 's/__VERSION__/${{ env.OPENCV_VERSION }}/g' Info.plist > opencv2.framework/Versions/A/Resources/Info.plist
        rm -f ${{ env.PACKAGENAME }}.zip
        zip -9 -y -r ${{ env.PACKAGENAME }}.zip opencv2.framework
    - name: test
      run: |
        cd test
        mkdir build && cd build
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=SIMULATOR -DARCHS="i386;x86_64;arm64" \
            -DDEPLOYMENT_TARGET=$IOS_DEPLOYMENT_TARGET -DENABLE_BITCODE=ON -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR=$GITHUB_WORKSPACE ..
        cmake --build . -j 3
    - name: upload-zip
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  armlinux-opencv4:
    runs-on: ubuntu-latest
    env:
      OPENCV_VERSION: 4.8.1
      PACKAGENAME: opencv-mobile-4.8.1-armlinux
    steps:
    - name: arm-gnu-toolchain
      run: |
        sudo apt-get update
        sudo apt-get install g++-arm-linux-gnueabi g++-arm-linux-gnueabihf g++-aarch64-linux-gnu

    - uses: actions/checkout@v3
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        truncate -s 0 cmake/OpenCVFindLibsGrfmt.cmake
        rm -rf modules/gapi
        patch -p1 -i ../opencv-4.8.1-no-rtti.patch
        patch -p1 -i ../opencv-4.8.1-no-zlib.patch
        patch -p1 -i ../opencv-4.8.1-link-openmp.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/
    - name: build-arm-linux-gnueabi
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-arm-linux-gnueabi && cd build-arm-linux-gnueabi
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/arm-linux-gnueabi.toolchain.cmake \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv4_cmake_options.txt` -DBUILD_opencv_world=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-arm-linux-gnueabihf
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-arm-linux-gnueabihf && cd build-arm-linux-gnueabihf
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/arm-linux-gnueabihf.toolchain.cmake \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv4_cmake_options.txt` -DBUILD_opencv_world=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-aarch64-linux-gnu
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-aarch64-linux-gnu && cd build-aarch64-linux-gnu
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/aarch64-linux-gnu.toolchain.cmake \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv4_cmake_options.txt` -DBUILD_opencv_world=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package
      run: |
        mkdir ${{ env.PACKAGENAME }}
        mkdir ${{ env.PACKAGENAME }}/arm-linux-gnueabi
        mkdir ${{ env.PACKAGENAME }}/arm-linux-gnueabihf
        mkdir ${{ env.PACKAGENAME }}/aarch64-linux-gnu
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-arm-linux-gnueabi/install/* ${{ env.PACKAGENAME }}/arm-linux-gnueabi/
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-arm-linux-gnueabihf/install/* ${{ env.PACKAGENAME }}/arm-linux-gnueabihf/
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-aarch64-linux-gnu/install/* ${{ env.PACKAGENAME }}/aarch64-linux-gnu/
        rm -rf ${{ env.PACKAGENAME }}/arm-linux-gnueabi/share/opencv4
        rm -rf ${{ env.PACKAGENAME }}/arm-linux-gnueabihf/share/opencv4
        rm -rf ${{ env.PACKAGENAME }}/aarch64-linux-gnu/share/opencv4
        zip -9 -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: test-arm-linux-gnueabi
      run: |
        cd test
        mkdir build-arm-linux-gnueabi && cd build-arm-linux-gnueabi
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/arm-linux-gnueabi.toolchain.cmake \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR=$GITHUB_WORKSPACE/${{ env.PACKAGENAME }}/arm-linux-gnueabi/lib/cmake/opencv4 ..
        cmake --build . -j 2
    - name: test-arm-linux-gnueabihf
      run: |
        cd test
        mkdir build-arm-linux-gnueabihf && cd build-arm-linux-gnueabihf
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/arm-linux-gnueabihf.toolchain.cmake \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR=$GITHUB_WORKSPACE/${{ env.PACKAGENAME }}/arm-linux-gnueabihf/lib/cmake/opencv4 ..
        cmake --build . -j 2
    - name: test-aarch64-linux-gnu
      run: |
        cd test
        mkdir build-aarch64-linux-gnu && cd build-aarch64-linux-gnu
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/aarch64-linux-gnu.toolchain.cmake \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR=$GITHUB_WORKSPACE/${{ env.PACKAGENAME }}/aarch64-linux-gnu/lib/cmake/opencv4 ..
        cmake --build . -j 2
    - name: upload-zip
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  armlinux-opencv3:
    runs-on: ubuntu-latest
    env:
      OPENCV_VERSION: 3.4.20
      PACKAGENAME: opencv-mobile-3.4.20-armlinux
    steps:
    - name: arm-gnu-toolchain
      run: |
        sudo apt-get update
        sudo apt-get install g++-arm-linux-gnueabi g++-arm-linux-gnueabihf g++-aarch64-linux-gnu

    - uses: actions/checkout@v3
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        truncate -s 0 cmake/OpenCVFindLibsGrfmt.cmake
        patch -p1 -i ../opencv-3.4.20-no-rtti.patch
        patch -p1 -i ../opencv-3.4.20-no-zlib.patch
        patch -p1 -i ../opencv-3.4.20-link-openmp.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/
    - name: build-arm-linux-gnueabi
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-arm-linux-gnueabi && cd build-arm-linux-gnueabi
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/arm-linux-gnueabi.toolchain.cmake \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-arm-linux-gnueabihf
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-arm-linux-gnueabihf && cd build-arm-linux-gnueabihf
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/arm-linux-gnueabihf.toolchain.cmake \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-aarch64-linux-gnu
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-aarch64-linux-gnu && cd build-aarch64-linux-gnu
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/aarch64-linux-gnu.toolchain.cmake \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package
      run: |
        mkdir ${{ env.PACKAGENAME }}
        mkdir ${{ env.PACKAGENAME }}/arm-linux-gnueabi
        mkdir ${{ env.PACKAGENAME }}/arm-linux-gnueabihf
        mkdir ${{ env.PACKAGENAME }}/aarch64-linux-gnu
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-arm-linux-gnueabi/install/* ${{ env.PACKAGENAME }}/arm-linux-gnueabi/
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-arm-linux-gnueabihf/install/* ${{ env.PACKAGENAME }}/arm-linux-gnueabihf/
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-aarch64-linux-gnu/install/* ${{ env.PACKAGENAME }}/aarch64-linux-gnu/
        rm -rf ${{ env.PACKAGENAME }}/arm-linux-gnueabi/share/OpenCV/haarcascades
        rm -rf ${{ env.PACKAGENAME }}/arm-linux-gnueabi/share/OpenCV/lbpcascades
        rm -rf ${{ env.PACKAGENAME }}/arm-linux-gnueabi/share/OpenCV/valgrind.supp
        rm -rf ${{ env.PACKAGENAME }}/arm-linux-gnueabi/share/OpenCV/valgrind_3rdparty.supp
        rm -rf ${{ env.PACKAGENAME }}/arm-linux-gnueabihf/share/OpenCV/haarcascades
        rm -rf ${{ env.PACKAGENAME }}/arm-linux-gnueabihf/share/OpenCV/lbpcascades
        rm -rf ${{ env.PACKAGENAME }}/arm-linux-gnueabihf/share/OpenCV/valgrind.supp
        rm -rf ${{ env.PACKAGENAME }}/arm-linux-gnueabihf/share/OpenCV/valgrind_3rdparty.supp
        rm -rf ${{ env.PACKAGENAME }}/aarch64-linux-gnu/share/OpenCV/haarcascades
        rm -rf ${{ env.PACKAGENAME }}/aarch64-linux-gnu/share/OpenCV/lbpcascades
        rm -rf ${{ env.PACKAGENAME }}/aarch64-linux-gnu/share/OpenCV/valgrind.supp
        rm -rf ${{ env.PACKAGENAME }}/aarch64-linux-gnu/share/OpenCV/valgrind_3rdparty.supp
        zip -9 -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: test-arm-linux-gnueabi
      run: |
        cd test
        mkdir build-arm-linux-gnueabi && cd build-arm-linux-gnueabi
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/arm-linux-gnueabi.toolchain.cmake \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR=$GITHUB_WORKSPACE/${{ env.PACKAGENAME }}/arm-linux-gnueabi/share/OpenCV ..
        cmake --build . -j 2
    - name: test-arm-linux-gnueabihf
      run: |
        cd test
        mkdir build-arm-linux-gnueabihf && cd build-arm-linux-gnueabihf
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/arm-linux-gnueabihf.toolchain.cmake \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR=$GITHUB_WORKSPACE/${{ env.PACKAGENAME }}/arm-linux-gnueabihf/share/OpenCV ..
        cmake --build . -j 2
    - name: test-aarch64-linux-gnu
      run: |
        cd test
        mkdir build-aarch64-linux-gnu && cd build-aarch64-linux-gnu
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/aarch64-linux-gnu.toolchain.cmake \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR=$GITHUB_WORKSPACE/${{ env.PACKAGENAME }}/aarch64-linux-gnu/share/OpenCV ..
        cmake --build . -j 2
    - name: upload-zip
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  armlinux-opencv2:
    runs-on: ubuntu-latest
    env:
      OPENCV_VERSION: 2.4.13.7
      PACKAGENAME: opencv-mobile-2.4.13.7-armlinux
    steps:
    - name: arm-gnu-toolchain
      run: |
        sudo apt-get update
        sudo apt-get install g++-arm-linux-gnueabi g++-arm-linux-gnueabihf g++-aarch64-linux-gnu

    - uses: actions/checkout@v3
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        truncate -s 0 cmake/OpenCVFindLibsGrfmt.cmake
        patch -p1 -i ../opencv-2.4.13.7-no-rtti.patch
        patch -p1 -i ../opencv-2.4.13.7-no-zlib.patch
        patch -p1 -i ../opencv-2.4.13.7-fix-highgui-include.patch
        patch -p1 -i ../opencv-2.4.13.7-no-link-stdc++.patch
        patch -p1 -i ../opencv-2.4.13.7-enable-cxx11.patch
        patch -p1 -i ../opencv-2.4.13.7-link-openmp.patch
        patch -p1 -i ../opencv-2.4.13.7-newer-msvc.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/
    - name: build-arm-linux-gnueabi
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-arm-linux-gnueabi && cd build-arm-linux-gnueabi
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/arm-linux-gnueabi.toolchain.cmake \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv2_cmake_options.txt` -DBUILD_opencv_world=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-arm-linux-gnueabihf
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-arm-linux-gnueabihf && cd build-arm-linux-gnueabihf
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/arm-linux-gnueabihf.toolchain.cmake \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv2_cmake_options.txt` -DBUILD_opencv_world=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-aarch64-linux-gnu
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-aarch64-linux-gnu && cd build-aarch64-linux-gnu
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/aarch64-linux-gnu.toolchain.cmake \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv2_cmake_options.txt` -DBUILD_opencv_world=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package
      run: |
        mkdir ${{ env.PACKAGENAME }}
        mkdir ${{ env.PACKAGENAME }}/arm-linux-gnueabi
        mkdir ${{ env.PACKAGENAME }}/arm-linux-gnueabihf
        mkdir ${{ env.PACKAGENAME }}/aarch64-linux-gnu
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-arm-linux-gnueabi/install/* ${{ env.PACKAGENAME }}/arm-linux-gnueabi/
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-arm-linux-gnueabihf/install/* ${{ env.PACKAGENAME }}/arm-linux-gnueabihf/
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-aarch64-linux-gnu/install/* ${{ env.PACKAGENAME }}/aarch64-linux-gnu/
        rm -rf ${{ env.PACKAGENAME }}/arm-linux-gnueabi/share/OpenCV/haarcascades
        rm -rf ${{ env.PACKAGENAME }}/arm-linux-gnueabi/share/OpenCV/lbpcascades
        rm -rf ${{ env.PACKAGENAME }}/arm-linux-gnueabihf/share/OpenCV/haarcascades
        rm -rf ${{ env.PACKAGENAME }}/arm-linux-gnueabihf/share/OpenCV/lbpcascades
        rm -rf ${{ env.PACKAGENAME }}/aarch64-linux-gnu/share/OpenCV/haarcascades
        rm -rf ${{ env.PACKAGENAME }}/aarch64-linux-gnu/share/OpenCV/lbpcascades
        zip -9 -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: test-arm-linux-gnueabi
      run: |
        cd test
        mkdir build-arm-linux-gnueabi && cd build-arm-linux-gnueabi
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/arm-linux-gnueabi.toolchain.cmake \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR=$GITHUB_WORKSPACE/${{ env.PACKAGENAME }}/arm-linux-gnueabi/share/OpenCV ..
        cmake --build . -j 2
    - name: test-arm-linux-gnueabihf
      run: |
        cd test
        mkdir build-arm-linux-gnueabihf && cd build-arm-linux-gnueabihf
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/arm-linux-gnueabihf.toolchain.cmake \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR=$GITHUB_WORKSPACE/${{ env.PACKAGENAME }}/arm-linux-gnueabihf/share/OpenCV ..
        cmake --build . -j 2
    - name: test-aarch64-linux-gnu
      run: |
        cd test
        mkdir build-aarch64-linux-gnu && cd build-aarch64-linux-gnu
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/aarch64-linux-gnu.toolchain.cmake \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR=$GITHUB_WORKSPACE/${{ env.PACKAGENAME }}/aarch64-linux-gnu/share/OpenCV ..
        cmake --build . -j 2
    - name: upload-zip
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  macos-opencv4:
    runs-on: macos-12
    env:
      OPENCV_VERSION: 4.8.1
      PACKAGENAME: opencv-mobile-4.8.1-macos
    steps:
    - uses: actions/checkout@v3
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        echo -n > cmake/OpenCVFindLibsGrfmt.cmake
        rm -rf modules/gapi
        patch -p1 -i ../opencv-4.8.1-no-zlib.patch
        patch -p1 -i ../opencv-4.8.1-link-openmp.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/
    - name: build-x86_64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x86_64 && cd build-x86_64
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=MAC -DARCHS="x86_64" \
            -DDEPLOYMENT_TARGET=$MAC_DEPLOYMENT_TARGET -DENABLE_BITCODE=$ENABLE_BITCODE -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv4_cmake_options.txt` -DBUILD_opencv_world=ON ..
        cmake --build . -j 3
        cmake --build . --target install
    - name: build-arm64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-arm64 && cd build-arm64
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=MAC_ARM64 -DARCHS="arm64" \
            -DDEPLOYMENT_TARGET=$MAC_ARM64_DEPLOYMENT_TARGET -DENABLE_BITCODE=$ENABLE_BITCODE -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv4_cmake_options.txt` -DBUILD_opencv_world=ON ..
        cmake --build . -j 3
        cmake --build . --target install
    - name: package
      run: |
        rm -rf opencv2.framework
        mkdir -p opencv2.framework/Versions/A/Headers
        mkdir -p opencv2.framework/Versions/A/Resources
        ln -s A opencv2.framework/Versions/Current
        ln -s Versions/Current/Headers opencv2.framework/Headers
        ln -s Versions/Current/Resources opencv2.framework/Resources
        ln -s Versions/Current/opencv2 opencv2.framework/opencv2
        lipo -create opencv-${{ env.OPENCV_VERSION }}/build-x86_64/install/lib/libopencv_world.a opencv-${{ env.OPENCV_VERSION }}/build-arm64/install/lib/libopencv_world.a -o opencv2.framework/Versions/A/opencv2
        cp -r opencv-${{ env.OPENCV_VERSION }}/build-x86_64/install/include/opencv4/opencv2/* opencv2.framework/Versions/A/Headers/
        sed -e 's/__NAME__/OpenCV/g' -e 's/__IDENTIFIER__/org.opencv/g' -e 's/__VERSION__/${{ env.OPENCV_VERSION }}/g' Info.plist > opencv2.framework/Versions/A/Resources/Info.plist
        rm -f ${{ env.PACKAGENAME }}.zip
        zip -9 -y -r ${{ env.PACKAGENAME }}.zip opencv2.framework
    - name: test-x86_64
      run: |
        cd test
        mkdir build-x86_64 && cd build-x86_64
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=MAC -DARCHS="x86_64" \
            -DDEPLOYMENT_TARGET=$MAC_DEPLOYMENT_TARGET -DENABLE_BITCODE=$ENABLE_BITCODE -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR=$GITHUB_WORKSPACE ..
        cmake --build . -j 3
    - name: test-arm64
      run: |
        cd test
        mkdir build-arm64 && cd build-arm64
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=MAC_ARM64 -DARCHS="arm64" \
            -DDEPLOYMENT_TARGET=$MAC_DEPLOYMENT_TARGET -DENABLE_BITCODE=$ENABLE_BITCODE -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR=$GITHUB_WORKSPACE ..
        cmake --build . -j 3
    - name: upload-zip
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  macos-opencv3:
    runs-on: macos-12
    env:
      OPENCV_VERSION: 3.4.20
      PACKAGENAME: opencv-mobile-3.4.20-macos
    steps:
    - uses: actions/checkout@v3
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        echo -n > cmake/OpenCVFindLibsGrfmt.cmake
        patch -p1 -i ../opencv-3.4.20-no-zlib.patch
        patch -p1 -i ../opencv-3.4.20-link-openmp.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/
    - name: build-x86_64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x86_64 && cd build-x86_64
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=MAC -DARCHS="x86_64" \
            -DDEPLOYMENT_TARGET=$MAC_DEPLOYMENT_TARGET -DENABLE_BITCODE=$ENABLE_BITCODE -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=ON ..
        cmake --build . -j 3
        cmake --build . --target install
    - name: build-arm64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-arm64 && cd build-arm64
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=MAC_ARM64 -DARCHS="arm64" \
            -DDEPLOYMENT_TARGET=$MAC_ARM64_DEPLOYMENT_TARGET -DENABLE_BITCODE=$ENABLE_BITCODE -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=ON ..
        cmake --build . -j 3
        cmake --build . --target install
    - name: package
      run: |
        rm -rf opencv2.framework
        mkdir -p opencv2.framework/Versions/A/Headers
        mkdir -p opencv2.framework/Versions/A/Resources
        ln -s A opencv2.framework/Versions/Current
        ln -s Versions/Current/Headers opencv2.framework/Headers
        ln -s Versions/Current/Resources opencv2.framework/Resources
        ln -s Versions/Current/opencv2 opencv2.framework/opencv2
        lipo -create opencv-${{ env.OPENCV_VERSION }}/build-x86_64/install/lib/libopencv_world.a opencv-${{ env.OPENCV_VERSION }}/build-arm64/install/lib/libopencv_world.a -o opencv2.framework/Versions/A/opencv2
        cp -r opencv-${{ env.OPENCV_VERSION }}/build-x86_64/install/include/opencv2/* opencv2.framework/Versions/A/Headers/
        sed -e 's/__NAME__/OpenCV/g' -e 's/__IDENTIFIER__/org.opencv/g' -e 's/__VERSION__/${{ env.OPENCV_VERSION }}/g' Info.plist > opencv2.framework/Versions/A/Resources/Info.plist
        rm -f ${{ env.PACKAGENAME }}.zip
        zip -9 -y -r ${{ env.PACKAGENAME }}.zip opencv2.framework
    - name: test-x86_64
      run: |
        cd test
        mkdir build-x86_64 && cd build-x86_64
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=MAC -DARCHS="x86_64" \
            -DDEPLOYMENT_TARGET=$MAC_DEPLOYMENT_TARGET -DENABLE_BITCODE=$ENABLE_BITCODE -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR=$GITHUB_WORKSPACE ..
        cmake --build . -j 3
    - name: test-arm64
      run: |
        cd test
        mkdir build-arm64 && cd build-arm64
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=MAC_ARM64 -DARCHS="arm64" \
            -DDEPLOYMENT_TARGET=$MAC_DEPLOYMENT_TARGET -DENABLE_BITCODE=$ENABLE_BITCODE -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR=$GITHUB_WORKSPACE ..
        cmake --build . -j 3
    - name: upload-zip
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  macos-opencv2:
    runs-on: macos-12
    env:
      OPENCV_VERSION: 2.4.13.7
      PACKAGENAME: opencv-mobile-2.4.13.7-macos
    steps:
    - uses: actions/checkout@v3
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        echo -n > cmake/OpenCVFindLibsGrfmt.cmake
        patch -p1 -i ../opencv-2.4.13.7-no-zlib.patch
        patch -p1 -i ../opencv-2.4.13.7-fix-highgui-include.patch
        patch -p1 -i ../opencv-2.4.13.7-no-link-stdc++.patch
        patch -p1 -i ../opencv-2.4.13.7-enable-cxx11.patch
        patch -p1 -i ../opencv-2.4.13.7-link-openmp.patch
        patch -p1 -i ../opencv-2.4.13.7-newer-msvc.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/

        # workaround ar @list issue on macos
        sed -i -e 's!\\"${objpath4}\\"!${objpath4}!g' modules/world/CMakeLists.txt

    - name: build-x86_64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x86_64 && cd build-x86_64
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=MAC -DARCHS="x86_64" \
            -DDEPLOYMENT_TARGET=$MAC_DEPLOYMENT_TARGET -DENABLE_BITCODE=$ENABLE_BITCODE -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv2_cmake_options.txt` -DBUILD_opencv_world=ON ..
        cmake --build . -j 3 || echo "qaq"

        # workaround ar @list issue on macos
        cd modules/world
        /Applications/Xcode_13.4.1.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ar qc ../../lib/libopencv_world.a `cat world_objects.rsp` CMakeFiles/opencv_world.dir/src/world_init.cpp.o
        cd ../..

        cmake --build . --target install
    - name: build-arm64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-arm64 && cd build-arm64
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=MAC_ARM64 -DARCHS="arm64" \
            -DDEPLOYMENT_TARGET=$MAC_ARM64_DEPLOYMENT_TARGET -DENABLE_BITCODE=$ENABLE_BITCODE -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv2_cmake_options.txt` -DBUILD_opencv_world=ON ..
        cmake --build . -j 3 || echo "qaq"

        # workaround ar @list issue on macos
        cd modules/world
        /Applications/Xcode_13.4.1.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ar qc ../../lib/libopencv_world.a `cat world_objects.rsp` CMakeFiles/opencv_world.dir/src/world_init.cpp.o
        cd ../..

        cmake --build . --target install
    - name: package
      run: |
        rm -rf opencv2.framework
        mkdir -p opencv2.framework/Versions/A/Headers
        mkdir -p opencv2.framework/Versions/A/Resources
        ln -s A opencv2.framework/Versions/Current
        ln -s Versions/Current/Headers opencv2.framework/Headers
        ln -s Versions/Current/Resources opencv2.framework/Resources
        ln -s Versions/Current/opencv2 opencv2.framework/opencv2
        lipo -create opencv-${{ env.OPENCV_VERSION }}/build-x86_64/install/lib/libopencv_world.a opencv-${{ env.OPENCV_VERSION }}/build-arm64/install/lib/libopencv_world.a -o opencv2.framework/Versions/A/opencv2
        cp -r opencv-${{ env.OPENCV_VERSION }}/build-x86_64/install/include/opencv2/* opencv2.framework/Versions/A/Headers/
        sed -e 's/__NAME__/OpenCV/g' -e 's/__IDENTIFIER__/org.opencv/g' -e 's/__VERSION__/${{ env.OPENCV_VERSION }}/g' Info.plist > opencv2.framework/Versions/A/Resources/Info.plist
        rm -f ${{ env.PACKAGENAME }}.zip
        zip -9 -y -r ${{ env.PACKAGENAME }}.zip opencv2.framework
    - name: test-x86_64
      run: |
        cd test
        mkdir build-x86_64 && cd build-x86_64
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=MAC -DARCHS="x86_64" \
            -DDEPLOYMENT_TARGET=$MAC_DEPLOYMENT_TARGET -DENABLE_BITCODE=$ENABLE_BITCODE -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR=$GITHUB_WORKSPACE ..
        cmake --build . -j 3
    - name: test-arm64
      run: |
        cd test
        mkdir build-arm64 && cd build-arm64
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=MAC_ARM64 -DARCHS="arm64" \
            -DDEPLOYMENT_TARGET=$MAC_DEPLOYMENT_TARGET -DENABLE_BITCODE=$ENABLE_BITCODE -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR=$GITHUB_WORKSPACE ..
        cmake --build . -j 3
    - name: upload-zip
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  mac-catalyst-opencv4:
    runs-on: macos-12
    env:
      OPENCV_VERSION: 4.8.1
      PACKAGENAME: opencv-mobile-4.8.1-mac-catalyst
    steps:
    - uses: actions/checkout@v3
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        echo -n > cmake/OpenCVFindLibsGrfmt.cmake
        rm -rf modules/gapi
        patch -p1 -i ../opencv-4.8.1-no-zlib.patch
        patch -p1 -i ../opencv-4.8.1-link-openmp.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/
    - name: build-x86_64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x86_64 && cd build-x86_64
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=MAC_CATALYST -DARCHS="x86_64" \
            -DDEPLOYMENT_TARGET=$MAC_CATALYST_DEPLOYMENT_TARGET -DENABLE_BITCODE=$ENABLE_BITCODE -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv4_cmake_options.txt` -DBUILD_opencv_world=ON ..
        cmake --build . -j 3
        cmake --build . --target install
    - name: build-arm64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-arm64 && cd build-arm64
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=MAC_CATALYST -DARCHS="arm64" \
            -DDEPLOYMENT_TARGET=$MAC_CATALYST_DEPLOYMENT_TARGET -DENABLE_BITCODE=$ENABLE_BITCODE -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv4_cmake_options.txt` -DBUILD_opencv_world=ON ..
        cmake --build . -j 3
        cmake --build . --target install
    - name: package
      run: |
        rm -rf opencv2.framework
        mkdir -p opencv2.framework/Versions/A/Headers
        mkdir -p opencv2.framework/Versions/A/Resources
        ln -s A opencv2.framework/Versions/Current
        ln -s Versions/Current/Headers opencv2.framework/Headers
        ln -s Versions/Current/Resources opencv2.framework/Resources
        ln -s Versions/Current/opencv2 opencv2.framework/opencv2
        lipo -create opencv-${{ env.OPENCV_VERSION }}/build-x86_64/install/lib/libopencv_world.a opencv-${{ env.OPENCV_VERSION }}/build-arm64/install/lib/libopencv_world.a -o opencv2.framework/Versions/A/opencv2
        cp -r opencv-${{ env.OPENCV_VERSION }}/build-x86_64/install/include/opencv4/opencv2/* opencv2.framework/Versions/A/Headers/
        sed -e 's/__NAME__/OpenCV/g' -e 's/__IDENTIFIER__/org.opencv/g' -e 's/__VERSION__/${{ env.OPENCV_VERSION }}/g' Info.plist > opencv2.framework/Versions/A/Resources/Info.plist
        rm -f ${{ env.PACKAGENAME }}.zip
        zip -9 -y -r ${{ env.PACKAGENAME }}.zip opencv2.framework
    - name: test
      run: |
        cd test
        mkdir build && cd build
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=MAC_CATALYST -DARCHS="x86_64;arm64" \
            -DDEPLOYMENT_TARGET=$MAC_CATALYST_DEPLOYMENT_TARGET -DENABLE_BITCODE=$ENABLE_BITCODE -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR=$GITHUB_WORKSPACE ..
        cmake --build . -j 3
    - name: upload-zip
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  mac-catalyst-opencv3:
    runs-on: macos-12
    env:
      OPENCV_VERSION: 3.4.20
      PACKAGENAME: opencv-mobile-3.4.20-mac-catalyst
    steps:
    - uses: actions/checkout@v3
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        echo -n > cmake/OpenCVFindLibsGrfmt.cmake
        patch -p1 -i ../opencv-3.4.20-no-zlib.patch
        patch -p1 -i ../opencv-3.4.20-link-openmp.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/
    - name: build-x86_64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x86_64 && cd build-x86_64
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=MAC_CATALYST -DARCHS="x86_64" \
            -DDEPLOYMENT_TARGET=$MAC_CATALYST_DEPLOYMENT_TARGET -DENABLE_BITCODE=$ENABLE_BITCODE -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=ON ..
        cmake --build . -j 3
        cmake --build . --target install
    - name: build-arm64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-arm64 && cd build-arm64
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=MAC_CATALYST -DARCHS="arm64" \
            -DDEPLOYMENT_TARGET=$MAC_CATALYST_DEPLOYMENT_TARGET -DENABLE_BITCODE=$ENABLE_BITCODE -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=ON ..
        cmake --build . -j 3
        cmake --build . --target install
    - name: package
      run: |
        rm -rf opencv2.framework
        mkdir -p opencv2.framework/Versions/A/Headers
        mkdir -p opencv2.framework/Versions/A/Resources
        ln -s A opencv2.framework/Versions/Current
        ln -s Versions/Current/Headers opencv2.framework/Headers
        ln -s Versions/Current/Resources opencv2.framework/Resources
        ln -s Versions/Current/opencv2 opencv2.framework/opencv2
        lipo -create opencv-${{ env.OPENCV_VERSION }}/build-x86_64/install/lib/libopencv_world.a opencv-${{ env.OPENCV_VERSION }}/build-arm64/install/lib/libopencv_world.a -o opencv2.framework/Versions/A/opencv2
        cp -r opencv-${{ env.OPENCV_VERSION }}/build-x86_64/install/include/opencv2/* opencv2.framework/Versions/A/Headers/
        sed -e 's/__NAME__/OpenCV/g' -e 's/__IDENTIFIER__/org.opencv/g' -e 's/__VERSION__/${{ env.OPENCV_VERSION }}/g' Info.plist > opencv2.framework/Versions/A/Resources/Info.plist
        rm -f ${{ env.PACKAGENAME }}.zip
        zip -9 -y -r ${{ env.PACKAGENAME }}.zip opencv2.framework
    - name: test
      run: |
        cd test
        mkdir build && cd build
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=MAC_CATALYST -DARCHS="x86_64;arm64" \
            -DDEPLOYMENT_TARGET=$MAC_CATALYST_DEPLOYMENT_TARGET -DENABLE_BITCODE=$ENABLE_BITCODE -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR=$GITHUB_WORKSPACE ..
        cmake --build . -j 3
    - name: upload-zip
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  mac-catalyst-opencv2:
    runs-on: macos-12
    env:
      OPENCV_VERSION: 2.4.13.7
      PACKAGENAME: opencv-mobile-2.4.13.7-mac-catalyst
    steps:
    - uses: actions/checkout@v3
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        echo -n > cmake/OpenCVFindLibsGrfmt.cmake
        patch -p1 -i ../opencv-2.4.13.7-no-zlib.patch
        patch -p1 -i ../opencv-2.4.13.7-fix-highgui-include.patch
        patch -p1 -i ../opencv-2.4.13.7-no-link-stdc++.patch
        patch -p1 -i ../opencv-2.4.13.7-enable-cxx11.patch
        patch -p1 -i ../opencv-2.4.13.7-link-openmp.patch
        patch -p1 -i ../opencv-2.4.13.7-newer-msvc.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/

        # workaround ar @list issue on macos
        sed -i -e 's!\\"${objpath4}\\"!${objpath4}!g' modules/world/CMakeLists.txt

    - name: build-x86_64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x86_64 && cd build-x86_64
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=MAC_CATALYST -DARCHS="x86_64" \
            -DDEPLOYMENT_TARGET=$MAC_CATALYST_DEPLOYMENT_TARGET -DENABLE_BITCODE=$ENABLE_BITCODE -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv2_cmake_options.txt` -DBUILD_opencv_world=ON ..
        cmake --build . -j 3 || echo "qaq"

        # workaround ar @list issue on macos
        cd modules/world
        /Applications/Xcode_13.4.1.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ar qc ../../lib/libopencv_world.a `cat world_objects.rsp` CMakeFiles/opencv_world.dir/src/world_init.cpp.o
        cd ../..

        cmake --build . --target install
    - name: build-arm64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-arm64 && cd build-arm64
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=MAC_CATALYST -DARCHS="arm64" \
            -DDEPLOYMENT_TARGET=$MAC_CATALYST_DEPLOYMENT_TARGET -DENABLE_BITCODE=$ENABLE_BITCODE -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv2_cmake_options.txt` -DBUILD_opencv_world=ON ..
        cmake --build . -j 3 || echo "qaq"

        # workaround ar @list issue on macos
        cd modules/world
        /Applications/Xcode_13.4.1.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ar qc ../../lib/libopencv_world.a `cat world_objects.rsp` CMakeFiles/opencv_world.dir/src/world_init.cpp.o
        cd ../..

        cmake --build . --target install
    - name: package
      run: |
        rm -rf opencv2.framework
        mkdir -p opencv2.framework/Versions/A/Headers
        mkdir -p opencv2.framework/Versions/A/Resources
        ln -s A opencv2.framework/Versions/Current
        ln -s Versions/Current/Headers opencv2.framework/Headers
        ln -s Versions/Current/Resources opencv2.framework/Resources
        ln -s Versions/Current/opencv2 opencv2.framework/opencv2
        lipo -create opencv-${{ env.OPENCV_VERSION }}/build-x86_64/install/lib/libopencv_world.a opencv-${{ env.OPENCV_VERSION }}/build-arm64/install/lib/libopencv_world.a -o opencv2.framework/Versions/A/opencv2
        cp -r opencv-${{ env.OPENCV_VERSION }}/build-x86_64/install/include/opencv2/* opencv2.framework/Versions/A/Headers/
        sed -e 's/__NAME__/OpenCV/g' -e 's/__IDENTIFIER__/org.opencv/g' -e 's/__VERSION__/${{ env.OPENCV_VERSION }}/g' Info.plist > opencv2.framework/Versions/A/Resources/Info.plist
        rm -f ${{ env.PACKAGENAME }}.zip
        zip -9 -y -r ${{ env.PACKAGENAME }}.zip opencv2.framework
    - name: test
      run: |
        cd test
        mkdir build && cd build
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=MAC_CATALYST -DARCHS="x86_64;arm64" \
            -DDEPLOYMENT_TARGET=$MAC_CATALYST_DEPLOYMENT_TARGET -DENABLE_BITCODE=$ENABLE_BITCODE -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR=$GITHUB_WORKSPACE ..
        cmake --build . -j 3
    - name: upload-zip
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  mac-catalyst-opencv4-bitcode:
    runs-on: macos-12
    env:
      OPENCV_VERSION: 4.8.1
      PACKAGENAME: opencv-mobile-4.8.1-mac-catalyst-bitcode
    steps:
    - uses: actions/checkout@v3
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        echo -n > cmake/OpenCVFindLibsGrfmt.cmake
        rm -rf modules/gapi
        patch -p1 -i ../opencv-4.8.1-no-zlib.patch
        patch -p1 -i ../opencv-4.8.1-link-openmp.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/
    - name: build-x86_64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x86_64 && cd build-x86_64
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=MAC_CATALYST -DARCHS="x86_64" \
            -DDEPLOYMENT_TARGET=$MAC_CATALYST_DEPLOYMENT_TARGET -DENABLE_BITCODE=ON -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv4_cmake_options.txt` -DBUILD_opencv_world=ON ..
        cmake --build . -j 3
        cmake --build . --target install
    - name: build-arm64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-arm64 && cd build-arm64
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=MAC_CATALYST -DARCHS="arm64" \
            -DDEPLOYMENT_TARGET=$MAC_CATALYST_DEPLOYMENT_TARGET -DENABLE_BITCODE=ON -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv4_cmake_options.txt` -DBUILD_opencv_world=ON ..
        cmake --build . -j 3
        cmake --build . --target install
    - name: package
      run: |
        rm -rf opencv2.framework
        mkdir -p opencv2.framework/Versions/A/Headers
        mkdir -p opencv2.framework/Versions/A/Resources
        ln -s A opencv2.framework/Versions/Current
        ln -s Versions/Current/Headers opencv2.framework/Headers
        ln -s Versions/Current/Resources opencv2.framework/Resources
        ln -s Versions/Current/opencv2 opencv2.framework/opencv2
        lipo -create opencv-${{ env.OPENCV_VERSION }}/build-x86_64/install/lib/libopencv_world.a opencv-${{ env.OPENCV_VERSION }}/build-arm64/install/lib/libopencv_world.a -o opencv2.framework/Versions/A/opencv2
        cp -r opencv-${{ env.OPENCV_VERSION }}/build-x86_64/install/include/opencv4/opencv2/* opencv2.framework/Versions/A/Headers/
        sed -e 's/__NAME__/OpenCV/g' -e 's/__IDENTIFIER__/org.opencv/g' -e 's/__VERSION__/${{ env.OPENCV_VERSION }}/g' Info.plist > opencv2.framework/Versions/A/Resources/Info.plist
        rm -f ${{ env.PACKAGENAME }}.zip
        zip -9 -y -r ${{ env.PACKAGENAME }}.zip opencv2.framework
    - name: test
      run: |
        cd test
        mkdir build && cd build
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=MAC_CATALYST -DARCHS="x86_64;arm64" \
            -DDEPLOYMENT_TARGET=$MAC_CATALYST_DEPLOYMENT_TARGET -DENABLE_BITCODE=ON -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR=$GITHUB_WORKSPACE ..
        cmake --build . -j 3
    - name: upload-zip
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  mac-catalyst-opencv3-bitcode:
    runs-on: macos-12
    env:
      OPENCV_VERSION: 3.4.20
      PACKAGENAME: opencv-mobile-3.4.20-mac-catalyst-bitcode
    steps:
    - uses: actions/checkout@v3
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        echo -n > cmake/OpenCVFindLibsGrfmt.cmake
        patch -p1 -i ../opencv-3.4.20-no-zlib.patch
        patch -p1 -i ../opencv-3.4.20-link-openmp.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/
    - name: build-x86_64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x86_64 && cd build-x86_64
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=MAC_CATALYST -DARCHS="x86_64" \
            -DDEPLOYMENT_TARGET=$MAC_CATALYST_DEPLOYMENT_TARGET -DENABLE_BITCODE=ON -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=ON ..
        cmake --build . -j 3
        cmake --build . --target install
    - name: build-arm64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-arm64 && cd build-arm64
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=MAC_CATALYST -DARCHS="arm64" \
            -DDEPLOYMENT_TARGET=$MAC_CATALYST_DEPLOYMENT_TARGET -DENABLE_BITCODE=ON -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=ON ..
        cmake --build . -j 3
        cmake --build . --target install
    - name: package
      run: |
        rm -rf opencv2.framework
        mkdir -p opencv2.framework/Versions/A/Headers
        mkdir -p opencv2.framework/Versions/A/Resources
        ln -s A opencv2.framework/Versions/Current
        ln -s Versions/Current/Headers opencv2.framework/Headers
        ln -s Versions/Current/Resources opencv2.framework/Resources
        ln -s Versions/Current/opencv2 opencv2.framework/opencv2
        lipo -create opencv-${{ env.OPENCV_VERSION }}/build-x86_64/install/lib/libopencv_world.a opencv-${{ env.OPENCV_VERSION }}/build-arm64/install/lib/libopencv_world.a -o opencv2.framework/Versions/A/opencv2
        cp -r opencv-${{ env.OPENCV_VERSION }}/build-x86_64/install/include/opencv2/* opencv2.framework/Versions/A/Headers/
        sed -e 's/__NAME__/OpenCV/g' -e 's/__IDENTIFIER__/org.opencv/g' -e 's/__VERSION__/${{ env.OPENCV_VERSION }}/g' Info.plist > opencv2.framework/Versions/A/Resources/Info.plist
        rm -f ${{ env.PACKAGENAME }}.zip
        zip -9 -y -r ${{ env.PACKAGENAME }}.zip opencv2.framework
    - name: test
      run: |
        cd test
        mkdir build && cd build
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=MAC_CATALYST -DARCHS="x86_64;arm64" \
            -DDEPLOYMENT_TARGET=$MAC_CATALYST_DEPLOYMENT_TARGET -DENABLE_BITCODE=ON -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR=$GITHUB_WORKSPACE ..
        cmake --build . -j 3
    - name: upload-zip
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  mac-catalyst-opencv2-bitcode:
    runs-on: macos-12
    env:
      OPENCV_VERSION: 2.4.13.7
      PACKAGENAME: opencv-mobile-2.4.13.7-mac-catalyst-bitcode
    steps:
    - uses: actions/checkout@v3
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        echo -n > cmake/OpenCVFindLibsGrfmt.cmake
        patch -p1 -i ../opencv-2.4.13.7-no-zlib.patch
        patch -p1 -i ../opencv-2.4.13.7-fix-highgui-include.patch
        patch -p1 -i ../opencv-2.4.13.7-no-link-stdc++.patch
        patch -p1 -i ../opencv-2.4.13.7-enable-cxx11.patch
        patch -p1 -i ../opencv-2.4.13.7-link-openmp.patch
        patch -p1 -i ../opencv-2.4.13.7-newer-msvc.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/

        # workaround ar @list issue on macos
        sed -i -e 's!\\"${objpath4}\\"!${objpath4}!g' modules/world/CMakeLists.txt

    - name: build-x86_64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x86_64 && cd build-x86_64
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=MAC_CATALYST -DARCHS="x86_64" \
            -DDEPLOYMENT_TARGET=$MAC_CATALYST_DEPLOYMENT_TARGET -DENABLE_BITCODE=ON -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv2_cmake_options.txt` -DBUILD_opencv_world=ON ..
        cmake --build . -j 3 || echo "qaq"

        # workaround ar @list issue on macos
        cd modules/world
        /Applications/Xcode_13.4.1.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ar qc ../../lib/libopencv_world.a `cat world_objects.rsp` CMakeFiles/opencv_world.dir/src/world_init.cpp.o
        cd ../..

        cmake --build . --target install
    - name: build-arm64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-arm64 && cd build-arm64
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=MAC_CATALYST -DARCHS="arm64" \
            -DDEPLOYMENT_TARGET=$MAC_CATALYST_DEPLOYMENT_TARGET -DENABLE_BITCODE=ON -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv2_cmake_options.txt` -DBUILD_opencv_world=ON ..
        cmake --build . -j 3 || echo "qaq"

        # workaround ar @list issue on macos
        cd modules/world
        /Applications/Xcode_13.4.1.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ar qc ../../lib/libopencv_world.a `cat world_objects.rsp` CMakeFiles/opencv_world.dir/src/world_init.cpp.o
        cd ../..

        cmake --build . --target install
    - name: package
      run: |
        rm -rf opencv2.framework
        mkdir -p opencv2.framework/Versions/A/Headers
        mkdir -p opencv2.framework/Versions/A/Resources
        ln -s A opencv2.framework/Versions/Current
        ln -s Versions/Current/Headers opencv2.framework/Headers
        ln -s Versions/Current/Resources opencv2.framework/Resources
        ln -s Versions/Current/opencv2 opencv2.framework/opencv2
        lipo -create opencv-${{ env.OPENCV_VERSION }}/build-x86_64/install/lib/libopencv_world.a opencv-${{ env.OPENCV_VERSION }}/build-arm64/install/lib/libopencv_world.a -o opencv2.framework/Versions/A/opencv2
        cp -r opencv-${{ env.OPENCV_VERSION }}/build-x86_64/install/include/opencv2/* opencv2.framework/Versions/A/Headers/
        sed -e 's/__NAME__/OpenCV/g' -e 's/__IDENTIFIER__/org.opencv/g' -e 's/__VERSION__/${{ env.OPENCV_VERSION }}/g' Info.plist > opencv2.framework/Versions/A/Resources/Info.plist
        rm -f ${{ env.PACKAGENAME }}.zip
        zip -9 -y -r ${{ env.PACKAGENAME }}.zip opencv2.framework
    - name: test
      run: |
        cd test
        mkdir build && cd build
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake -DPLATFORM=MAC_CATALYST -DARCHS="x86_64;arm64" \
            -DDEPLOYMENT_TARGET=$MAC_CATALYST_DEPLOYMENT_TARGET -DENABLE_BITCODE=ON -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR=$GITHUB_WORKSPACE ..
        cmake --build . -j 3
    - name: upload-zip
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  windows-vs2015-opencv4:
    runs-on: windows-2019
    env:
      OPENCV_VERSION: 4.8.1
      PACKAGENAME: opencv-mobile-4.8.1-windows-vs2015
      UseMultiToolTask: true
    steps:
    - uses: actions/checkout@v3
    - name: opencv-source
      run: |
        Invoke-WebRequest -Uri https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -OutFile opencv-${{ env.OPENCV_VERSION }}.zip
        7z x ./opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        Clear-Content "cmake\OpenCVFindLibsGrfmt.cmake"
        Remove-Item "modules\gapi" -Recurse
        C:\msys64\usr\bin\patch.exe -p1 -i ..\opencv-4.8.1-no-zlib.patch
        C:\msys64\usr\bin\patch.exe -p1 -i ..\opencv-4.8.1-link-openmp.patch
        Remove-Item "modules\highgui" -Recurse
        Copy-Item -Recurse -Path "..\highgui" -Destination "modules\"
    - name: build-x86
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x86; cd build-x86
        cmake -T v140,host=x64 -A Win32 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release $(type ../../opencv4_cmake_options.txt) -DBUILD_opencv_world=OFF ..
        cmake --build . --config Release -j 2
        cmake --build . --config Release --target install
    - name: build-x64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x64; cd build-x64
        cmake -T v140,host=x64 -A x64 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release $(type ../../opencv4_cmake_options.txt) -DBUILD_opencv_world=OFF ..
        cmake --build . --config Release -j 2
        cmake --build . --config Release --target install
    - name: package
      run: |
        mkdir ${{ env.PACKAGENAME }}
        mkdir ${{ env.PACKAGENAME }}/x86
        mkdir ${{ env.PACKAGENAME }}/x64
        Copy-Item -Verbose -Recurse -Path "opencv-${{ env.OPENCV_VERSION }}\build-x86\install\*" -Destination "${{ env.PACKAGENAME }}\x86"
        Copy-Item -Verbose -Recurse -Path "opencv-${{ env.OPENCV_VERSION }}\build-x64\install\*" -Destination "${{ env.PACKAGENAME }}\x64"
        Remove-Item "${{ env.PACKAGENAME }}\x86\etc" -Recurse
        Remove-Item "${{ env.PACKAGENAME }}\x64\etc" -Recurse
        7z a -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: test-x86
      run: |
        cd test
        mkdir build-x86; cd build-x86
        cmake -T v140,host=x64 -A Win32 -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR="$env:GITHUB_WORKSPACE\${{ env.PACKAGENAME }}\x86" -DOpenCV_STATIC=ON ..
        cmake --build . --config Release -j 2
    - name: test-x64
      run: |
        cd test
        mkdir build-x64; cd build-x64
        cmake -T v140,host=x64 -A x64 -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR="$env:GITHUB_WORKSPACE\${{ env.PACKAGENAME }}\x64" -DOpenCV_STATIC=ON ..
        cmake --build . --config Release -j 2
    - name: upload-zip
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  windows-vs2015-opencv3:
    runs-on: windows-2019
    env:
      OPENCV_VERSION: 3.4.20
      PACKAGENAME: opencv-mobile-3.4.20-windows-vs2015
      UseMultiToolTask: true
    steps:
    - uses: actions/checkout@v3
    - name: opencv-source
      run: |
        Invoke-WebRequest -Uri https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -OutFile opencv-${{ env.OPENCV_VERSION }}.zip
        7z x ./opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        Clear-Content "cmake\OpenCVFindLibsGrfmt.cmake"
        C:\msys64\usr\bin\patch.exe -p1 -i ..\opencv-3.4.20-no-zlib.patch
        C:\msys64\usr\bin\patch.exe -p1 -i ..\opencv-3.4.20-link-openmp.patch
        Remove-Item "modules\highgui" -Recurse
        Copy-Item -Recurse -Path "..\highgui" -Destination "modules\"
    - name: build-x86
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x86; cd build-x86
        cmake -T v140,host=x64 -A Win32 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release $(type ../../opencv3_cmake_options.txt) -DBUILD_opencv_world=OFF ..
        cmake --build . --config Release -j 2
        cmake --build . --config Release --target install
    - name: build-x64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x64; cd build-x64
        cmake -T v140,host=x64 -A x64 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release $(type ../../opencv3_cmake_options.txt) -DBUILD_opencv_world=OFF ..
        cmake --build . --config Release -j 2
        cmake --build . --config Release --target install
    - name: package
      run: |
        mkdir ${{ env.PACKAGENAME }}
        mkdir ${{ env.PACKAGENAME }}/x86
        mkdir ${{ env.PACKAGENAME }}/x64
        Copy-Item -Verbose -Recurse -Path "opencv-${{ env.OPENCV_VERSION }}\build-x86\install\*" -Destination "${{ env.PACKAGENAME }}\x86"
        Copy-Item -Verbose -Recurse -Path "opencv-${{ env.OPENCV_VERSION }}\build-x64\install\*" -Destination "${{ env.PACKAGENAME }}\x64"
        Remove-Item "${{ env.PACKAGENAME }}\x86\etc" -Recurse
        Remove-Item "${{ env.PACKAGENAME }}\x64\etc" -Recurse
        7z a -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: test-x86
      run: |
        cd test
        mkdir build-x86; cd build-x86
        cmake -T v140,host=x64 -A Win32 -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR="$env:GITHUB_WORKSPACE\${{ env.PACKAGENAME }}\x86" -DOpenCV_STATIC=ON ..
        cmake --build . --config Release -j 2
    - name: test-x64
      run: |
        cd test
        mkdir build-x64; cd build-x64
        cmake -T v140,host=x64 -A x64 -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR="$env:GITHUB_WORKSPACE\${{ env.PACKAGENAME }}\x64" -DOpenCV_STATIC=ON ..
        cmake --build . --config Release -j 2
    - name: upload-zip
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  windows-vs2015-opencv2:
    runs-on: windows-2019
    env:
      OPENCV_VERSION: 2.4.13.7
      PACKAGENAME: opencv-mobile-2.4.13.7-windows-vs2015
      UseMultiToolTask: true
    steps:
    - uses: actions/checkout@v3
    - name: opencv-source
      run: |
        Invoke-WebRequest -Uri https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -OutFile opencv-${{ env.OPENCV_VERSION }}.zip
        7z x ./opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        Clear-Content "cmake\OpenCVFindLibsGrfmt.cmake"
        C:\msys64\usr\bin\patch.exe -p1 -i ..\opencv-2.4.13.7-no-zlib.patch
        C:\msys64\usr\bin\patch.exe -p1 -i ..\opencv-2.4.13.7-fix-highgui-include.patch
        C:\msys64\usr\bin\patch.exe -p1 -i ..\opencv-2.4.13.7-enable-cxx11.patch
        C:\msys64\usr\bin\patch.exe -p1 -i ..\opencv-2.4.13.7-link-openmp.patch
        C:\msys64\usr\bin\patch.exe -p1 -i ..\opencv-2.4.13.7-newer-msvc.patch
        Remove-Item "modules\highgui" -Recurse
        Copy-Item -Recurse -Path "..\highgui" -Destination "modules\"
    - name: build-x86
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x86; cd build-x86
        cmake -T v140,host=x64 -A Win32 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release $(type ../../opencv2_cmake_options.txt) -DBUILD_opencv_world=OFF ..
        cmake --build . --config Release -j 2
        cmake --build . --config Release --target install
    - name: build-x64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x64; cd build-x64
        cmake -T v140,host=x64 -A x64 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release $(type ../../opencv2_cmake_options.txt) -DBUILD_opencv_world=OFF ..
        cmake --build . --config Release -j 2
        cmake --build . --config Release --target install
    - name: package
      run: |
        mkdir ${{ env.PACKAGENAME }}
        mkdir ${{ env.PACKAGENAME }}/x86
        mkdir ${{ env.PACKAGENAME }}/x64
        Copy-Item -Verbose -Recurse -Path "opencv-${{ env.OPENCV_VERSION }}\build-x86\install\*" -Destination "${{ env.PACKAGENAME }}\x86"
        Copy-Item -Verbose -Recurse -Path "opencv-${{ env.OPENCV_VERSION }}\build-x64\install\*" -Destination "${{ env.PACKAGENAME }}\x64"
        Remove-Item "${{ env.PACKAGENAME }}\x86\share" -Recurse
        Remove-Item "${{ env.PACKAGENAME }}\x64\share" -Recurse
        7z a -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: test-x86
      run: |
        cd test
        mkdir build-x86; cd build-x86
        cmake -T v140,host=x64 -A Win32 -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR="$env:GITHUB_WORKSPACE\${{ env.PACKAGENAME }}\x86" -DOpenCV_STATIC=ON ..
        cmake --build . --config Release -j 2
    - name: test-x64
      run: |
        cd test
        mkdir build-x64; cd build-x64
        cmake -T v140,host=x64 -A x64 -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR="$env:GITHUB_WORKSPACE\${{ env.PACKAGENAME }}\x64" -DOpenCV_STATIC=ON ..
        cmake --build . --config Release -j 2
    - name: upload-zip
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  windows-vs2017-opencv4:
    runs-on: windows-2019
    env:
      OPENCV_VERSION: 4.8.1
      PACKAGENAME: opencv-mobile-4.8.1-windows-vs2017
      UseMultiToolTask: true
    steps:
    - uses: actions/checkout@v3
    - name: opencv-source
      run: |
        Invoke-WebRequest -Uri https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -OutFile opencv-${{ env.OPENCV_VERSION }}.zip
        7z x ./opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        Clear-Content "cmake\OpenCVFindLibsGrfmt.cmake"
        Remove-Item "modules\gapi" -Recurse
        C:\msys64\usr\bin\patch.exe -p1 -i ..\opencv-4.8.1-no-zlib.patch
        C:\msys64\usr\bin\patch.exe -p1 -i ..\opencv-4.8.1-link-openmp.patch
        Remove-Item "modules\highgui" -Recurse
        Copy-Item -Recurse -Path "..\highgui" -Destination "modules\"
    - name: build-x86
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x86; cd build-x86
        cmake -T v141,host=x64 -A Win32 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release $(type ../../opencv4_cmake_options.txt) -DBUILD_opencv_world=OFF ..
        cmake --build . --config Release -j 2
        cmake --build . --config Release --target install
    - name: build-x64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x64; cd build-x64
        cmake -T v141,host=x64 -A x64 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release $(type ../../opencv4_cmake_options.txt) -DBUILD_opencv_world=OFF ..
        cmake --build . --config Release -j 2
        cmake --build . --config Release --target install
    - name: package
      run: |
        mkdir ${{ env.PACKAGENAME }}
        mkdir ${{ env.PACKAGENAME }}/x86
        mkdir ${{ env.PACKAGENAME }}/x64
        Copy-Item -Verbose -Recurse -Path "opencv-${{ env.OPENCV_VERSION }}\build-x86\install\*" -Destination "${{ env.PACKAGENAME }}\x86"
        Copy-Item -Verbose -Recurse -Path "opencv-${{ env.OPENCV_VERSION }}\build-x64\install\*" -Destination "${{ env.PACKAGENAME }}\x64"
        Remove-Item "${{ env.PACKAGENAME }}\x86\etc" -Recurse
        Remove-Item "${{ env.PACKAGENAME }}\x64\etc" -Recurse
        7z a -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: test-x86
      run: |
        cd test
        mkdir build-x86; cd build-x86
        cmake -T v141,host=x64 -A Win32 -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR="$env:GITHUB_WORKSPACE\${{ env.PACKAGENAME }}\x86" -DOpenCV_STATIC=ON ..
        cmake --build . --config Release -j 2
    - name: test-x64
      run: |
        cd test
        mkdir build-x64; cd build-x64
        cmake -T v141,host=x64 -A x64 -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR="$env:GITHUB_WORKSPACE\${{ env.PACKAGENAME }}\x64" -DOpenCV_STATIC=ON ..
        cmake --build . --config Release -j 2
    - name: upload-zip
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  windows-vs2017-opencv3:
    runs-on: windows-2019
    env:
      OPENCV_VERSION: 3.4.20
      PACKAGENAME: opencv-mobile-3.4.20-windows-vs2017
      UseMultiToolTask: true
    steps:
    - uses: actions/checkout@v3
    - name: opencv-source
      run: |
        Invoke-WebRequest -Uri https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -OutFile opencv-${{ env.OPENCV_VERSION }}.zip
        7z x ./opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        Clear-Content "cmake\OpenCVFindLibsGrfmt.cmake"
        C:\msys64\usr\bin\patch.exe -p1 -i ..\opencv-3.4.20-no-zlib.patch
        C:\msys64\usr\bin\patch.exe -p1 -i ..\opencv-3.4.20-link-openmp.patch
        Remove-Item "modules\highgui" -Recurse
        Copy-Item -Recurse -Path "..\highgui" -Destination "modules\"
    - name: build-x86
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x86; cd build-x86
        cmake -T v141,host=x64 -A Win32 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release $(type ../../opencv3_cmake_options.txt) -DBUILD_opencv_world=OFF ..
        cmake --build . --config Release -j 2
        cmake --build . --config Release --target install
    - name: build-x64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x64; cd build-x64
        cmake -T v141,host=x64 -A x64 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release $(type ../../opencv3_cmake_options.txt) -DBUILD_opencv_world=OFF ..
        cmake --build . --config Release -j 2
        cmake --build . --config Release --target install
    - name: package
      run: |
        mkdir ${{ env.PACKAGENAME }}
        mkdir ${{ env.PACKAGENAME }}/x86
        mkdir ${{ env.PACKAGENAME }}/x64
        Copy-Item -Verbose -Recurse -Path "opencv-${{ env.OPENCV_VERSION }}\build-x86\install\*" -Destination "${{ env.PACKAGENAME }}\x86"
        Copy-Item -Verbose -Recurse -Path "opencv-${{ env.OPENCV_VERSION }}\build-x64\install\*" -Destination "${{ env.PACKAGENAME }}\x64"
        Remove-Item "${{ env.PACKAGENAME }}\x86\etc" -Recurse
        Remove-Item "${{ env.PACKAGENAME }}\x64\etc" -Recurse
        7z a -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: test-x86
      run: |
        cd test
        mkdir build-x86; cd build-x86
        cmake -T v141,host=x64 -A Win32 -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR="$env:GITHUB_WORKSPACE\${{ env.PACKAGENAME }}\x86" -DOpenCV_STATIC=ON ..
        cmake --build . --config Release -j 2
    - name: test-x64
      run: |
        cd test
        mkdir build-x64; cd build-x64
        cmake -T v141,host=x64 -A x64 -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR="$env:GITHUB_WORKSPACE\${{ env.PACKAGENAME }}\x64" -DOpenCV_STATIC=ON ..
        cmake --build . --config Release -j 2
    - name: upload-zip
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  windows-vs2017-opencv2:
    runs-on: windows-2019
    env:
      OPENCV_VERSION: 2.4.13.7
      PACKAGENAME: opencv-mobile-2.4.13.7-windows-vs2017
      UseMultiToolTask: true
    steps:
    - uses: actions/checkout@v3
    - name: opencv-source
      run: |
        Invoke-WebRequest -Uri https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -OutFile opencv-${{ env.OPENCV_VERSION }}.zip
        7z x ./opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        Clear-Content "cmake\OpenCVFindLibsGrfmt.cmake"
        C:\msys64\usr\bin\patch.exe -p1 -i ..\opencv-2.4.13.7-no-zlib.patch
        C:\msys64\usr\bin\patch.exe -p1 -i ..\opencv-2.4.13.7-fix-highgui-include.patch
        C:\msys64\usr\bin\patch.exe -p1 -i ..\opencv-2.4.13.7-enable-cxx11.patch
        C:\msys64\usr\bin\patch.exe -p1 -i ..\opencv-2.4.13.7-link-openmp.patch
        C:\msys64\usr\bin\patch.exe -p1 -i ..\opencv-2.4.13.7-newer-msvc.patch
        Remove-Item "modules\highgui" -Recurse
        Copy-Item -Recurse -Path "..\highgui" -Destination "modules\"
    - name: build-x86
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x86; cd build-x86
        cmake -T v141,host=x64 -A Win32 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release $(type ../../opencv2_cmake_options.txt) -DBUILD_opencv_world=OFF ..
        cmake --build . --config Release -j 2
        cmake --build . --config Release --target install
    - name: build-x64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x64; cd build-x64
        cmake -T v141,host=x64 -A x64 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release $(type ../../opencv2_cmake_options.txt) -DBUILD_opencv_world=OFF ..
        cmake --build . --config Release -j 2
        cmake --build . --config Release --target install
    - name: package
      run: |
        mkdir ${{ env.PACKAGENAME }}
        mkdir ${{ env.PACKAGENAME }}/x86
        mkdir ${{ env.PACKAGENAME }}/x64
        Copy-Item -Verbose -Recurse -Path "opencv-${{ env.OPENCV_VERSION }}\build-x86\install\*" -Destination "${{ env.PACKAGENAME }}\x86"
        Copy-Item -Verbose -Recurse -Path "opencv-${{ env.OPENCV_VERSION }}\build-x64\install\*" -Destination "${{ env.PACKAGENAME }}\x64"
        Remove-Item "${{ env.PACKAGENAME }}\x86\share" -Recurse
        Remove-Item "${{ env.PACKAGENAME }}\x64\share" -Recurse
        7z a -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: test-x86
      run: |
        cd test
        mkdir build-x86; cd build-x86
        cmake -T v141,host=x64 -A Win32 -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR="$env:GITHUB_WORKSPACE\${{ env.PACKAGENAME }}\x86" -DOpenCV_STATIC=ON ..
        cmake --build . --config Release -j 2
    - name: test-x64
      run: |
        cd test
        mkdir build-x64; cd build-x64
        cmake -T v141,host=x64 -A x64 -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR="$env:GITHUB_WORKSPACE\${{ env.PACKAGENAME }}\x64" -DOpenCV_STATIC=ON ..
        cmake --build . --config Release -j 2
    - name: upload-zip
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  windows-vs2019-opencv4:
    runs-on: windows-2019
    env:
      OPENCV_VERSION: 4.8.1
      PACKAGENAME: opencv-mobile-4.8.1-windows-vs2019
      UseMultiToolTask: true
    steps:
    - uses: actions/checkout@v3
    - name: opencv-source
      run: |
        Invoke-WebRequest -Uri https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -OutFile opencv-${{ env.OPENCV_VERSION }}.zip
        7z x ./opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        Clear-Content "cmake\OpenCVFindLibsGrfmt.cmake"
        Remove-Item "modules\gapi" -Recurse
        C:\msys64\usr\bin\patch.exe -p1 -i ..\opencv-4.8.1-no-zlib.patch
        C:\msys64\usr\bin\patch.exe -p1 -i ..\opencv-4.8.1-link-openmp.patch
        Remove-Item "modules\highgui" -Recurse
        Copy-Item -Recurse -Path "..\highgui" -Destination "modules\"
    - name: build-x86
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x86; cd build-x86
        cmake -T v142,host=x64 -A Win32 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release $(type ../../opencv4_cmake_options.txt) -DBUILD_opencv_world=OFF ..
        cmake --build . --config Release -j 2
        cmake --build . --config Release --target install
    - name: build-x64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x64; cd build-x64
        cmake -T v142,host=x64 -A x64 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release $(type ../../opencv4_cmake_options.txt) -DBUILD_opencv_world=OFF ..
        cmake --build . --config Release -j 2
        cmake --build . --config Release --target install
    - name: package
      run: |
        mkdir ${{ env.PACKAGENAME }}
        mkdir ${{ env.PACKAGENAME }}/x86
        mkdir ${{ env.PACKAGENAME }}/x64
        Copy-Item -Verbose -Recurse -Path "opencv-${{ env.OPENCV_VERSION }}\build-x86\install\*" -Destination "${{ env.PACKAGENAME }}\x86"
        Copy-Item -Verbose -Recurse -Path "opencv-${{ env.OPENCV_VERSION }}\build-x64\install\*" -Destination "${{ env.PACKAGENAME }}\x64"
        Remove-Item "${{ env.PACKAGENAME }}\x86\etc" -Recurse
        Remove-Item "${{ env.PACKAGENAME }}\x64\etc" -Recurse
        7z a -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: test-x86
      run: |
        cd test
        mkdir build-x86; cd build-x86
        cmake -T v142,host=x64 -A Win32 -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR="$env:GITHUB_WORKSPACE\${{ env.PACKAGENAME }}\x86" -DOpenCV_STATIC=ON ..
        cmake --build . --config Release -j 2
    - name: test-x64
      run: |
        cd test
        mkdir build-x64; cd build-x64
        cmake -T v142,host=x64 -A x64 -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR="$env:GITHUB_WORKSPACE\${{ env.PACKAGENAME }}\x64" -DOpenCV_STATIC=ON ..
        cmake --build . --config Release -j 2
    - name: upload-zip
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  windows-vs2019-opencv3:
    runs-on: windows-2019
    env:
      OPENCV_VERSION: 3.4.20
      PACKAGENAME: opencv-mobile-3.4.20-windows-vs2019
      UseMultiToolTask: true
    steps:
    - uses: actions/checkout@v3
    - name: opencv-source
      run: |
        Invoke-WebRequest -Uri https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -OutFile opencv-${{ env.OPENCV_VERSION }}.zip
        7z x ./opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        Clear-Content "cmake\OpenCVFindLibsGrfmt.cmake"
        C:\msys64\usr\bin\patch.exe -p1 -i ..\opencv-3.4.20-no-zlib.patch
        C:\msys64\usr\bin\patch.exe -p1 -i ..\opencv-3.4.20-link-openmp.patch
        Remove-Item "modules\highgui" -Recurse
        Copy-Item -Recurse -Path "..\highgui" -Destination "modules\"
    - name: build-x86
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x86; cd build-x86
        cmake -T v142,host=x64 -A Win32 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release $(type ../../opencv3_cmake_options.txt) -DBUILD_opencv_world=OFF ..
        cmake --build . --config Release -j 2
        cmake --build . --config Release --target install
    - name: build-x64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x64; cd build-x64
        cmake -T v142,host=x64 -A x64 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release $(type ../../opencv3_cmake_options.txt) -DBUILD_opencv_world=OFF ..
        cmake --build . --config Release -j 2
        cmake --build . --config Release --target install
    - name: package
      run: |
        mkdir ${{ env.PACKAGENAME }}
        mkdir ${{ env.PACKAGENAME }}/x86
        mkdir ${{ env.PACKAGENAME }}/x64
        Copy-Item -Verbose -Recurse -Path "opencv-${{ env.OPENCV_VERSION }}\build-x86\install\*" -Destination "${{ env.PACKAGENAME }}\x86"
        Copy-Item -Verbose -Recurse -Path "opencv-${{ env.OPENCV_VERSION }}\build-x64\install\*" -Destination "${{ env.PACKAGENAME }}\x64"
        Remove-Item "${{ env.PACKAGENAME }}\x86\etc" -Recurse
        Remove-Item "${{ env.PACKAGENAME }}\x64\etc" -Recurse
        7z a -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: test-x86
      run: |
        cd test
        mkdir build-x86; cd build-x86
        cmake -T v142,host=x64 -A Win32 -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR="$env:GITHUB_WORKSPACE\${{ env.PACKAGENAME }}\x86" -DOpenCV_STATIC=ON ..
        cmake --build . --config Release -j 2
    - name: test-x64
      run: |
        cd test
        mkdir build-x64; cd build-x64
        cmake -T v142,host=x64 -A x64 -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR="$env:GITHUB_WORKSPACE\${{ env.PACKAGENAME }}\x64" -DOpenCV_STATIC=ON ..
        cmake --build . --config Release -j 2
    - name: upload-zip
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  windows-vs2019-opencv2:
    runs-on: windows-2019
    env:
      OPENCV_VERSION: 2.4.13.7
      PACKAGENAME: opencv-mobile-2.4.13.7-windows-vs2019
      UseMultiToolTask: true
    steps:
    - uses: actions/checkout@v3
    - name: opencv-source
      run: |
        Invoke-WebRequest -Uri https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -OutFile opencv-${{ env.OPENCV_VERSION }}.zip
        7z x ./opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        Clear-Content "cmake\OpenCVFindLibsGrfmt.cmake"
        C:\msys64\usr\bin\patch.exe -p1 -i ..\opencv-2.4.13.7-no-zlib.patch
        C:\msys64\usr\bin\patch.exe -p1 -i ..\opencv-2.4.13.7-fix-highgui-include.patch
        C:\msys64\usr\bin\patch.exe -p1 -i ..\opencv-2.4.13.7-enable-cxx11.patch
        C:\msys64\usr\bin\patch.exe -p1 -i ..\opencv-2.4.13.7-link-openmp.patch
        C:\msys64\usr\bin\patch.exe -p1 -i ..\opencv-2.4.13.7-newer-msvc.patch
        Remove-Item "modules\highgui" -Recurse
        Copy-Item -Recurse -Path "..\highgui" -Destination "modules\"
    - name: build-x86
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x86; cd build-x86
        cmake -T v142,host=x64 -A Win32 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release $(type ../../opencv2_cmake_options.txt) -DBUILD_opencv_world=OFF ..
        cmake --build . --config Release -j 2
        cmake --build . --config Release --target install
    - name: build-x64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x64; cd build-x64
        cmake -T v142,host=x64 -A x64 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release $(type ../../opencv2_cmake_options.txt) -DBUILD_opencv_world=OFF ..
        cmake --build . --config Release -j 2
        cmake --build . --config Release --target install
    - name: package
      run: |
        mkdir ${{ env.PACKAGENAME }}
        mkdir ${{ env.PACKAGENAME }}/x86
        mkdir ${{ env.PACKAGENAME }}/x64
        Copy-Item -Verbose -Recurse -Path "opencv-${{ env.OPENCV_VERSION }}\build-x86\install\*" -Destination "${{ env.PACKAGENAME }}\x86"
        Copy-Item -Verbose -Recurse -Path "opencv-${{ env.OPENCV_VERSION }}\build-x64\install\*" -Destination "${{ env.PACKAGENAME }}\x64"
        Remove-Item "${{ env.PACKAGENAME }}\x86\share" -Recurse
        Remove-Item "${{ env.PACKAGENAME }}\x64\share" -Recurse
        7z a -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: test-x86
      run: |
        cd test
        mkdir build-x86; cd build-x86
        cmake -T v142,host=x64 -A Win32 -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR="$env:GITHUB_WORKSPACE\${{ env.PACKAGENAME }}\x86" -DOpenCV_STATIC=ON ..
        cmake --build . --config Release -j 2
    - name: test-x64
      run: |
        cd test
        mkdir build-x64; cd build-x64
        cmake -T v142,host=x64 -A x64 -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR="$env:GITHUB_WORKSPACE\${{ env.PACKAGENAME }}\x64" -DOpenCV_STATIC=ON ..
        cmake --build . --config Release -j 2
    - name: upload-zip
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  windows-vs2022-opencv4:
    runs-on: windows-2022
    env:
      OPENCV_VERSION: 4.8.1
      PACKAGENAME: opencv-mobile-4.8.1-windows-vs2022
      UseMultiToolTask: true
    steps:
    - uses: msys2/setup-msys2@v2
      with:
        release: false
        install: >-
          base-devel
    - uses: actions/checkout@v3
    - name: opencv-source
      run: |
        Invoke-WebRequest -Uri https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -OutFile opencv-${{ env.OPENCV_VERSION }}.zip
        7z x ./opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        Clear-Content "cmake\OpenCVFindLibsGrfmt.cmake"
        Remove-Item "modules\gapi" -Recurse
        C:\msys64\usr\bin\patch.exe -p1 -i ..\opencv-4.8.1-no-zlib.patch
        C:\msys64\usr\bin\patch.exe -p1 -i ..\opencv-4.8.1-link-openmp.patch
        Remove-Item "modules\highgui" -Recurse
        Copy-Item -Recurse -Path "..\highgui" -Destination "modules\"
    - name: build-x86
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x86; cd build-x86
        cmake -T v143,host=x64 -A Win32 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release $(type ../../opencv4_cmake_options.txt) -DBUILD_opencv_world=OFF ..
        cmake --build . --config Release -j 2
        cmake --build . --config Release --target install
    - name: build-x64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x64; cd build-x64
        cmake -T v143,host=x64 -A x64 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release $(type ../../opencv4_cmake_options.txt) -DBUILD_opencv_world=OFF ..
        cmake --build . --config Release -j 2
        cmake --build . --config Release --target install
    - name: package
      run: |
        mkdir ${{ env.PACKAGENAME }}
        mkdir ${{ env.PACKAGENAME }}/x86
        mkdir ${{ env.PACKAGENAME }}/x64
        Copy-Item -Verbose -Recurse -Path "opencv-${{ env.OPENCV_VERSION }}\build-x86\install\*" -Destination "${{ env.PACKAGENAME }}\x86"
        Copy-Item -Verbose -Recurse -Path "opencv-${{ env.OPENCV_VERSION }}\build-x64\install\*" -Destination "${{ env.PACKAGENAME }}\x64"
        Remove-Item "${{ env.PACKAGENAME }}\x86\etc" -Recurse
        Remove-Item "${{ env.PACKAGENAME }}\x64\etc" -Recurse
        7z a -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: test-x86
      run: |
        cd test
        mkdir build-x86; cd build-x86
        cmake -T v143,host=x64 -A Win32 -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR="$env:GITHUB_WORKSPACE\${{ env.PACKAGENAME }}\x86" -DOpenCV_STATIC=ON ..
        cmake --build . --config Release -j 2
    - name: test-x64
      run: |
        cd test
        mkdir build-x64; cd build-x64
        cmake -T v143,host=x64 -A x64 -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR="$env:GITHUB_WORKSPACE\${{ env.PACKAGENAME }}\x64" -DOpenCV_STATIC=ON ..
        cmake --build . --config Release -j 2
    - name: upload-zip
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  windows-vs2022-opencv3:
    runs-on: windows-2022
    env:
      OPENCV_VERSION: 3.4.20
      PACKAGENAME: opencv-mobile-3.4.20-windows-vs2022
      UseMultiToolTask: true
    steps:
    - uses: msys2/setup-msys2@v2
      with:
        release: false
        install: >-
          base-devel
    - uses: actions/checkout@v3
    - name: opencv-source
      run: |
        Invoke-WebRequest -Uri https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -OutFile opencv-${{ env.OPENCV_VERSION }}.zip
        7z x ./opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        Clear-Content "cmake\OpenCVFindLibsGrfmt.cmake"
        C:\msys64\usr\bin\patch.exe -p1 -i ..\opencv-3.4.20-no-zlib.patch
        C:\msys64\usr\bin\patch.exe -p1 -i ..\opencv-3.4.20-link-openmp.patch
        Remove-Item "modules\highgui" -Recurse
        Copy-Item -Recurse -Path "..\highgui" -Destination "modules\"
    - name: build-x86
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x86; cd build-x86
        cmake -T v143,host=x64 -A Win32 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release $(type ../../opencv3_cmake_options.txt) -DBUILD_opencv_world=OFF ..
        cmake --build . --config Release -j 2
        cmake --build . --config Release --target install
    - name: build-x64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x64; cd build-x64
        cmake -T v143,host=x64 -A x64 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release $(type ../../opencv3_cmake_options.txt) -DBUILD_opencv_world=OFF ..
        cmake --build . --config Release -j 2
        cmake --build . --config Release --target install
    - name: package
      run: |
        mkdir ${{ env.PACKAGENAME }}
        mkdir ${{ env.PACKAGENAME }}/x86
        mkdir ${{ env.PACKAGENAME }}/x64
        Copy-Item -Verbose -Recurse -Path "opencv-${{ env.OPENCV_VERSION }}\build-x86\install\*" -Destination "${{ env.PACKAGENAME }}\x86"
        Copy-Item -Verbose -Recurse -Path "opencv-${{ env.OPENCV_VERSION }}\build-x64\install\*" -Destination "${{ env.PACKAGENAME }}\x64"
        Remove-Item "${{ env.PACKAGENAME }}\x86\etc" -Recurse
        Remove-Item "${{ env.PACKAGENAME }}\x64\etc" -Recurse
        7z a -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: test-x86
      run: |
        cd test
        mkdir build-x86; cd build-x86
        cmake -T v143,host=x64 -A Win32 -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR="$env:GITHUB_WORKSPACE\${{ env.PACKAGENAME }}\x86" -DOpenCV_STATIC=ON ..
        cmake --build . --config Release -j 2
    - name: test-x64
      run: |
        cd test
        mkdir build-x64; cd build-x64
        cmake -T v143,host=x64 -A x64 -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR="$env:GITHUB_WORKSPACE\${{ env.PACKAGENAME }}\x64" -DOpenCV_STATIC=ON ..
        cmake --build . --config Release -j 2
    - name: upload-zip
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  windows-vs2022-opencv2:
    runs-on: windows-2022
    env:
      OPENCV_VERSION: 2.4.13.7
      PACKAGENAME: opencv-mobile-2.4.13.7-windows-vs2022
      UseMultiToolTask: true
    steps:
    - uses: msys2/setup-msys2@v2
      with:
        release: false
        install: >-
          base-devel
    - uses: actions/checkout@v3
    - name: opencv-source
      run: |
        Invoke-WebRequest -Uri https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -OutFile opencv-${{ env.OPENCV_VERSION }}.zip
        7z x ./opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        Clear-Content "cmake\OpenCVFindLibsGrfmt.cmake"
        C:\msys64\usr\bin\patch.exe -p1 -i ..\opencv-2.4.13.7-no-zlib.patch
        C:\msys64\usr\bin\patch.exe -p1 -i ..\opencv-2.4.13.7-fix-highgui-include.patch
        C:\msys64\usr\bin\patch.exe -p1 -i ..\opencv-2.4.13.7-enable-cxx11.patch
        C:\msys64\usr\bin\patch.exe -p1 -i ..\opencv-2.4.13.7-link-openmp.patch
        C:\msys64\usr\bin\patch.exe -p1 -i ..\opencv-2.4.13.7-newer-msvc.patch
        Remove-Item "modules\highgui" -Recurse
        Copy-Item -Recurse -Path "..\highgui" -Destination "modules\"
    - name: build-x86
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x86; cd build-x86
        cmake -T v143,host=x64 -A Win32 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release $(type ../../opencv2_cmake_options.txt) -DBUILD_opencv_world=OFF ..
        cmake --build . --config Release -j 2
        cmake --build . --config Release --target install
    - name: build-x64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x64; cd build-x64
        cmake -T v143,host=x64 -A x64 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release $(type ../../opencv2_cmake_options.txt) -DBUILD_opencv_world=OFF ..
        cmake --build . --config Release -j 2
        cmake --build . --config Release --target install
    - name: package
      run: |
        mkdir ${{ env.PACKAGENAME }}
        mkdir ${{ env.PACKAGENAME }}/x86
        mkdir ${{ env.PACKAGENAME }}/x64
        Copy-Item -Verbose -Recurse -Path "opencv-${{ env.OPENCV_VERSION }}\build-x86\install\*" -Destination "${{ env.PACKAGENAME }}\x86"
        Copy-Item -Verbose -Recurse -Path "opencv-${{ env.OPENCV_VERSION }}\build-x64\install\*" -Destination "${{ env.PACKAGENAME }}\x64"
        Remove-Item "${{ env.PACKAGENAME }}\x86\share" -Recurse
        Remove-Item "${{ env.PACKAGENAME }}\x64\share" -Recurse
        7z a -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: test-x86
      run: |
        cd test
        mkdir build-x86; cd build-x86
        cmake -T v143,host=x64 -A Win32 -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR="$env:GITHUB_WORKSPACE\${{ env.PACKAGENAME }}\x86" -DOpenCV_STATIC=ON ..
        cmake --build . --config Release -j 2
    - name: test-x64
      run: |
        cd test
        mkdir build-x64; cd build-x64
        cmake -T v143,host=x64 -A x64 -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR="$env:GITHUB_WORKSPACE\${{ env.PACKAGENAME }}\x64" -DOpenCV_STATIC=ON ..
        cmake --build . --config Release -j 2
    - name: upload-zip
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  ubuntu-2004-opencv4:
    runs-on: ubuntu-20.04
    env:
      OPENCV_VERSION: 4.8.1
      PACKAGENAME: opencv-mobile-4.8.1-ubuntu-2004
    steps:
    - uses: actions/checkout@v3
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        truncate -s 0 cmake/OpenCVFindLibsGrfmt.cmake
        rm -rf modules/gapi
        patch -p1 -i ../opencv-4.8.1-no-zlib.patch
        patch -p1 -i ../opencv-4.8.1-link-openmp.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/
    - name: build
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build && cd build
        cmake -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv4_cmake_options.txt` -DBUILD_opencv_world=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package
      run: |
        rm -rf ${{ env.PACKAGENAME }}
        mkdir -p ${{ env.PACKAGENAME }}
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build/install/* ${{ env.PACKAGENAME }}/
        rm -rf ${{ env.PACKAGENAME }}/share/opencv4
        rm -f ${{ env.PACKAGENAME }}.zip
        zip -9 -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: test
      run: |
        cd test
        mkdir build && cd build
        cmake -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR=$GITHUB_WORKSPACE/${{ env.PACKAGENAME }}/lib/cmake/opencv4 ..
        cmake --build . -j 2
    - name: upload
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  ubuntu-2004-opencv3:
    runs-on: ubuntu-20.04
    env:
      OPENCV_VERSION: 3.4.20
      PACKAGENAME: opencv-mobile-3.4.20-ubuntu-2004
    steps:
    - uses: actions/checkout@v3
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        truncate -s 0 cmake/OpenCVFindLibsGrfmt.cmake
        patch -p1 -i ../opencv-3.4.20-no-zlib.patch
        patch -p1 -i ../opencv-3.4.20-link-openmp.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/
    - name: build
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build && cd build
        cmake -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package
      run: |
        rm -rf ${{ env.PACKAGENAME }}
        mkdir -p ${{ env.PACKAGENAME }}
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build/install/* ${{ env.PACKAGENAME }}/
        rm -rf ${{ env.PACKAGENAME }}/share/OpenCV/haarcascades
        rm -rf ${{ env.PACKAGENAME }}/share/OpenCV/lbpcascades
        rm -rf ${{ env.PACKAGENAME }}/share/OpenCV/valgrind.supp
        rm -rf ${{ env.PACKAGENAME }}/share/OpenCV/valgrind_3rdparty.supp
        rm -f ${{ env.PACKAGENAME }}.zip
        zip -9 -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: test
      run: |
        cd test
        mkdir build && cd build
        cmake -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR=$GITHUB_WORKSPACE/${{ env.PACKAGENAME }}/share/OpenCV ..
        cmake --build . -j 2
    - name: upload
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  ubuntu-2004-opencv2:
    runs-on: ubuntu-20.04
    env:
      OPENCV_VERSION: 2.4.13.7
      PACKAGENAME: opencv-mobile-2.4.13.7-ubuntu-2004
    steps:
    - uses: actions/checkout@v3
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        truncate -s 0 cmake/OpenCVFindLibsGrfmt.cmake
        patch -p1 -i ../opencv-2.4.13.7-no-zlib.patch
        patch -p1 -i ../opencv-2.4.13.7-fix-highgui-include.patch
        patch -p1 -i ../opencv-2.4.13.7-no-link-stdc++.patch
        patch -p1 -i ../opencv-2.4.13.7-enable-cxx11.patch
        patch -p1 -i ../opencv-2.4.13.7-link-openmp.patch
        patch -p1 -i ../opencv-2.4.13.7-newer-msvc.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/
    - name: build
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build && cd build
        cmake -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv2_cmake_options.txt` -DBUILD_opencv_world=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package
      run: |
        rm -rf ${{ env.PACKAGENAME }}
        mkdir -p ${{ env.PACKAGENAME }}
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build/install/* ${{ env.PACKAGENAME }}/
        rm -rf ${{ env.PACKAGENAME }}/share/OpenCV/haarcascades
        rm -rf ${{ env.PACKAGENAME }}/share/OpenCV/lbpcascades
        rm -f ${{ env.PACKAGENAME }}.zip
        zip -9 -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: test
      run: |
        cd test
        mkdir build && cd build
        cmake -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR=$GITHUB_WORKSPACE/${{ env.PACKAGENAME }}/share/OpenCV ..
        cmake --build . -j 2
    - name: upload
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  ubuntu-2204-opencv4:
    runs-on: ubuntu-22.04
    env:
      OPENCV_VERSION: 4.8.1
      PACKAGENAME: opencv-mobile-4.8.1-ubuntu-2204
    steps:
    - uses: actions/checkout@v3
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        truncate -s 0 cmake/OpenCVFindLibsGrfmt.cmake
        rm -rf modules/gapi
        patch -p1 -i ../opencv-4.8.1-no-zlib.patch
        patch -p1 -i ../opencv-4.8.1-link-openmp.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/
    - name: build
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build && cd build
        cmake -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv4_cmake_options.txt` -DBUILD_opencv_world=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package
      run: |
        rm -rf ${{ env.PACKAGENAME }}
        mkdir -p ${{ env.PACKAGENAME }}
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build/install/* ${{ env.PACKAGENAME }}/
        rm -rf ${{ env.PACKAGENAME }}/share/opencv4
        rm -f ${{ env.PACKAGENAME }}.zip
        zip -9 -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: test
      run: |
        cd test
        mkdir build && cd build
        cmake -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR=$GITHUB_WORKSPACE/${{ env.PACKAGENAME }}/lib/cmake/opencv4 ..
        cmake --build . -j 2
    - name: upload
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  ubuntu-2204-opencv3:
    runs-on: ubuntu-22.04
    env:
      OPENCV_VERSION: 3.4.20
      PACKAGENAME: opencv-mobile-3.4.20-ubuntu-2204
    steps:
    - uses: actions/checkout@v3
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        truncate -s 0 cmake/OpenCVFindLibsGrfmt.cmake
        patch -p1 -i ../opencv-3.4.20-no-zlib.patch
        patch -p1 -i ../opencv-3.4.20-link-openmp.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/
    - name: build
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build && cd build
        cmake -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package
      run: |
        rm -rf ${{ env.PACKAGENAME }}
        mkdir -p ${{ env.PACKAGENAME }}
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build/install/* ${{ env.PACKAGENAME }}/
        rm -rf ${{ env.PACKAGENAME }}/share/OpenCV/haarcascades
        rm -rf ${{ env.PACKAGENAME }}/share/OpenCV/lbpcascades
        rm -rf ${{ env.PACKAGENAME }}/share/OpenCV/valgrind.supp
        rm -rf ${{ env.PACKAGENAME }}/share/OpenCV/valgrind_3rdparty.supp
        rm -f ${{ env.PACKAGENAME }}.zip
        zip -9 -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: test
      run: |
        cd test
        mkdir build && cd build
        cmake -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR=$GITHUB_WORKSPACE/${{ env.PACKAGENAME }}/share/OpenCV ..
        cmake --build . -j 2
    - name: upload
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  ubuntu-2204-opencv2:
    runs-on: ubuntu-22.04
    env:
      OPENCV_VERSION: 2.4.13.7
      PACKAGENAME: opencv-mobile-2.4.13.7-ubuntu-2204
    steps:
    - uses: actions/checkout@v3
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        truncate -s 0 cmake/OpenCVFindLibsGrfmt.cmake
        patch -p1 -i ../opencv-2.4.13.7-no-zlib.patch
        patch -p1 -i ../opencv-2.4.13.7-fix-highgui-include.patch
        patch -p1 -i ../opencv-2.4.13.7-no-link-stdc++.patch
        patch -p1 -i ../opencv-2.4.13.7-enable-cxx11.patch
        patch -p1 -i ../opencv-2.4.13.7-link-openmp.patch
        patch -p1 -i ../opencv-2.4.13.7-newer-msvc.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/
    - name: build
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build && cd build
        cmake -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv2_cmake_options.txt` -DBUILD_opencv_world=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package
      run: |
        rm -rf ${{ env.PACKAGENAME }}
        mkdir -p ${{ env.PACKAGENAME }}
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build/install/* ${{ env.PACKAGENAME }}/
        rm -rf ${{ env.PACKAGENAME }}/share/OpenCV/haarcascades
        rm -rf ${{ env.PACKAGENAME }}/share/OpenCV/lbpcascades
        rm -f ${{ env.PACKAGENAME }}.zip
        zip -9 -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: test
      run: |
        cd test
        mkdir build && cd build
        cmake -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR=$GITHUB_WORKSPACE/${{ env.PACKAGENAME }}/share/OpenCV ..
        cmake --build . -j 2
    - name: upload
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  webassembly-opencv4:
    runs-on: ubuntu-20.04
    env:
      OPENCV_VERSION: 4.8.1
      PACKAGENAME: opencv-mobile-4.8.1-webassembly
    steps:
    - uses: actions/checkout@v3
    - name: emsdk
      run: |
        git clone https://github.com/emscripten-core/emsdk.git
        cd emsdk
        ./emsdk install $EMSCRIPTEN_VERSION
        ./emsdk activate $EMSCRIPTEN_VERSION
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        truncate -s 0 cmake/OpenCVFindLibsGrfmt.cmake
        rm -rf modules/gapi
        patch -p1 -i ../opencv-4.8.1-no-rtti.patch
        patch -p1 -i ../opencv-4.8.1-no-zlib.patch
        patch -p1 -i ../opencv-4.8.1-link-openmp.patch
        patch -p1 -i ../opencv-4.8.1-fix-emscripten-include.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/
    - name: build
      run: |
        source emsdk/emsdk_env.sh
        cd opencv-${{ env.OPENCV_VERSION }}
        patch -p1 -i ../opencv-4.8.1-unsafe-xadd.patch
        mkdir build && cd build
        cmake -DCMAKE_TOOLCHAIN_FILE=../emsdk/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake \
            -DCPU_BASELINE="" -DCPU_DISPATCH="" -DWITH_PTHREADS_PF=OFF -DCV_ENABLE_INTRINSICS=OFF -DBUILD_WASM_INTRIN_TESTS=OFF \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions -s WASM=1 -s USE_PTHREADS=0" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions -s WASM=1 -s USE_PTHREADS=0" \
            -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install `cat ../../opencv4_cmake_options.txt` -DBUILD_opencv_world=OFF -DOPENCV_DISABLE_FILESYSTEM_SUPPORT=ON ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-simd
      run: |
        source emsdk/emsdk_env.sh
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-simd && cd build-simd
        cmake -DCMAKE_TOOLCHAIN_FILE=../emsdk/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake \
            -DCPU_BASELINE="" -DCPU_DISPATCH="" -DWITH_PTHREADS_PF=OFF -DCV_ENABLE_INTRINSICS=ON -DBUILD_WASM_INTRIN_TESTS=OFF \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions -s WASM=1 -s USE_PTHREADS=0 -msimd128" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions -s WASM=1 -s USE_PTHREADS=0 -msimd128" \
            -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install `cat ../../opencv4_cmake_options.txt` -DBUILD_opencv_world=OFF -DOPENCV_DISABLE_FILESYSTEM_SUPPORT=ON ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-threads
      run: |
        source emsdk/emsdk_env.sh
        cd opencv-${{ env.OPENCV_VERSION }}
        patch -p1 -R -i ../opencv-4.8.1-unsafe-xadd.patch
        mkdir build-threads && cd build-threads
        cmake -DCMAKE_TOOLCHAIN_FILE=../emsdk/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake \
            -DCPU_BASELINE="" -DCPU_DISPATCH="" -DWITH_PTHREADS_PF=ON -DCV_ENABLE_INTRINSICS=OFF -DBUILD_WASM_INTRIN_TESTS=OFF \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions -s WASM=1 -s USE_PTHREADS=1 -s PTHREAD_POOL_SIZE=4" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions -s WASM=1 -s USE_PTHREADS=1 -s PTHREAD_POOL_SIZE=4" \
            -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install `cat ../../opencv4_cmake_options.txt` -DBUILD_opencv_world=OFF -DOPENCV_DISABLE_FILESYSTEM_SUPPORT=ON ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-simd-threads
      run: |
        source emsdk/emsdk_env.sh
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-simd-threads && cd build-simd-threads
        cmake -DCMAKE_TOOLCHAIN_FILE=../emsdk/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake \
            -DCPU_BASELINE="" -DCPU_DISPATCH="" -DWITH_PTHREADS_PF=ON -DCV_ENABLE_INTRINSICS=ON -DBUILD_WASM_INTRIN_TESTS=OFF \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions -s WASM=1 -s USE_PTHREADS=1 -s PTHREAD_POOL_SIZE=4 -msimd128" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions -s WASM=1 -s USE_PTHREADS=1 -s PTHREAD_POOL_SIZE=4 -msimd128" \
            -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install `cat ../../opencv4_cmake_options.txt` -DBUILD_opencv_world=OFF -DOPENCV_DISABLE_FILESYSTEM_SUPPORT=ON ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package
      run: |
        rm -rf ${{ env.PACKAGENAME }}
        mkdir -p ${{ env.PACKAGENAME }}
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build/install ${{ env.PACKAGENAME }}/basic
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-simd/install ${{ env.PACKAGENAME }}/simd
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-threads/install ${{ env.PACKAGENAME }}/threads
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-simd-threads/install ${{ env.PACKAGENAME }}/simd-threads
        rm -rf ${{ env.PACKAGENAME }}/basic/share/opencv4
        rm -rf ${{ env.PACKAGENAME }}/simd/share/opencv4
        rm -rf ${{ env.PACKAGENAME }}/threads/share/opencv4
        rm -rf ${{ env.PACKAGENAME }}/simd-threads/share/opencv4
        rm -f ${{ env.PACKAGENAME }}.zip
        zip -9 -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: test
      run: |
        cd test
        mkdir build && cd build
        cmake -DCMAKE_TOOLCHAIN_FILE=../emsdk/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions -s WASM=1 -s USE_PTHREADS=0" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions -s WASM=1 -s USE_PTHREADS=0" \
            -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR=$GITHUB_WORKSPACE/${{ env.PACKAGENAME }}/basic/lib/cmake/opencv4 ..
        cmake --build . -j 2
    - name: test-simd
      run: |
        cd test
        mkdir build-simd && cd build-simd
        cmake -DCMAKE_TOOLCHAIN_FILE=../emsdk/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions -s WASM=1 -s USE_PTHREADS=0 -msimd128" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions -s WASM=1 -s USE_PTHREADS=0 -msimd128" \
            -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR=$GITHUB_WORKSPACE/${{ env.PACKAGENAME }}/simd/lib/cmake/opencv4 ..
        cmake --build . -j 2
    - name: test-threads
      run: |
        cd test
        mkdir build-threads && cd build-threads
        cmake -DCMAKE_TOOLCHAIN_FILE=../emsdk/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions -s WASM=1 -s USE_PTHREADS=1 -s PTHREAD_POOL_SIZE=4" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions -s WASM=1 -s USE_PTHREADS=1 -s PTHREAD_POOL_SIZE=4" \
            -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR=$GITHUB_WORKSPACE/${{ env.PACKAGENAME }}/threads/lib/cmake/opencv4 ..
        cmake --build . -j 2
    - name: test-simd-threads
      run: |
        cd test
        mkdir build-simd-threads && cd build-simd-threads
        cmake -DCMAKE_TOOLCHAIN_FILE=../emsdk/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions -s WASM=1 -s USE_PTHREADS=1 -s PTHREAD_POOL_SIZE=4 -msimd128" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions -s WASM=1 -s USE_PTHREADS=1 -s PTHREAD_POOL_SIZE=4 -msimd128" \
            -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR=$GITHUB_WORKSPACE/${{ env.PACKAGENAME }}/simd-threads/lib/cmake/opencv4 ..
        cmake --build . -j 2
    - name: upload
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  webassembly-opencv3:
    runs-on: ubuntu-20.04
    env:
      OPENCV_VERSION: 3.4.20
      PACKAGENAME: opencv-mobile-3.4.20-webassembly
    steps:
    - uses: actions/checkout@v3
    - name: emsdk
      run: |
        git clone https://github.com/emscripten-core/emsdk.git
        cd emsdk
        ./emsdk install $EMSCRIPTEN_VERSION
        ./emsdk activate $EMSCRIPTEN_VERSION
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        truncate -s 0 cmake/OpenCVFindLibsGrfmt.cmake
        rm -rf modules/gapi
        patch -p1 -i ../opencv-3.4.20-no-rtti.patch
        patch -p1 -i ../opencv-3.4.20-no-zlib.patch
        patch -p1 -i ../opencv-3.4.20-link-openmp.patch
        patch -p1 -i ../opencv-3.4.20-fix-emscripten-include.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/
    - name: build
      run: |
        source emsdk/emsdk_env.sh
        cd opencv-${{ env.OPENCV_VERSION }}
        patch -p1 -i ../opencv-3.4.20-unsafe-xadd.patch
        mkdir build && cd build
        cmake -DCMAKE_TOOLCHAIN_FILE=../emsdk/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake \
            -DCPU_BASELINE="" -DCPU_DISPATCH="" -DWITH_PTHREADS_PF=OFF -DCV_ENABLE_INTRINSICS=OFF -DBUILD_WASM_INTRIN_TESTS=OFF \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions -s WASM=1 -s USE_PTHREADS=0" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions -s WASM=1 -s USE_PTHREADS=0" \
            -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-simd
      run: |
        source emsdk/emsdk_env.sh
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-simd && cd build-simd
        cmake -DCMAKE_TOOLCHAIN_FILE=../emsdk/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake \
            -DCPU_BASELINE="" -DCPU_DISPATCH="" -DWITH_PTHREADS_PF=OFF -DCV_ENABLE_INTRINSICS=ON -DBUILD_WASM_INTRIN_TESTS=OFF \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions -s WASM=1 -s USE_PTHREADS=0 -msimd128" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions -s WASM=1 -s USE_PTHREADS=0 -msimd128" \
            -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-threads
      run: |
        source emsdk/emsdk_env.sh
        cd opencv-${{ env.OPENCV_VERSION }}
        patch -p1 -R -i ../opencv-3.4.20-unsafe-xadd.patch
        mkdir build-threads && cd build-threads
        cmake -DCMAKE_TOOLCHAIN_FILE=../emsdk/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake \
            -DCPU_BASELINE="" -DCPU_DISPATCH="" -DWITH_PTHREADS_PF=ON -DCV_ENABLE_INTRINSICS=OFF -DBUILD_WASM_INTRIN_TESTS=OFF \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions -s WASM=1 -s USE_PTHREADS=1 -s PTHREAD_POOL_SIZE=4" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions -s WASM=1 -s USE_PTHREADS=1 -s PTHREAD_POOL_SIZE=4" \
            -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-simd-threads
      run: |
        source emsdk/emsdk_env.sh
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-simd-threads && cd build-simd-threads
        cmake -DCMAKE_TOOLCHAIN_FILE=../emsdk/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake \
            -DCPU_BASELINE="" -DCPU_DISPATCH="" -DWITH_PTHREADS_PF=ON -DCV_ENABLE_INTRINSICS=ON -DBUILD_WASM_INTRIN_TESTS=OFF \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions -s WASM=1 -s USE_PTHREADS=1 -s PTHREAD_POOL_SIZE=4 -msimd128" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions -s WASM=1 -s USE_PTHREADS=1 -s PTHREAD_POOL_SIZE=4 -msimd128" \
            -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package
      run: |
        rm -rf ${{ env.PACKAGENAME }}
        mkdir -p ${{ env.PACKAGENAME }}
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build/install ${{ env.PACKAGENAME }}/basic
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-simd/install ${{ env.PACKAGENAME }}/simd
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-threads/install ${{ env.PACKAGENAME }}/threads
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-simd-threads/install ${{ env.PACKAGENAME }}/simd-threads
        rm -rf ${{ env.PACKAGENAME }}/basic/share/OpenCV/haarcascades
        rm -rf ${{ env.PACKAGENAME }}/basic/share/OpenCV/lbpcascades
        rm -rf ${{ env.PACKAGENAME }}/basic/share/OpenCV/valgrind.supp
        rm -rf ${{ env.PACKAGENAME }}/basic/share/OpenCV/valgrind_3rdparty.supp
        rm -rf ${{ env.PACKAGENAME }}/simd/share/OpenCV/haarcascades
        rm -rf ${{ env.PACKAGENAME }}/simd/share/OpenCV/lbpcascades
        rm -rf ${{ env.PACKAGENAME }}/simd/share/OpenCV/valgrind.supp
        rm -rf ${{ env.PACKAGENAME }}/simd/share/OpenCV/valgrind_3rdparty.supp
        rm -rf ${{ env.PACKAGENAME }}/threads/share/OpenCV/haarcascades
        rm -rf ${{ env.PACKAGENAME }}/threads/share/OpenCV/lbpcascades
        rm -rf ${{ env.PACKAGENAME }}/threads/share/OpenCV/valgrind.supp
        rm -rf ${{ env.PACKAGENAME }}/threads/share/OpenCV/valgrind_3rdparty.supp
        rm -rf ${{ env.PACKAGENAME }}/simd-threads/share/OpenCV/haarcascades
        rm -rf ${{ env.PACKAGENAME }}/simd-threads/share/OpenCV/lbpcascades
        rm -rf ${{ env.PACKAGENAME }}/simd-threads/share/OpenCV/valgrind.supp
        rm -rf ${{ env.PACKAGENAME }}/simd-threads/share/OpenCV/valgrind_3rdparty.supp
        rm -f ${{ env.PACKAGENAME }}.zip
        zip -9 -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: test
      run: |
        cd test
        mkdir build && cd build
        cmake -DCMAKE_TOOLCHAIN_FILE=../emsdk/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions -s WASM=1 -s USE_PTHREADS=0" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions -s WASM=1 -s USE_PTHREADS=0" \
            -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR=$GITHUB_WORKSPACE/${{ env.PACKAGENAME }}/basic/share/OpenCV ..
        cmake --build . -j 2
    - name: test-simd
      run: |
        cd test
        mkdir build-simd && cd build-simd
        cmake -DCMAKE_TOOLCHAIN_FILE=../emsdk/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions -s WASM=1 -s USE_PTHREADS=0 -msimd128" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions -s WASM=1 -s USE_PTHREADS=0 -msimd128" \
            -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR=$GITHUB_WORKSPACE/${{ env.PACKAGENAME }}/simd/share/OpenCV ..
        cmake --build . -j 2
    - name: test-threads
      run: |
        cd test
        mkdir build-threads && cd build-threads
        cmake -DCMAKE_TOOLCHAIN_FILE=../emsdk/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions -s WASM=1 -s USE_PTHREADS=1 -s PTHREAD_POOL_SIZE=4" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions -s WASM=1 -s USE_PTHREADS=1 -s PTHREAD_POOL_SIZE=4" \
            -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR=$GITHUB_WORKSPACE/${{ env.PACKAGENAME }}/threads/share/OpenCV ..
        cmake --build . -j 2
    - name: test-simd-threads
      run: |
        cd test
        mkdir build-simd-threads && cd build-simd-threads
        cmake -DCMAKE_TOOLCHAIN_FILE=../emsdk/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions -s WASM=1 -s USE_PTHREADS=1 -s PTHREAD_POOL_SIZE=4 -msimd128" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions -s WASM=1 -s USE_PTHREADS=1 -s PTHREAD_POOL_SIZE=4 -msimd128" \
            -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR=$GITHUB_WORKSPACE/${{ env.PACKAGENAME }}/simd-threads/share/OpenCV ..
        cmake --build . -j 2
    - name: upload
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  webassembly-opencv2:
    runs-on: ubuntu-20.04
    env:
      OPENCV_VERSION: 2.4.13.7
      PACKAGENAME: opencv-mobile-2.4.13.7-webassembly
    steps:
    - uses: actions/checkout@v3
    - name: emsdk
      run: |
        git clone https://github.com/emscripten-core/emsdk.git
        cd emsdk
        ./emsdk install $EMSCRIPTEN_VERSION
        ./emsdk activate $EMSCRIPTEN_VERSION
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        truncate -s 0 cmake/OpenCVFindLibsGrfmt.cmake
        rm -rf modules/gapi
        patch -p1 -i ../opencv-2.4.13.7-no-rtti.patch
        patch -p1 -i ../opencv-2.4.13.7-no-zlib.patch
        patch -p1 -i ../opencv-2.4.13.7-fix-highgui-include.patch
        patch -p1 -i ../opencv-2.4.13.7-no-link-stdc++.patch
        patch -p1 -i ../opencv-2.4.13.7-enable-cxx11.patch
        patch -p1 -i ../opencv-2.4.13.7-link-openmp.patch
        patch -p1 -i ../opencv-2.4.13.7-newer-msvc.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/
    - name: build
      run: |
        source emsdk/emsdk_env.sh
        cd opencv-${{ env.OPENCV_VERSION }}
        patch -p1 -i ../opencv-2.4.13.7-unsafe-xadd.patch
        patch -p1 -i ../opencv-2.4.13.7-no-local-static.patch
        mkdir build && cd build
        cmake -DCMAKE_TOOLCHAIN_FILE=../emsdk/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake \
            -DWITH_PTHREADS_PF=OFF -DCV_ENABLE_INTRINSICS=OFF -DBUILD_WASM_INTRIN_TESTS=OFF \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions -s WASM=1 -s USE_PTHREADS=0" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions -s WASM=1 -s USE_PTHREADS=0" \
            -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install `cat ../../opencv2_cmake_options.txt` -DBUILD_opencv_world=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-simd
      run: |
        source emsdk/emsdk_env.sh
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-simd && cd build-simd
        cmake -DCMAKE_TOOLCHAIN_FILE=../emsdk/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake \
            -DWITH_PTHREADS_PF=OFF -DCV_ENABLE_INTRINSICS=ON -DBUILD_WASM_INTRIN_TESTS=OFF \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions -s WASM=1 -s USE_PTHREADS=0 -msimd128" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions -s WASM=1 -s USE_PTHREADS=0 -msimd128" \
            -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install `cat ../../opencv2_cmake_options.txt` -DBUILD_opencv_world=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-threads
      run: |
        source emsdk/emsdk_env.sh
        cd opencv-${{ env.OPENCV_VERSION }}
        patch -p1 -R -i ../opencv-2.4.13.7-unsafe-xadd.patch
        patch -p1 -R -i ../opencv-2.4.13.7-no-local-static.patch
        mkdir build-threads && cd build-threads
        cmake -DCMAKE_TOOLCHAIN_FILE=../emsdk/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake \
            -DWITH_PTHREADS_PF=ON -DCV_ENABLE_INTRINSICS=OFF -DBUILD_WASM_INTRIN_TESTS=OFF \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions -s WASM=1 -s USE_PTHREADS=1 -s PTHREAD_POOL_SIZE=4" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions -s WASM=1 -s USE_PTHREADS=1 -s PTHREAD_POOL_SIZE=4" \
            -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install `cat ../../opencv2_cmake_options.txt` -DBUILD_opencv_world=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-simd-threads
      run: |
        source emsdk/emsdk_env.sh
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-simd-threads && cd build-simd-threads
        cmake -DCMAKE_TOOLCHAIN_FILE=../emsdk/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake \
            -DWITH_PTHREADS_PF=ON -DCV_ENABLE_INTRINSICS=ON -DBUILD_WASM_INTRIN_TESTS=OFF \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions -s WASM=1 -s USE_PTHREADS=1 -s PTHREAD_POOL_SIZE=4 -msimd128" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions -s WASM=1 -s USE_PTHREADS=1 -s PTHREAD_POOL_SIZE=4 -msimd128" \
            -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install `cat ../../opencv2_cmake_options.txt` -DBUILD_opencv_world=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package
      run: |
        rm -rf ${{ env.PACKAGENAME }}
        mkdir -p ${{ env.PACKAGENAME }}
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build/install ${{ env.PACKAGENAME }}/basic
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-simd/install ${{ env.PACKAGENAME }}/simd
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-threads/install ${{ env.PACKAGENAME }}/threads
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-simd-threads/install ${{ env.PACKAGENAME }}/simd-threads
        rm -rf ${{ env.PACKAGENAME }}/basic/share/OpenCV/haarcascades
        rm -rf ${{ env.PACKAGENAME }}/basic/share/OpenCV/lbpcascades
        rm -rf ${{ env.PACKAGENAME }}/simd/share/OpenCV/haarcascades
        rm -rf ${{ env.PACKAGENAME }}/simd/share/OpenCV/lbpcascades
        rm -rf ${{ env.PACKAGENAME }}/threads/share/OpenCV/haarcascades
        rm -rf ${{ env.PACKAGENAME }}/threads/share/OpenCV/lbpcascades
        rm -rf ${{ env.PACKAGENAME }}/simd-threads/share/OpenCV/haarcascades
        rm -rf ${{ env.PACKAGENAME }}/simd-threads/share/OpenCV/lbpcascades
        rm -f ${{ env.PACKAGENAME }}.zip
        zip -9 -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: test
      run: |
        cd test
        mkdir build && cd build
        cmake -DCMAKE_TOOLCHAIN_FILE=../emsdk/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions -s WASM=1 -s USE_PTHREADS=0" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions -s WASM=1 -s USE_PTHREADS=0" \
            -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR=$GITHUB_WORKSPACE/${{ env.PACKAGENAME }}/basic/share/OpenCV ..
        cmake --build . -j 2
    - name: test-simd
      run: |
        cd test
        mkdir build-simd && cd build-simd
        cmake -DCMAKE_TOOLCHAIN_FILE=../emsdk/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions -s WASM=1 -s USE_PTHREADS=0 -msimd128" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions -s WASM=1 -s USE_PTHREADS=0 -msimd128" \
            -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR=$GITHUB_WORKSPACE/${{ env.PACKAGENAME }}/simd/share/OpenCV ..
        cmake --build . -j 2
    - name: test-threads
      run: |
        cd test
        mkdir build-threads && cd build-threads
        cmake -DCMAKE_TOOLCHAIN_FILE=../emsdk/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions -s WASM=1 -s USE_PTHREADS=1 -s PTHREAD_POOL_SIZE=4" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions -s WASM=1 -s USE_PTHREADS=1 -s PTHREAD_POOL_SIZE=4" \
            -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR=$GITHUB_WORKSPACE/${{ env.PACKAGENAME }}/threads/share/OpenCV ..
        cmake --build . -j 2
    - name: test-simd-threads
      run: |
        cd test
        mkdir build-simd-threads && cd build-simd-threads
        cmake -DCMAKE_TOOLCHAIN_FILE=../emsdk/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions -s WASM=1 -s USE_PTHREADS=1 -s PTHREAD_POOL_SIZE=4 -msimd128" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions -s WASM=1 -s USE_PTHREADS=1 -s PTHREAD_POOL_SIZE=4 -msimd128" \
            -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR=$GITHUB_WORKSPACE/${{ env.PACKAGENAME }}/simd-threads/share/OpenCV ..
        cmake --build . -j 2
    - name: upload
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  apple-opencv4:
    needs: [macos-opencv4, ios-opencv4, ios-simulator-opencv4, mac-catalyst-opencv4]
    runs-on: macos-12
    env:
      OPENCV_VERSION: 4.8.1
      PACKAGENAME: opencv-mobile-4.8.1-apple
    steps:
    - run: sudo xcode-select --switch /Applications/Xcode_13.4.1.app
    - name: download
      uses: actions/download-artifact@v3
      with:
        path: artifacts

    - name: create-xcframwork
      run: |
        mkdir -p opencv-mobile-macos
        mkdir -p opencv-mobile-ios
        mkdir -p opencv-mobile-ios-simulator
        mkdir -p opencv-mobile-mac-catalyst

        unzip -q artifacts/opencv-mobile-${{ env.OPENCV_VERSION }}-macos/opencv-mobile-${{ env.OPENCV_VERSION }}-macos.zip -d opencv-mobile-macos
        unzip -q artifacts/opencv-mobile-${{ env.OPENCV_VERSION }}-ios/opencv-mobile-${{ env.OPENCV_VERSION }}-ios.zip -d opencv-mobile-ios
        unzip -q artifacts/opencv-mobile-${{ env.OPENCV_VERSION }}-ios-simulator/opencv-mobile-${{ env.OPENCV_VERSION }}-ios-simulator.zip -d opencv-mobile-ios-simulator
        unzip -q artifacts/opencv-mobile-${{ env.OPENCV_VERSION }}-mac-catalyst/opencv-mobile-${{ env.OPENCV_VERSION }}-mac-catalyst.zip -d opencv-mobile-mac-catalyst

        xcodebuild -create-xcframework \
            -framework opencv-mobile-macos/opencv2.framework \
            -framework opencv-mobile-ios/opencv2.framework \
            -framework opencv-mobile-ios-simulator/opencv2.framework \
            -framework opencv-mobile-mac-catalyst/opencv2.framework \
            -output opencv2.xcframework

        rm -f ${{ env.PACKAGENAME }}.zip
        zip -9 -y -r ${{ env.PACKAGENAME }}.zip opencv2.xcframework
    - name: upload-zip
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  apple-opencv3:
    needs: [macos-opencv3, ios-opencv3, ios-simulator-opencv3, mac-catalyst-opencv3]
    runs-on: macos-12
    env:
      OPENCV_VERSION: 3.4.20
      PACKAGENAME: opencv-mobile-3.4.20-apple
    steps:
    - run: sudo xcode-select --switch /Applications/Xcode_13.4.1.app
    - name: download
      uses: actions/download-artifact@v3
      with:
        path: artifacts

    - name: create-xcframwork
      run: |
        mkdir -p opencv-mobile-macos
        mkdir -p opencv-mobile-ios
        mkdir -p opencv-mobile-ios-simulator
        mkdir -p opencv-mobile-mac-catalyst

        unzip -q artifacts/opencv-mobile-${{ env.OPENCV_VERSION }}-macos/opencv-mobile-${{ env.OPENCV_VERSION }}-macos.zip -d opencv-mobile-macos
        unzip -q artifacts/opencv-mobile-${{ env.OPENCV_VERSION }}-ios/opencv-mobile-${{ env.OPENCV_VERSION }}-ios.zip -d opencv-mobile-ios
        unzip -q artifacts/opencv-mobile-${{ env.OPENCV_VERSION }}-ios-simulator/opencv-mobile-${{ env.OPENCV_VERSION }}-ios-simulator.zip -d opencv-mobile-ios-simulator
        unzip -q artifacts/opencv-mobile-${{ env.OPENCV_VERSION }}-mac-catalyst/opencv-mobile-${{ env.OPENCV_VERSION }}-mac-catalyst.zip -d opencv-mobile-mac-catalyst

        xcodebuild -create-xcframework \
            -framework opencv-mobile-macos/opencv2.framework \
            -framework opencv-mobile-ios/opencv2.framework \
            -framework opencv-mobile-ios-simulator/opencv2.framework \
            -framework opencv-mobile-mac-catalyst/opencv2.framework \
            -output opencv2.xcframework

        rm -f ${{ env.PACKAGENAME }}.zip
        zip -9 -y -r ${{ env.PACKAGENAME }}.zip opencv2.xcframework
    - name: upload-zip
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  apple-opencv2:
    needs: [macos-opencv2, ios-opencv2, ios-simulator-opencv2, mac-catalyst-opencv2]
    runs-on: macos-12
    env:
      OPENCV_VERSION: 2.4.13.7
      PACKAGENAME: opencv-mobile-2.4.13.7-apple
    steps:
    - run: sudo xcode-select --switch /Applications/Xcode_13.4.1.app
    - name: download
      uses: actions/download-artifact@v3
      with:
        path: artifacts

    - name: create-xcframwork
      run: |
        mkdir -p opencv-mobile-macos
        mkdir -p opencv-mobile-ios
        mkdir -p opencv-mobile-ios-simulator
        mkdir -p opencv-mobile-mac-catalyst

        unzip -q artifacts/opencv-mobile-${{ env.OPENCV_VERSION }}-macos/opencv-mobile-${{ env.OPENCV_VERSION }}-macos.zip -d opencv-mobile-macos
        unzip -q artifacts/opencv-mobile-${{ env.OPENCV_VERSION }}-ios/opencv-mobile-${{ env.OPENCV_VERSION }}-ios.zip -d opencv-mobile-ios
        unzip -q artifacts/opencv-mobile-${{ env.OPENCV_VERSION }}-ios-simulator/opencv-mobile-${{ env.OPENCV_VERSION }}-ios-simulator.zip -d opencv-mobile-ios-simulator
        unzip -q artifacts/opencv-mobile-${{ env.OPENCV_VERSION }}-mac-catalyst/opencv-mobile-${{ env.OPENCV_VERSION }}-mac-catalyst.zip -d opencv-mobile-mac-catalyst

        xcodebuild -create-xcframework \
            -framework opencv-mobile-macos/opencv2.framework \
            -framework opencv-mobile-ios/opencv2.framework \
            -framework opencv-mobile-ios-simulator/opencv2.framework \
            -framework opencv-mobile-mac-catalyst/opencv2.framework \
            -output opencv2.xcframework

        rm -f ${{ env.PACKAGENAME }}.zip
        zip -9 -y -r ${{ env.PACKAGENAME }}.zip opencv2.xcframework
    - name: upload-zip
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  apple-opencv4-bitcode:
    needs: [macos-opencv4, ios-opencv4-bitcode, ios-simulator-opencv4-bitcode, mac-catalyst-opencv4-bitcode]
    runs-on: macos-12
    env:
      OPENCV_VERSION: 4.8.1
      PACKAGENAME: opencv-mobile-4.8.1-apple-bitcode
    steps:
    - run: sudo xcode-select --switch /Applications/Xcode_13.4.1.app
    - name: download
      uses: actions/download-artifact@v3
      with:
        path: artifacts

    - name: create-xcframwork
      run: |
        mkdir -p opencv-mobile-macos
        mkdir -p opencv-mobile-ios-bitcode
        mkdir -p opencv-mobile-ios-simulator-bitcode
        mkdir -p opencv-mobile-mac-catalyst-bitcode

        unzip -q artifacts/opencv-mobile-${{ env.OPENCV_VERSION }}-macos/opencv-mobile-${{ env.OPENCV_VERSION }}-macos.zip -d opencv-mobile-macos
        unzip -q artifacts/opencv-mobile-${{ env.OPENCV_VERSION }}-ios-bitcode/opencv-mobile-${{ env.OPENCV_VERSION }}-ios-bitcode.zip -d opencv-mobile-ios-bitcode
        unzip -q artifacts/opencv-mobile-${{ env.OPENCV_VERSION }}-ios-simulator-bitcode/opencv-mobile-${{ env.OPENCV_VERSION }}-ios-simulator-bitcode.zip -d opencv-mobile-ios-simulator-bitcode
        unzip -q artifacts/opencv-mobile-${{ env.OPENCV_VERSION }}-mac-catalyst-bitcode/opencv-mobile-${{ env.OPENCV_VERSION }}-mac-catalyst-bitcode.zip -d opencv-mobile-mac-catalyst-bitcode

        xcodebuild -create-xcframework \
            -framework opencv-mobile-macos/opencv2.framework \
            -framework opencv-mobile-ios-bitcode/opencv2.framework \
            -framework opencv-mobile-ios-simulator-bitcode/opencv2.framework \
            -framework opencv-mobile-mac-catalyst-bitcode/opencv2.framework \
            -output opencv2.xcframework

        rm -f ${{ env.PACKAGENAME }}.zip
        zip -9 -y -r ${{ env.PACKAGENAME }}.zip opencv2.xcframework
    - name: upload-zip
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  apple-opencv3-bitcode:
    needs: [macos-opencv3, ios-opencv3-bitcode, ios-simulator-opencv3-bitcode, mac-catalyst-opencv3-bitcode]
    runs-on: macos-12
    env:
      OPENCV_VERSION: 3.4.20
      PACKAGENAME: opencv-mobile-3.4.20-apple-bitcode
    steps:
    - run: sudo xcode-select --switch /Applications/Xcode_13.4.1.app
    - name: download
      uses: actions/download-artifact@v3
      with:
        path: artifacts

    - name: create-xcframwork
      run: |
        mkdir -p opencv-mobile-macos
        mkdir -p opencv-mobile-ios-bitcode
        mkdir -p opencv-mobile-ios-simulator-bitcode
        mkdir -p opencv-mobile-mac-catalyst-bitcode

        unzip -q artifacts/opencv-mobile-${{ env.OPENCV_VERSION }}-macos/opencv-mobile-${{ env.OPENCV_VERSION }}-macos.zip -d opencv-mobile-macos
        unzip -q artifacts/opencv-mobile-${{ env.OPENCV_VERSION }}-ios-bitcode/opencv-mobile-${{ env.OPENCV_VERSION }}-ios-bitcode.zip -d opencv-mobile-ios-bitcode
        unzip -q artifacts/opencv-mobile-${{ env.OPENCV_VERSION }}-ios-simulator-bitcode/opencv-mobile-${{ env.OPENCV_VERSION }}-ios-simulator-bitcode.zip -d opencv-mobile-ios-simulator-bitcode
        unzip -q artifacts/opencv-mobile-${{ env.OPENCV_VERSION }}-mac-catalyst-bitcode/opencv-mobile-${{ env.OPENCV_VERSION }}-mac-catalyst-bitcode.zip -d opencv-mobile-mac-catalyst-bitcode

        xcodebuild -create-xcframework \
            -framework opencv-mobile-macos/opencv2.framework \
            -framework opencv-mobile-ios-bitcode/opencv2.framework \
            -framework opencv-mobile-ios-simulator-bitcode/opencv2.framework \
            -framework opencv-mobile-mac-catalyst-bitcode/opencv2.framework \
            -output opencv2.xcframework

        rm -f ${{ env.PACKAGENAME }}.zip
        zip -9 -y -r ${{ env.PACKAGENAME }}.zip opencv2.xcframework
    - name: upload-zip
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  apple-opencv2-bitcode:
    needs: [macos-opencv2, ios-opencv2-bitcode, ios-simulator-opencv2-bitcode, mac-catalyst-opencv2-bitcode]
    runs-on: macos-12
    env:
      OPENCV_VERSION: 2.4.13.7
      PACKAGENAME: opencv-mobile-2.4.13.7-apple-bitcode
    steps:
    - run: sudo xcode-select --switch /Applications/Xcode_13.4.1.app
    - name: download
      uses: actions/download-artifact@v3
      with:
        path: artifacts

    - name: create-xcframwork
      run: |
        mkdir -p opencv-mobile-macos
        mkdir -p opencv-mobile-ios-bitcode
        mkdir -p opencv-mobile-ios-simulator-bitcode
        mkdir -p opencv-mobile-mac-catalyst-bitcode

        unzip -q artifacts/opencv-mobile-${{ env.OPENCV_VERSION }}-macos/opencv-mobile-${{ env.OPENCV_VERSION }}-macos.zip -d opencv-mobile-macos
        unzip -q artifacts/opencv-mobile-${{ env.OPENCV_VERSION }}-ios-bitcode/opencv-mobile-${{ env.OPENCV_VERSION }}-ios-bitcode.zip -d opencv-mobile-ios-bitcode
        unzip -q artifacts/opencv-mobile-${{ env.OPENCV_VERSION }}-ios-simulator-bitcode/opencv-mobile-${{ env.OPENCV_VERSION }}-ios-simulator-bitcode.zip -d opencv-mobile-ios-simulator-bitcode
        unzip -q artifacts/opencv-mobile-${{ env.OPENCV_VERSION }}-mac-catalyst-bitcode/opencv-mobile-${{ env.OPENCV_VERSION }}-mac-catalyst-bitcode.zip -d opencv-mobile-mac-catalyst-bitcode

        xcodebuild -create-xcframework \
            -framework opencv-mobile-macos/opencv2.framework \
            -framework opencv-mobile-ios-bitcode/opencv2.framework \
            -framework opencv-mobile-ios-simulator-bitcode/opencv2.framework \
            -framework opencv-mobile-mac-catalyst-bitcode/opencv2.framework \
            -output opencv2.xcframework

        rm -f ${{ env.PACKAGENAME }}.zip
        zip -9 -y -r ${{ env.PACKAGENAME }}.zip opencv2.xcframework
    - name: upload-zip
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  milkv-duo-opencv4:
    runs-on: ubuntu-latest
    env:
      OPENCV_VERSION: 4.8.1
      PACKAGENAME: opencv-mobile-4.8.1-milkv-duo
    steps:
    - uses: actions/checkout@v3
    - name: toolchain
      run: |
        wget -q https://sophon-file.sophon.cn/sophon-prod-s3/drive/23/03/07/16/host-tools.tar.gz -O host-tools.tar.gz
        tar -xf host-tools.tar.gz
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        truncate -s 0 cmake/OpenCVFindLibsGrfmt.cmake
        rm -rf modules/gapi
        patch -p1 -i ../opencv-4.8.1-no-rtti.patch
        patch -p1 -i ../opencv-4.8.1-no-zlib.patch
        patch -p1 -i ../opencv-4.8.1-no-atomic.patch
        patch -p1 -i ../opencv-4.8.1-link-openmp.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/
    - name: build
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build && cd build
        export RISCV_ROOT_PATH=$GITHUB_WORKSPACE/host-tools/gcc/riscv64-linux-musl-x86_64
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/riscv64-unknown-linux-musl.toolchain.cmake \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv4_cmake_options.txt` -DBUILD_opencv_world=OFF \
            -DOPENCV_DISABLE_FILESYSTEM_SUPPORT=ON -DWITH_OPENMP=OFF -DOPENCV_DISABLE_THREAD_SUPPORT=ON ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package
      run: |
        mkdir ${{ env.PACKAGENAME }}
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build/install/* ${{ env.PACKAGENAME }}/
        rm -rf ${{ env.PACKAGENAME }}/share/opencv4
        zip -9 -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: test
      run: |
        cd test
        mkdir build && cd build
        export RISCV_ROOT_PATH=$GITHUB_WORKSPACE/host-tools/gcc/riscv64-linux-musl-x86_64
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/riscv64-unknown-linux-musl.toolchain.cmake \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR=$GITHUB_WORKSPACE/${{ env.PACKAGENAME }}/lib/cmake/opencv4 ..
        cmake --build . -j 2
    - name: upload
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  luckfox-pico-opencv4:
    runs-on: ubuntu-latest
    env:
      OPENCV_VERSION: 4.8.1
      PACKAGENAME: opencv-mobile-4.8.1-luckfox-pico
    steps:
    - uses: actions/checkout@v3
    - name: toolchain
      run: |
        git clone --depth 1 https://github.com/LuckfoxTECH/luckfox-pico.git luckfox-pico
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        truncate -s 0 cmake/OpenCVFindLibsGrfmt.cmake
        rm -rf modules/gapi
        patch -p1 -i ../opencv-4.8.1-no-rtti.patch
        patch -p1 -i ../opencv-4.8.1-no-zlib.patch
        patch -p1 -i ../opencv-4.8.1-no-atomic.patch
        patch -p1 -i ../opencv-4.8.1-link-openmp.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/
    - name: build
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build && cd build
        export TOOLCHAIN_ROOT_PATH=$GITHUB_WORKSPACE/luckfox-pico/tools/linux/toolchain/arm-rockchip830-linux-uclibcgnueabihf
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/arm-rockchip830-linux-uclibcgnueabihf.toolchain.cmake \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv4_cmake_options.txt` -DBUILD_opencv_world=OFF \
            -DOPENCV_DISABLE_FILESYSTEM_SUPPORT=ON -DWITH_OPENMP=OFF -DOPENCV_DISABLE_THREAD_SUPPORT=ON ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package
      run: |
        mkdir ${{ env.PACKAGENAME }}
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build/install/* ${{ env.PACKAGENAME }}/
        rm -rf ${{ env.PACKAGENAME }}/share/opencv4
        zip -9 -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: test
      run: |
        cd test
        mkdir build && cd build
        export TOOLCHAIN_ROOT_PATH=$GITHUB_WORKSPACE/luckfox-pico/tools/linux/toolchain/arm-rockchip830-linux-uclibcgnueabihf
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/arm-rockchip830-linux-uclibcgnueabihf.toolchain.cmake \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR=$GITHUB_WORKSPACE/${{ env.PACKAGENAME }}/lib/cmake/opencv4 ..
        cmake --build . -j 2
    - name: upload
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  yuzuki-lizard-opencv4:
    runs-on: ubuntu-latest
    env:
      OPENCV_VERSION: 4.8.1
      PACKAGENAME: opencv-mobile-4.8.1-yuzuki-lizard
    steps:
    - uses: actions/checkout@v3
    - name: toolchain
      run: |
        wget -q https://github.com/YuzukiHD/Yuzukilizard/releases/download/Toolchains/toolchain-sunxi-musl-gcc-830.tar.gz -O toolchain-sunxi-musl-gcc-830.tar.gz
        tar -xf toolchain-sunxi-musl-gcc-830.tar.gz
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        truncate -s 0 cmake/OpenCVFindLibsGrfmt.cmake
        rm -rf modules/gapi
        patch -p1 -i ../opencv-4.8.1-no-rtti.patch
        patch -p1 -i ../opencv-4.8.1-no-zlib.patch
        patch -p1 -i ../opencv-4.8.1-no-atomic.patch
        patch -p1 -i ../opencv-4.8.1-link-openmp.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/
    - name: build
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build && cd build
        export TOOLCHAIN_ROOT_PATH=$GITHUB_WORKSPACE/toolchain-sunxi-musl-gcc-830/toolchain
        export STAGING_DIR=$GITHUB_WORKSPACE/toolchain-sunxi-musl-gcc-830/toolchain
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/arm-openwrt-linux-muslgnueabi.toolchain.cmake \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv4_cmake_options.txt` -DBUILD_opencv_world=OFF \
            -DOPENCV_DISABLE_FILESYSTEM_SUPPORT=ON -DWITH_OPENMP=OFF -DOPENCV_DISABLE_THREAD_SUPPORT=ON ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package
      run: |
        mkdir ${{ env.PACKAGENAME }}
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build/install/* ${{ env.PACKAGENAME }}/
        rm -rf ${{ env.PACKAGENAME }}/share/opencv4
        zip -9 -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: test
      run: |
        cd test
        mkdir build && cd build
        export TOOLCHAIN_ROOT_PATH=$GITHUB_WORKSPACE/toolchain-sunxi-musl-gcc-830/toolchain
        export STAGING_DIR=$GITHUB_WORKSPACE/toolchain-sunxi-musl-gcc-830/toolchain
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/arm-openwrt-linux-muslgnueabi.toolchain.cmake \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR=$GITHUB_WORKSPACE/${{ env.PACKAGENAME }}/lib/cmake/opencv4 ..
        cmake --build . -j 2
    - name: upload
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  purple-pi-opencv4:
    runs-on: ubuntu-latest
    env:
      OPENCV_VERSION: 4.8.1
      PACKAGENAME: opencv-mobile-4.8.1-purple-pi
    steps:
    - uses: actions/checkout@v3
    - name: toolchain
      run: |
        git clone --depth 1 https://github.com/industio/PurPle-Pi-R1.git
        cd PurPle-Pi-R1/toolchain
        sh install_toolchain.sh
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        truncate -s 0 cmake/OpenCVFindLibsGrfmt.cmake
        rm -rf modules/gapi
        patch -p1 -i ../opencv-4.8.1-no-rtti.patch
        patch -p1 -i ../opencv-4.8.1-no-zlib.patch
        patch -p1 -i ../opencv-4.8.1-link-openmp.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/
    - name: build
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build && cd build
        export PATH=$PATH:$GITHUB_WORKSPACE/PurPle-Pi-R1/toolchain/gcc-arm-8.2-2018.08-x86_64-arm-linux-gnueabihf/bin
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/arm-linux-gnueabihf.toolchain.cmake \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv4_cmake_options.txt` -DBUILD_opencv_world=OFF -DOPENCV_DISABLE_FILESYSTEM_SUPPORT=ON ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package
      run: |
        mkdir ${{ env.PACKAGENAME }}
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build/install/* ${{ env.PACKAGENAME }}/
        rm -rf ${{ env.PACKAGENAME }}/share/opencv4
        zip -9 -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: test
      run: |
        cd test
        mkdir build && cd build
        export PATH=$PATH:$GITHUB_WORKSPACE/PurPle-Pi-R1/toolchain/gcc-arm-8.2-2018.08-x86_64-arm-linux-gnueabihf/bin
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/arm-linux-gnueabihf.toolchain.cmake \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR=$GITHUB_WORKSPACE/${{ env.PACKAGENAME }}/lib/cmake/opencv4 ..
        cmake --build . -j 2
    - name: upload
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  release:
    permissions:
      contents: write  # for softprops/action-gh-release to create a release
    needs: [setup, android-opencv4, android-opencv3, android-opencv2, ios-opencv4, ios-opencv3, ios-opencv2, ios-opencv4-bitcode, ios-opencv3-bitcode, ios-opencv2-bitcode, ios-simulator-opencv4, ios-simulator-opencv3, ios-simulator-opencv2, ios-simulator-opencv4-bitcode, ios-simulator-opencv3-bitcode, ios-simulator-opencv2-bitcode, armlinux-opencv4, armlinux-opencv3, armlinux-opencv2, macos-opencv4, macos-opencv3, macos-opencv2, mac-catalyst-opencv4, mac-catalyst-opencv3, mac-catalyst-opencv2, mac-catalyst-opencv4-bitcode, mac-catalyst-opencv3-bitcode, mac-catalyst-opencv2-bitcode, windows-vs2015-opencv4, windows-vs2015-opencv3, windows-vs2015-opencv2, windows-vs2017-opencv4, windows-vs2017-opencv3, windows-vs2017-opencv2, windows-vs2019-opencv4, windows-vs2019-opencv3, windows-vs2019-opencv2, windows-vs2022-opencv4, windows-vs2022-opencv3, windows-vs2022-opencv2, ubuntu-2004-opencv4, ubuntu-2004-opencv3, ubuntu-2004-opencv2, ubuntu-2204-opencv4, ubuntu-2204-opencv3, ubuntu-2204-opencv2, webassembly-opencv4, webassembly-opencv3, webassembly-opencv2, apple-opencv4, apple-opencv3, apple-opencv2, apple-opencv4-bitcode, apple-opencv3-bitcode, apple-opencv2-bitcode, milkv-duo-opencv4, luckfox-pico-opencv4, yuzuki-lizard-opencv4, purple-pi-opencv4]
    runs-on: ubuntu-latest
    steps:
    - name: download
      uses: actions/download-artifact@v3
      with:
        path: artifacts

    - name: create-release
      uses: softprops/action-gh-release@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        tag_name: ${{ needs.setup.outputs.VERSION }}
        name: Release ${{ needs.setup.outputs.VERSION }}
        files: artifacts/*/*.zip
