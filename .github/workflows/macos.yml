name: release-macos
on: [push, pull_request]

env:
  DEVELOPER_DIR: /Applications/Xcode_12.2.app/Contents/Developer

jobs:

  #macos-opencv4:
    #runs-on: macos-latest
    #env:
      #OPENCV_VERSION: 4.5.1
      #PACKAGENAME: opencv-mobile-4.5.1-macos
    #steps:
    #- uses: actions/checkout@v2
    #- name: opencv-source
      #run: |
        #wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        #unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        #cd opencv-${{ env.OPENCV_VERSION }}
        #echo -n > cmake/OpenCVFindLibsGrfmt.cmake
        #rm -rf modules/gapi
        #patch -p1 -i ../opencv-4.5.1-no-rtti.patch
        #patch -p1 -i ../opencv-4.5.1-no-zlib.patch
        #rm -rf modules/highgui
        #cp -r ../highgui modules/
    #- name: build-x86_64
      #run: |
        #cd opencv-${{ env.OPENCV_VERSION }}
        #mkdir build-x86_64 && cd build-x86_64
        #cmake -DCMAKE_OSX_ARCHITECTURES="x86_64" \
            #-DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv4_cmake_options.txt` -DBUILD_opencv_world=ON ..
        #cmake --build . -j 2
        #cmake --build . --target install
    #- name: build-arm64
      #run: |
        #cd opencv-${{ env.OPENCV_VERSION }}
        #mkdir build-arm64 && cd build-arm64
        #cmake -DCMAKE_OSX_ARCHITECTURES="arm64" \
            #-DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv4_cmake_options.txt` -DBUILD_opencv_world=ON ..
        #cmake --build . -j 2
        #cmake --build . --target install
    #- name: package
      #run: |
        #rm -rf opencv2.framework
        #mkdir -p opencv2.framework/Versions/A/Headers
        #mkdir -p opencv2.framework/Versions/A/Resources
        #ln -s A opencv2.framework/Versions/Current
        #ln -s Versions/Current/Headers opencv2.framework/Headers
        #ln -s Versions/Current/Resources opencv2.framework/Resources
        #ln -s Versions/Current/opencv2 opencv2.framework/opencv2
        #lipo -create opencv-${{ env.OPENCV_VERSION }}/build-x86_64/install/lib/libopencv_world.a opencv-${{ env.OPENCV_VERSION }}/build-arm64/install/lib/libopencv_world.a -o opencv2.framework/Versions/A/opencv2
        #cp -r opencv-${{ env.OPENCV_VERSION }}/build-x86_64/install/include/opencv4/opencv2/* opencv2.framework/Versions/A/Headers/
        #sed -e 's/__NAME__/OpenCV/g' -e 's/__IDENTIFIER__/org.opencv/g' -e 's/__VERSION__/${{ env.OPENCV_VERSION }}/g' Info.plist > opencv2.framework/Versions/A/Resources/Info.plist
        #rm -f ${{ env.PACKAGENAME }}.zip
        #zip -9 -y -r ${{ env.PACKAGENAME }}.zip opencv2.framework
    #- name: upload-zip
      #uses: actions/upload-artifact@v2
      #with:
        #name: ${{ env.PACKAGENAME }}
        #path: ${{ env.PACKAGENAME }}.zip

  #macos-opencv3:
    #runs-on: macos-latest
    #env:
      #OPENCV_VERSION: 3.4.13
      #PACKAGENAME: opencv-mobile-3.4.13-macos
    #steps:
    #- uses: actions/checkout@v2
    #- name: opencv-source
      #run: |
        #wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        #unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        #cd opencv-${{ env.OPENCV_VERSION }}
        #echo -n > cmake/OpenCVFindLibsGrfmt.cmake
        #patch -p1 -i ../opencv-3.4.13-no-rtti.patch
        #patch -p1 -i ../opencv-3.4.13-no-zlib.patch
        #rm -rf modules/highgui
        #cp -r ../highgui modules/
    #- name: build-x86_64
      #run: |
        #cd opencv-${{ env.OPENCV_VERSION }}
        #mkdir build-x86_64 && cd build-x86_64
        #cmake -DCMAKE_OSX_ARCHITECTURES="x86_64" \
            #-DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=ON ..
        #cmake --build . -j 2
        #cmake --build . --target install
    #- name: build-arm64
      #run: |
        #cd opencv-${{ env.OPENCV_VERSION }}
        #mkdir build-arm64 && cd build-arm64
        #cmake -DCMAKE_OSX_ARCHITECTURES="arm64" \
            #-DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=ON ..
        #cmake --build . -j 2
        #cmake --build . --target install
    #- name: package
      #run: |
        #rm -rf opencv2.framework
        #mkdir -p opencv2.framework/Versions/A/Headers
        #mkdir -p opencv2.framework/Versions/A/Resources
        #ln -s A opencv2.framework/Versions/Current
        #ln -s Versions/Current/Headers opencv2.framework/Headers
        #ln -s Versions/Current/Resources opencv2.framework/Resources
        #ln -s Versions/Current/opencv2 opencv2.framework/opencv2
        #lipo -create opencv-${{ env.OPENCV_VERSION }}/build-x86_64/install/lib/libopencv_world.a opencv-${{ env.OPENCV_VERSION }}/build-arm64/install/lib/libopencv_world.a -o opencv2.framework/Versions/A/opencv2
        #cp -r opencv-${{ env.OPENCV_VERSION }}/build-x86_64/install/include/opencv2/* opencv2.framework/Versions/A/Headers/
        #sed -e 's/__NAME__/OpenCV/g' -e 's/__IDENTIFIER__/org.opencv/g' -e 's/__VERSION__/${{ env.OPENCV_VERSION }}/g' Info.plist > opencv2.framework/Versions/A/Resources/Info.plist
        #rm -f ${{ env.PACKAGENAME }}.zip
        #zip -9 -y -r ${{ env.PACKAGENAME }}.zip opencv2.framework
    #- name: upload-zip
      #uses: actions/upload-artifact@v2
      #with:
        #name: ${{ env.PACKAGENAME }}
        #path: ${{ env.PACKAGENAME }}.zip

  macos-opencv2:
    runs-on: macos-latest
    env:
      OPENCV_VERSION: 2.4.13.7
      PACKAGENAME: opencv-mobile-2.4.13.7-macos
    steps:
    - uses: actions/checkout@v2
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        echo -n > cmake/OpenCVFindLibsGrfmt.cmake
        patch -p1 -i ../opencv-2.4.13.7-no-rtti.patch
        patch -p1 -i ../opencv-2.4.13.7-no-zlib.patch
        patch -p1 -i ../opencv-2.4.13.7-fix-highgui-include.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/

        echo 'message(WARNING "objlist = ${objlist}")' >> modules/world/CMakeLists.txt
        echo 'message(WARNING "CMAKE_CURRENT_BINARY_DIR = ${CMAKE_CURRENT_BINARY_DIR}")' >> modules/world/CMakeLists.txt
    - name: build-x86_64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x86_64 && cd build-x86_64
        cmake -DCMAKE_OSX_ARCHITECTURES="x86_64" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv2_cmake_options.txt` -DBUILD_opencv_world=ON ..


        echo "------------------------"
        cat modules/world/world_objects.list

        echo "------------------------"
        cat modules/world/world_objects.rsp

        echo "------------------------"

        cmake --build . -j 2 --verbose || ;

        echo "------------------------"
        cat modules/world/world_objects.list

        echo "------------------------"
        cat modules/world/world_objects.rsp

        echo "------------------------"


        # cmake --build . --target install

    #- name: build-arm64
      #run: |
        #cd opencv-${{ env.OPENCV_VERSION }}
        #mkdir build-arm64 && cd build-arm64
        #cmake -DCMAKE_OSX_ARCHITECTURES="arm64" \
            #-DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv2_cmake_options.txt` -DBUILD_opencv_world=ON ..
        #cmake --build . -j 2 --verbose
        #cmake --build . --target install
    #- name: package
      #run: |
        #rm -rf opencv2.framework
        #mkdir -p opencv2.framework/Versions/A/Headers
        #mkdir -p opencv2.framework/Versions/A/Resources
        #ln -s A opencv2.framework/Versions/Current
        #ln -s Versions/Current/Headers opencv2.framework/Headers
        #ln -s Versions/Current/Resources opencv2.framework/Resources
        #ln -s Versions/Current/opencv2 opencv2.framework/opencv2
        #lipo -create opencv-${{ env.OPENCV_VERSION }}/build-x86_64/install/lib/libopencv_world.a opencv-${{ env.OPENCV_VERSION }}/build-arm64/install/lib/libopencv_world.a -o opencv2.framework/Versions/A/opencv2
        #cp -r opencv-${{ env.OPENCV_VERSION }}/build-x86_64/install/include/opencv2/* opencv2.framework/Versions/A/Headers/
        #sed -e 's/__NAME__/OpenCV/g' -e 's/__IDENTIFIER__/org.opencv/g' -e 's/__VERSION__/${{ env.OPENCV_VERSION }}/g' Info.plist > opencv2.framework/Versions/A/Resources/Info.plist
        #rm -f ${{ env.PACKAGENAME }}.zip
        #zip -9 -y -r ${{ env.PACKAGENAME }}.zip opencv2.framework
    #- name: upload-zip
      #uses: actions/upload-artifact@v2
      #with:
        #name: ${{ env.PACKAGENAME }}
        #path: ${{ env.PACKAGENAME }}.zip
