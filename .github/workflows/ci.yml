name: ci
on: pull_request

env:
  DEVELOPER_DIR: /Applications/Xcode_15.2.app/Contents/Developer
  IOS_DEPLOYMENT_TARGET: '13.0'
  MAC_DEPLOYMENT_TARGET: '11.0'
  MAC_CATALYST_DEPLOYMENT_TARGET: '13.1'
  WATCHOS_DEPLOYMENT_TARGET: '6.0'
  TVOS_DEPLOYMENT_TARGET: '11.0'
  VISIONOS_DEPLOYMENT_TARGET: '1.0'
  ENABLE_BITCODE: OFF
  ENABLE_ARC: OFF
  ENABLE_VISIBILITY: OFF
  EMSCRIPTEN_VERSION: 3.1.28

permissions:
  contents: read

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.get_version.outputs.VERSION }}
    steps:
    - uses: actions/checkout@v4
    - name: get-version
      id: get_version
      run: echo "VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_OUTPUT
    - name: opencv4-source
      env:
        opencv-version: 4.12.0
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.opencv-version }}.zip -O opencv-${{ env.opencv-version }}.zip
        unzip -q opencv-${{ env.opencv-version }}.zip
        rm opencv-${{ env.opencv-version }}.zip
        cd opencv-${{ env.opencv-version }}
        truncate -s 0 cmake/OpenCVFindLibsGrfmt.cmake
        rm -rf modules/gapi

        truncate -s 0 cmake/platforms/OpenCV-Linux.cmake

        rm modules/core/src/cuda_*
        rm modules/core/src/direct*
        rm modules/core/src/gl_*
        rm modules/core/src/intel_gpu_*
        rm modules/core/src/ocl*
        rm modules/core/src/opengl.cpp
        rm modules/core/src/ovx.cpp
        rm modules/core/src/umatrix.hpp
        rm modules/core/src/va_intel.cpp
        rm modules/core/src/va_wrapper.impl.hpp

        rm modules/core/include/opencv2/core/cuda*.hpp
        rm modules/core/include/opencv2/core/directx.hpp
        rm modules/core/include/opencv2/core/ocl*.hpp
        rm modules/core/include/opencv2/core/opengl.hpp
        rm modules/core/include/opencv2/core/ovx.hpp
        rm modules/core/include/opencv2/core/private.cuda.hpp
        rm modules/core/include/opencv2/core/va_*.hpp
        rm -rf modules/core/include/opencv2/core/cuda
        rm -rf modules/core/include/opencv2/core/opencl
        rm -rf modules/core/include/opencv2/core/openvx

        rm modules/photo/src/denoising.cuda.cpp
        rm modules/photo/include/opencv2/photo/cuda.hpp

        find modules -type d | xargs -i rm -rf {}/src/cuda
        find modules -type d | xargs -i rm -rf {}/src/opencl
        find modules -type d | xargs -i rm -rf {}/perf/cuda
        find modules -type d | xargs -i rm -rf {}/perf/opencl
        find modules -type f | xargs -i sed -i '/opencl_kernels/d' {}
        find modules -type f | xargs -i sed -i '/cuda.hpp/d' {}
        find modules -type f | xargs -i sed -i '/opengl.hpp/d' {}
        find modules -type f | xargs -i sed -i '/ocl_defs.hpp/d' {}
        find modules -type f | xargs -i sed -i '/ocl.hpp/d' {}
        find modules -type f | xargs -i sed -i '/ovx_defs.hpp/d' {}
        find modules -type f | xargs -i sed -i '/ovx.hpp/d' {}
        find modules -type f | xargs -i sed -i '/va_intel.hpp/d' {}

        patch -p1 -i ../patches/opencv-${{ env.opencv-version }}-no-gpu.patch

        patch -p1 -i ../patches/opencv-${{ env.opencv-version }}-no-rtti.patch
        patch -p1 -i ../patches/opencv-${{ env.opencv-version }}-no-zlib.patch
        patch -p1 -i ../patches/opencv-${{ env.opencv-version }}-link-openmp.patch
        patch -p1 -i ../patches/opencv-${{ env.opencv-version }}-fix-windows-arm-arch.patch
        patch -p1 -i ../patches/opencv-${{ env.opencv-version }}-minimal-install.patch
        cp ../patches/draw_text.h ../patches/mono_font_data.h modules/imgproc/src/
        cp ../patches/fontface.html ./
        patch -p1 -i ../patches/opencv-${{ env.opencv-version }}-drawing-mono-font.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/
        rm -rf 3rdparty/*
        rm -rf apps data doc samples platforms
        rm -rf modules/java
        rm -rf modules/js
        rm -rf modules/python
        rm -rf modules/ts
        rm -rf modules/dnn
        sed -e 's/__VERSION__/${{ env.opencv-version }}/g' ../patches/Info.plist > ./Info.plist
        cp ../opencv4_cmake_options.txt ./options.txt
        cp -r ../toolchains .
        cd ..
        mv opencv-${{ env.opencv-version }} opencv-mobile-${{ env.opencv-version }}
        zip -9 -r opencv-mobile-${{ env.opencv-version }}.zip opencv-mobile-${{ env.opencv-version }}
    - name: upload-opencv4-source
      uses: actions/upload-artifact@v4
      with:
        name: opencv-mobile-4.12.0-source
        path: opencv-mobile-4.12.0.zip

  devboard:
    needs: [setup]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        fail-fast: false
        include:
          - name: milkv-duo
            single-core: true
            cmake-toolchain: riscv64-unknown-linux-musl.toolchain.cmake
            setup-toolchain-cmd: |
              wget -q https://occ-oss-prod.oss-cn-hangzhou.aliyuncs.com/resource//1749713312767/Xuantie-900-gcc-linux-5.10.4-musl64-x86_64-V3.1.0-20250522.tar.gz
              tar -xf Xuantie-900-gcc-linux-5.10.4-musl64-x86_64-V3.1.0-20250522.tar.gz
              wget -q https://sophon-file.sophon.cn/sophon-prod-s3/drive/23/03/07/16/host-tools.tar.gz
              tar -xf host-tools.tar.gz
            setup-env-cmd: |
              export RISCV_ROOT_PATH=$GITHUB_WORKSPACE/Xuantie-900-gcc-linux-5.10.4-musl64-x86_64-V3.1.0
            setup-test-env-cmd: |
              export RISCV_ROOT_PATH=$GITHUB_WORKSPACE/host-tools/gcc/riscv64-linux-musl-x86_64
            cmake-options: -DWITH_CVI=ON -DWITH_HAL_RVV=ON

          - name: licheerv-nano
            single-core: true
            cmake-toolchain: riscv64-unknown-linux-musl.toolchain.cmake
            setup-toolchain-cmd: |
              wget -q https://occ-oss-prod.oss-cn-hangzhou.aliyuncs.com/resource//1705396382457/Xuantie-900-gcc-linux-5.10.4-musl64-x86_64-V2.8.1-20240115.tar.gz
              tar -xf Xuantie-900-gcc-linux-5.10.4-musl64-x86_64-V2.8.1-20240115.tar.gz
              wget -q https://sophon-file.sophon.cn/sophon-prod-s3/drive/23/03/07/16/host-tools.tar.gz
              tar -xf host-tools.tar.gz
            setup-env-cmd: |
              export RISCV_ROOT_PATH=$GITHUB_WORKSPACE/Xuantie-900-gcc-linux-5.10.4-musl64-x86_64-V2.8.1
            setup-test-env-cmd: |
              export RISCV_ROOT_PATH=$GITHUB_WORKSPACE/host-tools/gcc/riscv64-linux-musl-x86_64
            cmake-options: -DWITH_CVI=ON -DWITH_HAL_RVV=OFF -DOPENCV_EXTRA_FLAGS="-D__riscv_vector_071 -mrvv-vector-bits=128"

          - name: avaota-f1
            single-core: true
            cmake-toolchain: riscv32-linux-musl.toolchain.cmake
            setup-toolchain-cmd: |
              wget -q https://github.com/AvaotaSBC/toolchains/releases/download/v821-toolchains/nds32le-linux-musl-v5d.tar.xz
              tar -xf nds32le-linux-musl-v5d.tar.xz
            setup-env-cmd: |
              export RISCV_ROOT_PATH=$GITHUB_WORKSPACE/nds32le-linux-musl-v5d
            setup-test-env-cmd: |
              export RISCV_ROOT_PATH=$GITHUB_WORKSPACE/nds32le-linux-musl-v5d
            cmake-options: -DWITH_AW=ON

    container:
      image: ${{ matrix.os-image }}

    env:
      COMMON_CMAKE_OPTIONS: |
        -DCMAKE_TOOLCHAIN_FILE=../../toolchains/${{ matrix.cmake-toolchain }} \
        -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" \
        -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
        -DCMAKE_INSTALL_PREFIX=install \
        -DCMAKE_BUILD_TYPE=Release \

    steps:
    - uses: actions/checkout@v4
    - uses: actions/download-artifact@v4
      with:
        name: opencv-mobile-4.12.0-source
    - name: setup-toolchain
      run: ${{ matrix.setup-toolchain-cmd }}
    - name: setup-opencv-source
      run: |
        unzip -q opencv-mobile-4.12.0.zip
        echo "SOURCE_DIR=opencv-mobile-4.12.0" >> $GITHUB_ENV
        echo "PACKAGE_NAME=opencv-mobile-4.12.0-${{ matrix.name }}" >> $GITHUB_ENV

    - name: build-disable-thread
      if: ${{ matrix.single-core }}
      run: |
        cd ${{ env.SOURCE_DIR }}
        patch -p1 -i ../patches/opencv-4.12.0-no-atomic.patch
        mkdir build && cd build
        ${{ matrix.setup-env-cmd }}
        cmake ${{ env.COMMON_CMAKE_OPTIONS }} ${{ matrix.cmake-options }} \
            `cat ../options.txt` -DBUILD_opencv_world=OFF -DOPENCV_DISABLE_FILESYSTEM_SUPPORT=ON \
            -DWITH_OPENMP=OFF -DOPENCV_DISABLE_THREAD_SUPPORT=ON ..
        cmake --build . -j $(nproc)
        cmake --build . --target install

    - name: build-enable-thread
      if: ${{ ! matrix.single-core }}
      run: |
        cd ${{ env.SOURCE_DIR }}
        mkdir build && cd build
        ${{ matrix.setup-env-cmd }}
        cmake ${{ env.COMMON_CMAKE_OPTIONS }} ${{ matrix.cmake-options }} \
            `cat ../options.txt` -DBUILD_opencv_world=OFF -DOPENCV_DISABLE_FILESYSTEM_SUPPORT=ON ..
        cmake --build . -j $(nproc)
        cmake --build . --target install

    - name: package
      run: |
        mkdir ${{ env.PACKAGE_NAME }}
        cp -rf ${{ env.SOURCE_DIR }}/build/install/* ${{ env.PACKAGE_NAME }}/
        zip -9 -r ${{ env.PACKAGE_NAME }}.zip ${{ env.PACKAGE_NAME }}

    - name: test
      run: |
        cd test
        mkdir build && cd build
        ${{ matrix.setup-test-env-cmd }}
        cmake ${{ env.COMMON_CMAKE_OPTIONS }} -DOpenCV_DIR=$GITHUB_WORKSPACE/${{ env.PACKAGE_NAME }}/lib/cmake/opencv4 ..
        cmake --build . -j $(nproc)

    - name: upload-zip
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PACKAGE_NAME }}
        path: ${{ env.PACKAGE_NAME }}.zip
